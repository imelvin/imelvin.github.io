<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Elvin Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://elvin.im/"/>
  <updated>2016-05-16T20:52:48.790Z</updated>
  <id>http://elvin.im/</id>
  
  <author>
    <name><![CDATA[Elvin Guan]]></name>
    <email><![CDATA[gwmwhu@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[java.util.ConcurrentHashMap原理研究]]></title>
    <link href="http://elvin.im/2016/04/17/java-util-ConcurrentHashMap%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/"/>
    <id>http://elvin.im/2016/04/17/java-util-ConcurrentHashMap原理研究/</id>
    <published>2016-04-16T17:57:17.000Z</published>
    <updated>2016-05-16T20:28:33.000Z</updated>
    <content type="html"><![CDATA[<p>ConcurrentHashMap是Java并发程序中一个很常用的类，本文旨在研究散列结构的原理和ConcurrentHashMap的性能优化技术。</p>
<p>首先我们先自己实现一个简单的MyHashMap，然后实现线程安全的MyConcurrentHashMap，最后分析java.util.ConcurrentHashMap的源码</p>
<h2 id="非线程安全HashMap">非线程安全HashMap</h2>
<h3 id="实现MyHashMap">实现MyHashMap</h3>
<p>首先定义一个MyMap的接口如下：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> MyMap&lt;K, V&gt; {</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> V <span class="title">put</span>(K key, V <span class="keyword">value</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> V <span class="title">remove</span>(Object key);</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> V <span class="title">get</span>(Object key);</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> boolean <span class="title">isEmpty</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> Entry&lt;K, V&gt; {</div><div class="line">		<span class="keyword">public</span> K <span class="title">getKey</span>();</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> V <span class="title">getValue</span>();</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> V <span class="title">setValue</span>(V <span class="keyword">value</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>为了简单起见，MyHashMap使用一个固定的数组来保存bucket，每个bucket是一个链表，关键的put和get方法如下：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"><span class="keyword">public</span> V <span class="title">put</span>(K key, V <span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">return</span> putVal(hash(key), key, <span class="keyword">value</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// put方法通过hashCode将key映射到table数组上，如果出现冲突则往链表插入节点</span></div><div class="line"><span class="keyword">private</span> V <span class="title">putVal</span>(<span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">int</span> i = (table.length - <span class="number">1</span>) & hash;</div><div class="line">	Node&lt;K, V&gt; p = <span class="keyword">this</span>.table[i];</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (p == <span class="keyword">null</span>) {</div><div class="line">		p = <span class="keyword">this</span>.table[i] = <span class="keyword">new</span> Node&lt;&gt;(hash, key, <span class="keyword">value</span>, <span class="keyword">null</span>);</div><div class="line">	} <span class="keyword">else</span> {</div><div class="line">		<span class="keyword">while</span> (p != <span class="keyword">null</span>) {</div><div class="line">			<span class="keyword">if</span> (p.hash == hash && (p.key == key || (key != <span class="keyword">null</span> && key.equals(p.key)))) {</div><div class="line">		        p.<span class="keyword">value</span> = <span class="keyword">value</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (p.next == <span class="keyword">null</span>) {</div><div class="line">				p = p.next = newNode(hash, key, <span class="keyword">value</span>, <span class="keyword">null</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			}</div><div class="line">			p = p.next;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">this</span>.size ++;</div><div class="line">	<span class="keyword">return</span> p.<span class="keyword">value</span>;</div><div class="line">}</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">public</span> V <span class="title">get</span>(Object key) {</div><div class="line">	Node&lt;K, V&gt; e;</div><div class="line">	<span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.<span class="keyword">value</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// get方法通过hashCode在数组中找到相应的bucket，再遍历查找相应的key</span></div><div class="line"><span class="keyword">private</span> Node&lt;K, V&gt; <span class="title">getNode</span>(<span class="keyword">int</span> hash, Object key) {</div><div class="line">	<span class="keyword">int</span> i = (table.length - <span class="number">1</span>) & hash;</div><div class="line">	Node&lt;K, V&gt; first;</div><div class="line">	Node&lt;K, V&gt; p;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> ((first = <span class="keyword">this</span>.table[i]) != <span class="keyword">null</span>) {</div><div class="line">		p = first;</div><div class="line">		<span class="keyword">while</span> (p != <span class="keyword">null</span>) {</div><div class="line">			<span class="keyword">if</span> (p.hash == hash && (p.key == key || (key != <span class="keyword">null</span> && key.equals(p.key)))) {</div><div class="line">				<span class="keyword">return</span> p;</div><div class="line">			}</div><div class="line">			</div><div class="line">			p = p.next;</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="put方法性能">put方法性能</h3>
<p>然后写一个测试用例来测试put方法的性能，测试用例如下：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyHashMapTest {</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MyMap&lt;String, Integer&gt; myMap = <span class="keyword">new</span> MyHashMap&lt;&gt;();</div><div class="line">	<span class="keyword">private</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10000</span>;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyHashMap</span>() {</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			myMap.put(String.valueOf(i), i);</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"MyHashMap耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashMap</span>() {</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			map.put(String.valueOf(i), i);</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"HashMap耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<pre><code>当<span class="built_in">count</span> = <span class="number">10000</span>时，测试结果如下：
    MyHashMap耗时：<span class="number">58</span>
    HashMap耗时：<span class="number">5</span>

当<span class="built_in">count</span> = <span class="number">100000</span>时，测试结果如下：
    MyHashMap耗时：<span class="number">20114</span>
    HashMap耗时：<span class="number">32</span>
</code></pre><h3 id="自适应容量优化">自适应容量优化</h3>
<p>由结果可见我们自己实现的MyHashMap性能差很多，经过初步分析原因如下：</p>
<ul>
<li>bucket数量不变，当数据量足够大时，会有很多冲突，每次put都是一个链表的遍历</li>
</ul>
<p>我们可以动态的增加bucket数量，保证冲突不会太多。</p>
<p>根据以上思路，我们加入了resize方法，每当Map元素数量达到临界值时就扩充一倍的容量。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">private Node&lt;K, V&gt; [] resize() {</div><div class="line">	Node&lt;K, V&gt; [] newTab = table;</div><div class="line">	int oldCap = table.length;</div><div class="line">	int newCap;</div><div class="line">	</div><div class="line">	if (size &gt; threshold) {	//超过临界值，增加容量</div><div class="line">		if ((newCap = oldCap &lt;&lt; 1) &lt; 0) {</div><div class="line">			newCap = Integer.MAX_VALUE;</div><div class="line">		}</div><div class="line">		threshold = (int) (loadFactor * newCap);</div><div class="line">		</div><div class="line">		if (newCap &gt; oldCap) {</div><div class="line">			newTab = (Node&lt;K, V&gt; []) new Node [newCap];</div><div class="line">			for (int i = 0; i &lt; table.length; i++) {</div><div class="line">				Node&lt;K, V&gt; e = table[i];</div><div class="line">				while (e != null) {</div><div class="line">					Node&lt;K, V&gt; p = e;</div><div class="line">					e = e.next;</div><div class="line">					int j = p.hash & (newCap - 1);</div><div class="line">					Node&lt;K, V&gt; q = newTab[j];</div><div class="line">					p.next = q;</div><div class="line">					newTab[j] = p;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	this.table = newTab;</div><div class="line">	</div><div class="line">	return newTab;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>经过此优化后，</p>
<pre><code><span class="built_in">count</span> = <span class="number">10000</span>时，测试结果如下：
    MyHashMap耗时：<span class="number">11</span>
    HashMap耗时：<span class="number">7</span>


当<span class="built_in">count</span> = <span class="number">100000</span>时，测试结果如下：
    MyHashMap耗时：<span class="number">59</span>
    HashMap耗时：<span class="number">39</span>
</code></pre><p>可以看到，性能已经明显好转，已经与Java的HashMap的性能在一个量级。</p>
<h3 id="get方法性能">get方法性能</h3>
<p>将测试用例稍微改写一点</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyHashMapTest {</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MyMap&lt;String, Integer&gt; myMap = <span class="keyword">new</span> MyHashMap&lt;&gt;();</div><div class="line">	<span class="keyword">private</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10000</span>;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyHashMap</span>() {</div><div class="line">		</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			myMap.put(String.valueOf(i), i);</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			assertNotNull(myMap.<span class="keyword">get</span>(String.valueOf(i)));</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"MyHashMap耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashMap</span>() {</div><div class="line">		</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			map.put(String.valueOf(i), i);</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {</div><div class="line">			assertNotNull(map.<span class="keyword">get</span>(String.valueOf(i)));</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"HashMap耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>测试结果如下，</p>
<pre><code>当<span class="built_in">count</span> = <span class="number">10000</span>时
    MyHashMap耗时：<span class="number">22</span>
    HashMap耗时：<span class="number">4</span>

当<span class="built_in">count</span> = <span class="number">100000</span>时
    MyHashMap耗时：<span class="number">22</span>
    HashMap耗时：<span class="number">25</span>

当<span class="built_in">count</span> = <span class="number">1000000</span>时
    MyHashMap耗时：<span class="number">1121</span>
    HashMap耗时：<span class="number">118</span>

当<span class="built_in">count</span> = <span class="number">10000000</span>
    MyHashMap耗时：<span class="number">2698</span>
    HashMap耗时：<span class="number">2737</span>
</code></pre><p>当测试充分时，MyHashMap与java.util.HashMap的性能差距有限。</p>
<h2 id="线程安全的HashMap">线程安全的HashMap</h2>
<h3 id="改造MyHashMap为线程安全">改造MyHashMap为线程安全</h3>
<p>在多线程情况下，MyHashMap就不能再使用，MyHashMap没有任何线程安全措施，强行使用的话会导致不可预知的结果发生，java.util.HashMap同理。而在Java中，与java.util.HashMap对应的线程安全类是java.util.Hashtable，Hashtable在HashMap基础上加入了线程同步，所以线程是安全的。</p>
<p>现在我们重新实现一个MyHashtable，在MyHashMap的基础上加入线程安全措施。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashtable</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</div><div class="line"></div><div class="line">    ......	</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span>(K key, V value) {</div><div class="line">		<span class="keyword">return</span> putVal(hash(key), key, value);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span>(Object key) {</div><div class="line">		Node&lt;K, V&gt; e;</div><div class="line">		<span class="keyword">return</span> (e = removeNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clear</span>() {</div><div class="line">		<span class="keyword">if</span> (size &gt; <span class="number">0</span>) {</div><div class="line">			size = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++) {</div><div class="line">				table[i] = <span class="keyword">null</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span>(Object key) {</div><div class="line">		Node&lt;K, V&gt; e;</div><div class="line">		<span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.size;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.size == <span class="number">0</span>;</div><div class="line">	}</div><div class="line">	</div><div class="line">	......</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="测试MyHashtable性能">测试MyHashtable性能</h3>
<p>我们使用一个线程数量为100的线程池来测试散列结构的并发性能，在每个线程中读写散列结构1000次。然后再分别测试java.util.Hashtable、java.util.concurrent.ConcurrentHashMap性能作为对比。测试代码如下：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashMapMultiThreadTest</span> </span>{</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ThreadPoolExecutor threadPool;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> MyMap&lt;String, Integer&gt; myTable = <span class="keyword">new</span> MyHashtable&lt;&gt;();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; table = <span class="keyword">new</span> Hashtable&lt;&gt;();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; conMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000000</span>; </div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> nThread = Runtime.getRuntime().availableProcessors() + <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="annotation">@Before</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span>() {</div><div class="line">		threadPool = <span class="keyword">new</span> ThreadPoolExecutor(nThread, nThread, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Test</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyHashTable</span>() <span class="keyword">throws</span> InterruptedException {</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(<span class="keyword">new</span> Runnable() {</div><div class="line">				</div><div class="line">				<span class="annotation">@Override</span></div><div class="line">				<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						myTable.put(String.valueOf(num), numj), j);</div><div class="line">					}</div><div class="line">					</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						myTable.get(String.valueOf(numj));</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		<span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">while</span> (loop) {</div><div class="line">			loop = !threadPool.awaitTermination(<span class="number">100</span>, TimeUnit.MILLISECONDS);</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.out.println(<span class="string">"MyHashtable耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="annotation">@Test</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashtable</span>() <span class="keyword">throws</span> InterruptedException {</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(<span class="keyword">new</span> Runnable() {</div><div class="line">				</div><div class="line">				<span class="annotation">@Override</span></div><div class="line">				<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						table.put(String.valueOf(num), numj), j);</div><div class="line">					}</div><div class="line">					</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						table.get(String.valueOf(numj));</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		<span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">while</span> (loop) {</div><div class="line">			loop = !threadPool.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS);</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.out.println(<span class="string">"Hashtable耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="annotation">@Test</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcurrentHashMap</span>() <span class="keyword">throws</span> InterruptedException {</div><div class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(<span class="keyword">new</span> Runnable() {</div><div class="line">				</div><div class="line">				<span class="annotation">@Override</span></div><div class="line">				<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						conMap.put(String.valueOf(num), numj), j);</div><div class="line">					}</div><div class="line">					</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) {</div><div class="line">						<span class="keyword">int</span> num = xorShift(<span class="keyword">this</span>.hashCode() ^ (<span class="keyword">int</span>) System.nanoTime());</div><div class="line">						conMap.get(String.valueOf(numj));</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		<span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">while</span> (loop) {</div><div class="line">			loop = !threadPool.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS);</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.out.println(<span class="string">"ConcurrentHashMap耗时："</span> + (end - start));</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> xorShift(<span class="keyword">int</span> y) {</div><div class="line">		y ^= (y &lt;&lt; <span class="number">6</span>);</div><div class="line">		y ^= (y &gt;&gt;&gt; <span class="number">21</span>);</div><div class="line">		y ^= (y &lt;&lt; <span class="number">7</span>);</div><div class="line">		<span class="keyword">return</span> y;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<pre><code>当<span class="built_in">count</span> = <span class="number">1000</span>时，结果如下：
    ConcurrentHashMap耗时：<span class="number">44</span>
    Hashtable耗时：<span class="number">14</span>
    MyHashtable耗时：<span class="number">15</span>

当<span class="built_in">count</span> = <span class="number">10000</span>时，结果如下：
    ConcurrentHashMap耗时：<span class="number">1015</span>
    Hashtable耗时：<span class="number">96</span>
    MyHashtable耗时：<span class="number">150</span>

当<span class="built_in">count</span> = <span class="number">100000</span>时，结果如下：
    ConcurrentHashMap耗时：<span class="number">366</span>
    Hashtable耗时：<span class="number">423</span>
    MyHashtable耗时：<span class="number">1002</span>

当<span class="built_in">count</span> = <span class="number">1000000</span>时，结果如下：
    ConcurrentHashMap耗时：<span class="number">3485</span>
    Hashtable耗时：<span class="number">17062</span>
    MyHashtable耗时：<span class="number">114294927</span>
</code></pre><p>当测试足够充分时，结果性能差距非常明显（经过后面的问题发现，MyHashtable性能下降是由于测试用例内存泄露），java.util.concurrent.ConcurrentHashMap性能要优异很多。后面我们将会来优化我们的散列结构性能，减少与java.util.concurrent.ConcurrentHashMap的性能差距。</p>
<h3 id="实现MyConcurrentHashMap">实现MyConcurrentHashMap</h3>
<p>加上同步后，所有对散列的操作都变成了串行操作。首先想到的就是横向优化，将数据分片，每一个Segment的数据单独加锁，这样就可以多线程同时操作。只有多个线程操作的数据哈希映射到同一个Segment中，才会有锁冲突。</p>
<p>首先我们定义一个Segment的内部类，作为一个数据分片，在Segment的对象上单独加锁。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Segment&lt;K, V&gt; {</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> Node&lt;K, V&gt; [] table;</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样优化带来一个问题，就是类似于size()和isEmpty()这样的方法会有问题。由于这些方法要遍历每一Segment的数据，如果只是简单的依次把每个Segment的数据的结果相加起来，则难免会造成刚刚统计过的一个Segment后，该Segment马上就发生了变化，最终的结果与当前状态不一致。那么就需要在执行这些操作的时候将所有Segment都加锁，而这种锁操作很显然已经不是内置锁synchronized所能适用。所以我们需要使用显示锁来实现MyConcurrentHashMap。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Segment&lt;K, V&gt; {</div><div class="line">		</div><div class="line">	final Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> Node&lt;K, V&gt; [] table;</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> threshold;</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> final <span class="keyword">float</span> loadFactor;</div><div class="line">		</div><div class="line">	@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">	Segment(<span class="keyword">int</span> tableSize, <span class="keyword">float</span> loadFactor) {</div><div class="line">		<span class="keyword">this</span>.table = (Node&lt;K, V&gt; []) (<span class="keyword">new</span> Node [tableSize]);</div><div class="line">		<span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">		threshold = (<span class="keyword">int</span>) (<span class="keyword">this</span>.table.length * loadFactor);</div><div class="line">	}</div><div class="line">	</div><div class="line">    V getValue(<span class="keyword">int</span> hash, Object key) {</div><div class="line">		<span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// 从segment中取key对应的value</span></div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">lock</span>.unlock();</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	V putVal(<span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>) {</div><div class="line">		<span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// 将key-&gt;value放入segment中</span></div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">lock</span>.unlock();</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	V removeNode(<span class="keyword">int</span> hash, Object key) {</div><div class="line">		<span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">		    <span class="comment">// 从segment中移除key-&gt;value</span></div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">lock</span>.unlock();</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">	<span class="keyword">void</span> clear() {</div><div class="line">		<span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// 清除segment中所有数据</span></div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">lock</span>.unlock();</div><div class="line">		}</div><div class="line">	}</div><div class="line">		</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后在外部通过将调用请求映射到不同的segment上以减少锁冲突。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConcurrentHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SEGMENTS = <span class="number">16</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_SEGMENT_SIZE = <span class="number">16</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Segment&lt;K, V&gt; [] segmentTable;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">	</div><div class="line">	<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">public</span> <span class="title">MyConcurrentHashMap</span>() {</div><div class="line">		<span class="keyword">this</span>.segmentTable = (Segment&lt;K, V&gt; []) (<span class="keyword">new</span> Segment [DEFAULT_SEGMENTS]);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">			segmentTable[i] = <span class="keyword">new</span> Segment&lt;&gt;(DEFAULT_INITIAL_SEGMENT_SIZE, loadFactor);</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> V <span class="title">put</span>(K key, V value) {</div><div class="line">		<span class="keyword">int</span> hash = hash(key);</div><div class="line">		Segment&lt;K, V&gt; s = segmentTable[(segmentTable.length - <span class="number">1</span>) & hash];</div><div class="line">		<span class="keyword">return</span> s.putVal(hash, key, value);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> V <span class="title">remove</span>(Object key) {</div><div class="line">		<span class="keyword">int</span> hash = hash(key);</div><div class="line">		Segment&lt;K, V&gt; s = segmentTable[(segmentTable.length - <span class="number">1</span>) & hash];</div><div class="line">		<span class="keyword">return</span> s.removeNode(hash, key);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span>() {</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">			segmentTable[i].clear();</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> V <span class="title">get</span>(Object key) {</div><div class="line">		<span class="keyword">int</span> hash = hash(key);</div><div class="line">		Segment&lt;K, V&gt; s = segmentTable[(segmentTable.length - <span class="number">1</span>) & hash];</div><div class="line">		<span class="keyword">return</span> s.getValue(hash, key);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>() {</div><div class="line">		<span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">				segmentTable[i].lock.lock();</div><div class="line">				size += segmentTable[i].size;</div><div class="line">			}</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> size;</div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">				segmentTable[i].lock.unlock();</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span>() {</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">				segmentTable[i].lock.lock();</div><div class="line">				<span class="keyword">if</span> (segmentTable[i].size != <span class="number">0</span>) {</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		} <span class="keyword">finally</span> {</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentTable.length; i++) {</div><div class="line">				segmentTable[i].lock.unlock();</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span>(Object key) {</div><div class="line">		<span class="keyword">int</span> h;</div><div class="line">		<span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="number">0</span> : ((h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>));</div><div class="line">	}</div><div class="line">	</div><div class="line">	......</div><div class="line">}</div></pre></td></tr></table></figure>

<p>但是在完成此优化后，测试结果却很奇怪</p>
<pre><code>当<span class="built_in">count</span> = <span class="number">1000</span>时
    ConcurrentHashMap耗时：<span class="number">30</span>
    Hashtable耗时：<span class="number">11</span>
    MyHashtable耗时：<span class="number">12</span>
    MyConcurrentHashMap耗时：<span class="number">18</span>

当<span class="built_in">count</span> = <span class="number">10000</span>时
    ConcurrentHashMap耗时：<span class="number">118</span>
    Hashtable耗时：<span class="number">111</span>
    MyHashtable耗时：<span class="number">100</span>
    MyConcurrentHashMap耗时：<span class="number">158</span>

当<span class="built_in">count</span> = <span class="number">100000</span>时
    ConcurrentHashMap耗时：<span class="number">450</span>
    Hashtable耗时：<span class="number">305</span>
    MyHashtable耗时：<span class="number">221</span>
    MyConcurrentHashMap耗时：<span class="number">326</span>

当<span class="built_in">count</span> = <span class="number">1000000</span>时
    ConcurrentHashMap耗时：<span class="number">2964</span>
    Hashtable耗时：<span class="number">3228</span>
    MyHashtable耗时：<span class="number">4766</span>
    MyConcurrentHashMap耗时：<span class="number">3366</span>

当<span class="built_in">count</span> = <span class="number">2000000</span>时
    ConcurrentHashMap耗时：<span class="number">5890</span>
    Hashtable耗时：<span class="number">8986</span>
    MyHashtable耗时：<span class="number">9845</span>
    MyConcurrentHashMap耗时：<span class="number">12658</span>
</code></pre><h3 id="测试结果异常分析">测试结果异常分析</h3>
<p>可以看到我们自己实现的MyConcurrentHashMap性能很差，这在理论上应该不成立。</p>
<p>于是我用JProfiler对该单元测试做了性能分析</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/QQ20160514-0.png" alt=""></p>
<p>很明显的内存泄露！然后我们在回头看看之前的测试用例代码，几个Map容器在测试完成后都没有释放，真是个低级错误。解决该问题很简单，减少那几个容器的作用域。然后我们对计时做了优化，使用CyclicBarrier使线程池里的线程同时开启和结束，然后来计算开启和结束的时间差。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">public class MyHashMapMultiThreadTest {</div><div class="line">	</div><div class="line">	private ThreadPoolExecutor threadPool;</div><div class="line">	private CyclicBarrier startBarrier;</div><div class="line">	private CyclicBarrier endBarrier;</div><div class="line">	</div><div class="line">	private int count = 1000; </div><div class="line">	private int nThread = Runtime.getRuntime().availableProcessors() + 1;</div><div class="line">	</div><div class="line">	@Before</div><div class="line">	public void setUp() {</div><div class="line">		threadPool = new ThreadPoolExecutor(nThread, nThread, 60, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">		startBarrier = new CyclicBarrier(nThread + 1);</div><div class="line">		endBarrier = new CyclicBarrier(nThread + 1);</div><div class="line">	}</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void testMyHashTable() throws InterruptedException, BrokenBarrierException {</div><div class="line">		final MyMap&lt;String, Integer&gt; myTable = new MyHashtable&lt;&gt;();</div><div class="line">		for (int i = 0; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(new Runnable() {</div><div class="line">				</div><div class="line">				@Override</div><div class="line">				public void run() {</div><div class="line">					try {</div><div class="line">						startBarrier.await();</div><div class="line">						for (int j = 0; j &lt; count; j++) {</div><div class="line">							myTable.put(String.valueOf(j), j);</div><div class="line">							myTable.get(String.valueOf(j));</div><div class="line">						}</div><div class="line">						endBarrier.await();</div><div class="line">					} catch (InterruptedException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					} catch (BrokenBarrierException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		</div><div class="line">		startBarrier.await();</div><div class="line">		long start = System.currentTimeMillis();</div><div class="line">		endBarrier.await();</div><div class="line">		long time = System.currentTimeMillis() - start;</div><div class="line">		System.out.println(<span class="string">"MyHashtable耗时："</span> + time);</div><div class="line">	}</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void testMyConcurrentHashMap() throws InterruptedException, BrokenBarrierException {</div><div class="line">		final MyMap&lt;String, Integer&gt; myConMap = new MyConcurrentHashMap&lt;&gt;();</div><div class="line">		for (int i = 0; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(new Runnable() {</div><div class="line">				</div><div class="line">				@Override</div><div class="line">				public void run() {</div><div class="line">					try {</div><div class="line">						startBarrier.await();</div><div class="line">						for (int j = 0; j &lt; count; j++) {</div><div class="line">							myConMap.put(String.valueOf(j), j);</div><div class="line">							myConMap.get(String.valueOf(j));</div><div class="line">						}</div><div class="line">						startBarrier.await();</div><div class="line">					} catch (InterruptedException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					} catch (BrokenBarrierException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		</div><div class="line">		startBarrier.await();</div><div class="line">		long start = System.currentTimeMillis();</div><div class="line">		endBarrier.await();</div><div class="line">		long time = System.currentTimeMillis() - start;</div><div class="line">		System.out.println(<span class="string">"MyConcurrentHashMap耗时："</span> + time);</div><div class="line">	}</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void testHashtable() throws InterruptedException, BrokenBarrierException {</div><div class="line">		final Map&lt;String, Integer&gt; table = new Hashtable&lt;&gt;();</div><div class="line">		for (int i = 0; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(new Runnable() {</div><div class="line">				</div><div class="line">				@Override</div><div class="line">				public void run() {</div><div class="line">					try {</div><div class="line">						startBarrier.await();</div><div class="line">						for (int j = 0; j &lt; count; j++) {</div><div class="line">							table.put(String.valueOf(j), j);</div><div class="line">							table.get(String.valueOf(j));</div><div class="line">						}</div><div class="line">						endBarrier.await();</div><div class="line">					} catch (InterruptedException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					} catch (BrokenBarrierException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		</div><div class="line">		startBarrier.await();</div><div class="line">		long start = System.currentTimeMillis();</div><div class="line">		endBarrier.await();</div><div class="line">		long time = System.currentTimeMillis() - start;</div><div class="line">		System.out.println(<span class="string">"Hashtable耗时："</span> + time);</div><div class="line">	}</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void testConcurrentHashMap() throws InterruptedException, BrokenBarrierException {</div><div class="line">		final Map&lt;String, Integer&gt; conMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line">		for (int i = 0; i &lt; nThread; i++) {</div><div class="line">			threadPool.execute(new Runnable() {</div><div class="line">				</div><div class="line">				@Override</div><div class="line">				public void run() {</div><div class="line">					try {</div><div class="line">						startBarrier.await();</div><div class="line">						for (int j = 0; j &lt; count; j++) {</div><div class="line">							conMap.put(String.valueOf(j), j);</div><div class="line">							conMap.get(String.valueOf(j));</div><div class="line">						}</div><div class="line">						endBarrier.await();</div><div class="line">					} catch (InterruptedException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					} catch (BrokenBarrierException e) {</div><div class="line">						e.printStackTrace();</div><div class="line">					}</div><div class="line">				}</div><div class="line">			});</div><div class="line">		}</div><div class="line">		</div><div class="line">		threadPool.shutdown();</div><div class="line">		</div><div class="line">		startBarrier.await();</div><div class="line">		long start = System.currentTimeMillis();</div><div class="line">		endBarrier.await();</div><div class="line">		long time = System.currentTimeMillis() - start;</div><div class="line">		System.out.println(<span class="string">"ConcurrentHashMap耗时："</span> + time);</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>该测试用例测试出的结果如下：</p>
<pre><code>当<span class="built_in">count</span> = <span class="number">1000</span>时
    ConcurrentHashMap耗时：<span class="number">27</span>
    Hashtable耗时：<span class="number">11</span>
    MyHashtable耗时：<span class="number">10</span>
    MyConcurrentHashMap耗时：<span class="number">11</span>

当<span class="built_in">count</span> = <span class="number">10000</span>时
    ConcurrentHashMap耗时：<span class="number">101</span>
    Hashtable耗时：<span class="number">99</span>
    MyHashtable耗时：<span class="number">107</span>
    MyConcurrentHashMap耗时：<span class="number">95</span>

当<span class="built_in">count</span> = <span class="number">100000</span>时
    ConcurrentHashMap耗时：<span class="number">349</span>
    Hashtable耗时：<span class="number">278</span>
    MyHashtable耗时：<span class="number">307</span>
    MyConcurrentHashMap耗时：<span class="number">218</span>

当<span class="built_in">count</span> = <span class="number">1000000</span>时
    ConcurrentHashMap耗时：<span class="number">2048</span>
    Hashtable耗时：<span class="number">3474</span>
    MyHashtable耗时：<span class="number">2706</span>
    MyConcurrentHashMap耗时：<span class="number">1836</span>

当<span class="built_in">count</span> = <span class="number">2000000</span>时
    ConcurrentHashMap耗时：<span class="number">14822</span>
    Hashtable耗时：<span class="number">20524</span>
    MyHashtable耗时：<span class="number">20953</span>
    MyConcurrentHashMap耗时：<span class="number">15960</span>

当<span class="built_in">count</span> = <span class="number">10000000</span>时
    ConcurrentHashMap耗时：<span class="number">32578</span>
    Hashtable耗时：<span class="number">43989</span>
    MyHashtable耗时：<span class="number">50393</span>
    MyConcurrentHashMap耗时：<span class="number">35399</span>
</code></pre><p>测试结果表明，我们的MyConcurrentHashMap性能有很大的优势。但是要确定我们的横向优化起了作用，还需要用JProfiler再观察一下运行时阻塞的线程</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/QQ20160514-2.png" alt=""></p>
<p>该图是执行过程中线程执行情况，两边分别是ConcurrentHashMap和MyConcurrentHashMap，中间是Hashtable和MyHashtable，可以看到，系统的ConcurrentHashMap和我们的MyConcurrentHashMap确实锁竞争明显比Hashtable和MyHashtable少。</p>
<h2 id="java-util-ConcurrentHashMap源码分析">java.util.ConcurrentHashMap源码分析</h2>
<p>我们实现了自己的HashMap和ConcurrentHashMap，虽然还很粗糙，但是基本说明了他们的原理。然而，Java本身的ConcurrentHashMap还有更多的细节，我们现在来看JDK的源码，逐步分析这些源码。本文源码基于JDK 1.7的ConcurrentHashMap源码。</p>
<h3 id="concurrentLevel">concurrentLevel</h3>
<p>ConcurrentHashMap可以通过初始化时的concurrentLevel参数控制segment的数量，默认值为16。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span>(<span class="keyword">int</span> initialCapacity,</div><div class="line">                             <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel) {</div><div class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class="line">        concurrencyLevel = MAX_SEGMENTS;</div><div class="line">    <span class="comment">// Find power-of-two sizes best matching arguments</span></div><div class="line">    <span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (ssize &lt; concurrencyLevel) {</div><div class="line">        ++sshift;</div><div class="line">        ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</div><div class="line">    <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">int</span> c = initialCapacity / ssize;</div><div class="line">    <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</div><div class="line">        ++c;</div><div class="line">    <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class="line">    <span class="keyword">while</span> (cap &lt; c)</div><div class="line">        cap &lt;&lt;= <span class="number">1</span>;</div><div class="line">    <span class="comment">// create segments and segments[0]</span></div><div class="line">    Segment&lt;K,V&gt; s0 =</div><div class="line">        <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</div><div class="line">                        (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</div><div class="line">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</div><div class="line">    UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></div><div class="line">    <span class="keyword">this</span>.segments = ss;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>由于ConcurrentHashMap是每个segment单独加锁，所以concurrentLevel越大，segment数量越多，支持同时操作的线程数就越多，并发程度就越高。但是，如果concurrentLevel设置过大，会导致内存资源的浪费；然而，设置的过小，也会导致线程间竞争更激烈，导致并发性能差。</p>
<h3 id="putOrderedObject">putOrderedObject</h3>
<p>ConcurrentHashMap中segment的table字段和每个Entry中的next字段用的是putOrderedObject设置。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Sets next field with volatile write semantics.  (See above</div><div class="line"> * about use of putOrderedObject.)</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> <span class="keyword">void</span> setNext(HashEntry&lt;K,V&gt; n) {</div><div class="line">    UNSAFE.putOrderedObject(<span class="keyword">this</span>, nextOffset, n);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Sets the ith element of given table, with volatile write</div><div class="line"> * semantics. (See above about use of putOrderedObject.)</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="keyword">void</span> setEntryAt(HashEntry&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</div><div class="line">                                   HashEntry&lt;K,V&gt; e) {</div><div class="line">    UNSAFE.putOrderedObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; TSHIFT) + TBASE, e);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>putOrderedObject是sun.misc.Unsafe提供的一系列lazySet方法之一，该方法只能用在volatile字段。lazySet比直接复制更接近底层，效率更高，而且可以保证在锁释放的时候其他线程可见。</p>
<h3 id="更充分的hash">更充分的hash</h3>
<p>ConcurrentHashMap改进了hash方法，使用了Wang/Jenkins的变种算法对hashCode进行再次hash，保证key可以尽量均匀的映射到每个segment。因为在某些极端情况下，hashCode方法实现的不好，会导致某些segment负载过重，进而并发性能下降。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Applies a supplemental hash function to a given hashCode, which</div><div class="line"> * defends against poor quality hash functions.  This is critical</div><div class="line"> * because ConcurrentHashMap uses power-of-two length hash tables,</div><div class="line"> * that otherwise encounter collisions for hashCodes that do not</div><div class="line"> * differ in lower or upper bits.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span>(Object k) {</div><div class="line">    <span class="keyword">int</span> h = hashSeed;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((<span class="number">0</span> != h) && (k <span class="keyword">instanceof</span> String)) {</div><div class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">    }</div><div class="line"></div><div class="line">    h ^= k.hashCode();</div><div class="line"></div><div class="line">    <span class="comment">// Spread bits to regularize both segment and index locations,</span></div><div class="line">    <span class="comment">// using variant of single-word Wang/Jenkins hash.</span></div><div class="line">    h += (h &lt;&lt;  <span class="number">15</span>) ^ <span class="number">0xffffcd7d</span>;</div><div class="line">    h ^= (h &gt;&gt;&gt; <span class="number">10</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">3</span>);</div><div class="line">    h ^= (h &gt;&gt;&gt;  <span class="number">6</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">2</span>) + (h &lt;&lt; <span class="number">14</span>);</div><div class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Segment的put方法">Segment的put方法</h3>
<p>put方法首先尝试请求锁，如果请求不到就自旋等待一段时间后，如果等待到锁就继续执行，如果没有等到就调用lock方法阻塞线程等待锁。然后查找key对应的Entry，如果找到就执行更新操作，如果没有找到就新增，当segment中的Entry数量超过阈值就将该segment的空间空大一倍并进行rehash。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> V put(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent) {</div><div class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</div><div class="line">        scanAndLockForPut(key, hash, value);</div><div class="line">    V oldValue;</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">index</span> = (tab.length - <span class="number">1</span>) & hash;</div><div class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, <span class="keyword">index</span>);</div><div class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) {</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) {</div><div class="line">                K k;</div><div class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</div><div class="line">                    (e.hash == hash && key.equals(k))) {</div><div class="line">                    oldValue = e.value;</div><div class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) {</div><div class="line">                        e.value = value;</div><div class="line">                        ++modCount;</div><div class="line">                    }</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }</div><div class="line">                e = e.next;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span> {</div><div class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">                    node.setNext(first);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class="line">                <span class="keyword">int</span> c = <span class="keyword">count</span> + <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (c &gt; threshold && tab.length &lt; MAXIMUM_CAPACITY)</div><div class="line">                    rehash(node);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    setEntryAt(tab, <span class="keyword">index</span>, node);</div><div class="line">                ++modCount;</div><div class="line">                <span class="keyword">count</span> = c;</div><div class="line">                oldValue = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    } <span class="keyword">finally</span> {</div><div class="line">        unlock();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>put方法可能会对原有结构有更新操作的字段是HashEntry中的value字段、Segment的table的某个元素和Segment的table，三个字段。而这三个字段都是volatile字段，同时这些更新不会破坏数据结构，那么只要unlock后，其他线程马上就可以看到最新结果。就算在更新时有其他线程在使用get操作，要么会获取到最新结果，要么会获取到旧结果，并不会出现无法预料的结果。</p>
<h3 id="自旋等等锁">自旋等等锁</h3>
<p>ConcurrentHashMap在put之前会调用scanAndLockForPut来自旋等待锁。首先反复的调用tryLock来请求锁，同时遍历key对应的HashEntry链表寻找相应的HashEntry，如果没找到就创建一个新的HashEntry。而且每遍历一个节点检查该HashEntry链表是否有变化，如果有变化就重新开始遍历。然后通过retries来控制不让自旋一直进行下去。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Scans for a node containing given key while trying to</div><div class="line"> * acquire lock, creating and returning one if not found. Upon</div><div class="line"> * return, guarantees that lock is held. UNlike in most</div><div class="line"> * methods, calls to method equals are not screened: Since</div><div class="line"> * traversal speed doesn't matter, we might as well help warm</div><div class="line"> * up the associated code and accesses as well.</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @return</span> a new node if key not found, else null</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span>(K key, <span class="keyword">int</span> hash, V value) {</div><div class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</div><div class="line">    HashEntry&lt;K,V&gt; e = first;</div><div class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></div><div class="line">    <span class="keyword">while</span> (!tryLock()) {</div><div class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></div><div class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) {</div><div class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) {</div><div class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></div><div class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                retries = <span class="number">0</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</div><div class="line">                retries = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                e = e.next;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) {</div><div class="line">            lock();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries & <span class="number">1</span>) == <span class="number">0</span> &&</div><div class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) {</div><div class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></div><div class="line">            retries = -<span class="number">1</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用自旋等待是为了降低线程切换锁消耗的资源，因为一个线程可能只需要很短时间就可以获取到锁，但是lock方法会阻塞线程，导致额外的线程切换浪费性能。scanAndLockForPut在自旋等待过程中同时尝试为put操作做一些准备，让后续的put操作有可能少做一些操作。而scanAndLock就只是单纯的自旋等待。</p>
<h3 id="get方法">get方法</h3>
<p>由于put方法保证了更新不会破坏数据结构，而且保证了可见性，所以get方法并没有加锁。而segment数组用的volatile方式读取，而且写操作用的是CAS，保证了segment的延迟初始化线程安全。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Returns the value to which the specified key <span class="keyword">is</span> mapped,</div><div class="line"> * <span class="keyword">or</span> {<span class="property">@code</span> <span class="literal">null</span>} <span class="keyword">if</span> <span class="keyword">this</span> map contains <span class="literal">no</span> mapping <span class="keyword">for</span> the key.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;More formally, <span class="keyword">if</span> <span class="keyword">this</span> map contains a mapping from a key</div><div class="line"> * {<span class="property">@code</span> k} to a value {<span class="property">@code</span> v} such that {<span class="property">@code</span> key.equals(k)},</div><div class="line"> * <span class="keyword">then</span> <span class="keyword">this</span> method returns {<span class="property">@code</span> v}; otherwise it returns</div><div class="line"> * {<span class="property">@code</span> <span class="literal">null</span>}.  (There can be at most one such mapping.)</div><div class="line"> *</div><div class="line"> * <span class="property">@throws</span> NullPointerException <span class="keyword">if</span> the specified key <span class="keyword">is</span> <span class="literal">null</span></div><div class="line"> */</div><div class="line">public V get(Object key) {</div><div class="line">    Segment&lt;K,V&gt; s; <span class="regexp">//</span> manually integrate access methods to reduce overhead</div><div class="line">    HashEntry&lt;K,V&gt;[] tab;</div><div class="line">    int h = hash(key);</div><div class="line">    long u = (((h &gt;&gt;&gt; segmentShift) & segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="literal">null</span> &&</div><div class="line">        (tab = s.table) != <span class="literal">null</span>) {</div><div class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class="line">                 (tab, ((long)(((tab.length - <span class="number">1</span>) & h)) &lt;&lt; TSHIFT) + TBASE);</div><div class="line">             e != <span class="literal">null</span>; e = e.next) {</div><div class="line">            K k;</div><div class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h && key.equals(k)))</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="size方法">size方法</h3>
<p>首先，ConcurrentHashMap在每次对一个Segment做更新操作时会使用modeCount字段来记录操作次数。size方法会不断统计所有Segment的size和modeCount，如果两次modeCount没有发生变化，说明这段时间ConcurrentHashMap没有更新操作，那么就直接返回size汇总。但是如果竞争激烈，会导致ConcurrentHashMap的size一直变化，所以在size方法里面，当统计size失败一定次数后，就依次把每个segment加锁，再进行汇总。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Returns the number of key-value mappings in this map.  If the</div><div class="line"> * map contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns</div><div class="line"> * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @return</span> the number of key-value mappings in this map</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span>() {</div><div class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></div><div class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></div><div class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></div><div class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCounts</span></div><div class="line">    <span class="keyword">long</span> last = <span class="number">0</span>L;   <span class="comment">// previous sum</span></div><div class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn't retry</span></div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        <span class="keyword">for</span> (;;) {</div><div class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) {</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></div><div class="line">            }</div><div class="line">            sum = <span class="number">0</span>L;</div><div class="line">            size = <span class="number">0</span>;</div><div class="line">            overflow = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) {</div><div class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) {</div><div class="line">                    sum += seg.modCount;</div><div class="line">                    <span class="keyword">int</span> c = seg.count;</div><div class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</div><div class="line">                        overflow = <span class="keyword">true</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span> (sum == last)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            last = sum;</div><div class="line">        }</div><div class="line">    } <span class="keyword">finally</span> {</div><div class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) {</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">                segmentAt(segments, j).unlock();</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样设计的原因在于，大部分情况下直接统计size就是正确结果，而给每个segment加锁是一个效率很低的操作。而且，通过retries防止size方法始终无法返回。</p>
<h2 id="总结">总结</h2>
<p>java.util.ConcurrentHashMap为了性能做了很多优化，但是关键还是以下几点：</p>
<ol>
<li>锁分段</li>
<li>减少锁持有的时间</li>
<li>减少线程切换</li>
</ol>
<p>ConcurrentHashMap只是JDK的一个类，但是这些思想却是通用的。不仅在并发编程过程中，而且在整个系统架构中，也会有类似的思路，比如我们经常会根据数据的hash值将计算分布到多个计算节点上，以求负载均衡；还有优化代码来减少计算时间，使整体性能更高。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ConcurrentHashMap是Java并发程序中一个很常用的类，本文旨在研究散列结构的原理和ConcurrentHashMap的性能优化技术。</p>
<p>首先我们先自己实现一个简单的MyHashMap，然后实现线程安全的MyConcurrentHashMap，最后]]>
    </summary>
    
      <category term="Java" scheme="http://elvin.im/tags/Java/"/>
    
      <category term="Java" scheme="http://elvin.im/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译】Java垃圾回收]]></title>
    <link href="http://elvin.im/2016/02/04/%E3%80%90%E8%AF%91%E3%80%91Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://elvin.im/2016/02/04/【译】Java垃圾回收/</id>
    <published>2016-02-04T06:32:28.000Z</published>
    <updated>2016-04-04T06:35:49.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://java-latte.blogspot.in/2013/08/garbage-collection-in-java.html" target="_blank" rel="external">Garbage Collection in Java</a></p>
<p>Java内存管理-自带的垃圾回收机制，是Java语言最好的实现之一。因为垃圾回收器会自动回收内存以供再次使用，所以程序员不需要关注对象内存的分配与释放。这一点可以帮助程序员更快的开发代码而不需要额外的处理内存泄露和其他内存相关的问题。这就是本文要探讨的问题。</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/Garbage_Collection.jpg" alt=""></p>
<h2 id="垃圾回收">垃圾回收</h2>
<p>当一个Java对象对程序不可达时，该对象就会被回收。<br>垃圾回收器主要用途是标记和释放程序不再需要的对象以供资源释放后被重用。<br>垃圾回收的优点有以下几点：</p>
<ul>
<li>提高编码效率，因为无需关注内存问题</li>
<li>程序完整性</li>
<li>垃圾回收也是Java语言一项重要的安全策略。Java程序员无法通过错误释放内存而造成虚拟机崩溃</li>
</ul>
<h2 id="自动垃圾回收">自动垃圾回收</h2>
<p>自动垃圾回收是扫描堆内存，标记出哪些对象正在被使用、哪些已经不再使用，并释放无用对象的过程。<br>一个正在使用中的对象，或者被引用的对象，意味着你的程序中某一部分仍然维护着一个指向该对象的指针。一个无用的对象，或者不再被引用的对象，意味着程序中任一部分都没有再引用该对象。所以失去引用的对象所占用的内存就可以被回收了。</p>
<p>像C这样的语言中，分配和释放内存都需要程序员手工完成。而在Java中，内存回收由垃圾回收器自动处理。</p>
<p>垃圾回收的基本过程如下：</p>
<ul>
<li>标记过程</li>
<li>正常删除对象</li>
<li>删除对象并整理内存</li>
</ul>
<p><strong>标记过程</strong>：标记过程是识别哪片内存是有用或无用的<br>该过程会扫描内存中所有的对象。扫描一个系统中所有的对象将会非常耗时。</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/marking.PNG" alt=""></p>
<p><strong>正常删除对象</strong>：在此过程中，会删除所有无用对象来释放内存空间。</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/normal.PNG" alt=""></p>
<p><strong>删除对象并整理内存</strong>：为了后续运行的性能，除了删除无用对象以外，还会整理内存中剩余的对象。通过该操作，后续的内存分配会容易和快得多。</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/dele_compact.PNG" alt=""></p>
<p>也许你已经了解过青年代、老年代和永久代这样的垃圾回收概念。我们将在下一章详细讨论。</p>
<p>第一个需要关注的问题就是</p>
<h2 id="为什么需要分代垃圾回收？">为什么需要分代垃圾回收？</h2>
<p>你已经看到正常情况下垃圾回收需要标记整理JVM中所有对象，这是非常低效的。由于越来越多的对象创建出来，对象越来越多导致垃圾回收的耗时会越来越长，因为大多数对象的存活时间都很短。</p>
<p><strong>JVM分代</strong></p>
<ul>
<li>青年代</li>
<li>老年代</li>
<li>永久代，在Java 8中已经被Metaspace替代</li>
</ul>
<p>堆内存被分割成几个小区域：青年带、老年代和永久代。</p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/heap_generation.PNG" alt=""></p>
<p>Java使用分代垃圾回收。当有一个对象foo（某个类的实例），存活的垃圾回收周期越多（如果仍然存在引用），它就会被升代。一个对象在青年代创建（青年代又被分为Eden区和Survivor区），当对象在青年代存活足够长时间以后，最终会被移到老年代。</p>
<ul>
<li>青年代，所有新对象被创建和存活的区域</li>
<li>Eden区（堆空间），多数对象初始化创建的内存区域</li>
<li>Survivor区（堆空间），存储经过Eden区回收以后存活下来的对象</li>
<li>老年代（堆空间），存储在Survivor区存活一段时间的对象</li>
<li>永久代（非堆空间），存储所有虚拟机自身的反射数据，比如类和方法的定义。为了Java虚拟机之间的数据共享，该区域被分为只读区域和可读写区域。</li>
</ul>
<p><strong>注意</strong>：永久代<em>不是堆的一部分</em>，它是存放类定义和相关数据的一块独立区域，比如intern字符串。</p>
<p>当青年代满了以后，将会触发<strong>Minor GC</strong>。如果对象死亡率很高，那么Minor GC可以被优化。一个充满死亡对象的青年代被回收的非常快。一些对象在青年代一直存活，最终会被移动到老年代。</p>
<p><strong>停止世界事件</strong> - 所有的Minor GC都是“停止世界事件”。这意味着在内存回收完成之前所有的应用线程都会暂停。老年代用来存储长生命周期的对象。通常，我们会设置一个阈值，当青年代对象存活时间超过这个阈值，就会被移动到老年代。最终老年代也需要回收，这就是Major GC。</p>
<p>Major GC也是“停止世界事件”。通常Major GC要慢很多，因为会扫描所有的对象。对于响应时间要求高的应用程序，Major GC次数应该被最小化。同时需要注意的是，老年代的回收时间长短也与老年代所使用的垃圾回收器有关。</p>
<p><strong>永久代</strong>用来存储应用程序中类和方法定义的元数据信息。此外，Java SE的library的类和方法也会被存储在这里。</p>
<p>当JVM不在需要某些类时，它们会被回收，释放出来的空间会被其他类使用。永久代的回收会在Full GC中进行。</p>
<h2 id="分代垃圾回收过程">分代垃圾回收过程</h2>
<p>现在，假设你对为什么要分代回收已经有了一定的了解。我们将在图片的帮助下看看JVM中这些空间的内存分配和对象衰老过程。</p>
<p><strong>1. 首先，任何新对象都被分配在Eden区，两个Survivor区开始都是空的。</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/1_object_allocation.PNG" alt=""></p>
<p><strong>2. 当所有的Eden空间被占满后，Minor GC就会被触发</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/1_eden_space.PNG" alt=""></p>
<p><strong>3. Minor GC后，还有引用的对象会被移动到第一个Survivor区。无用对象会在Eden区被清除时回收</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/3_cpy_referen_onject.PNG" alt=""></p>
<p><strong>4. 在下一次Minor GC时，Eden区会进行同样的操作。无用对象会被删除，有用对象会被移动带Survivor区。不过，在此时有用对象会被移动到另一个Survivor区（S1）。此外，上一次Minor GC存活下来的Survivor区（S0）中的对象年龄会增加并且移动到S1。一旦所有存活对象被移动到S1，S0和Eden区都会被清空。注意，现在S1中有了两批不同年龄的对象</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/4_aging_object.PNG" alt=""></p>
<p><strong>5. 在下一次Minor GC中，同样的过程会重复。只是这次Survivor区会交换。有引用的对象会移动到S0，存活的对象年龄增长，Eden区和S1被清空</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/5_add-aging.PNG" alt=""></p>
<p><strong>6. 在一次Minor GC后，当衰老的对象达到一个年龄阈值（此例中为8），它们会升代到老年代</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/6-promot.PNG" alt=""></p>
<p><strong>7. 然后Minor GC会持续发生，对象会不断被升代到老年代空间</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/7.PNG" alt=""></p>
<p><strong>8. 这几乎涵盖了青年代的整个过程。最终，Major GC将会在老年代执行来清楚和整理内存空间</strong></p>
<p><img src="http://7q5c1f.com1.z0.glb.clouddn.com/8_.PNG" alt=""></p>
<h2 id="垃圾回收真正如何工作">垃圾回收真正如何工作</h2>
<p>许多人认为垃圾回收是收集和移除死亡的对象。而实际上，Java垃圾回收是做的相反的事情。存活的对象被跟踪而其他所有对象都是垃圾。正如你看到的，这个基本原理的误解会导致很多性能问题。</p>
<p>让我们从动态内存空间所在的堆内存开始。在大多数操作系统的配置中，JVM会在程序运行时提前分配堆内存。这有以下两个好处：</p>
<ul>
<li>由于操作系统不需要在为每个对象单独分配内存，所以<strong>对象创建速度更快</strong>。一次内存分配简化成了一个内存数组的指针移动</li>
<li>当一个对象不再使用，垃圾回收器会回收该对象的内存并将该块内存用于未来的对象内存分配。这样就<strong>不需要显式删除且内存不需要回收给操作系统</strong></li>
</ul>
<p>所有的对象都在JVM管理的堆内存中分配。程序员用到的每个元素都会这样处理，包括类实例，静态变量，甚至代码本身。只要一个对象还被引用着，JVM就认为它还存活。一旦失去引用导致在应用代码中不可达时，垃圾回收器会清除并回收无用的内存。这听上去很简单，但是有一个问题：一个应用程序的第一个引用是什么？</p>
<h2 id="GC_Roots">GC Roots</h2>
<p>每个对象必须有一个或多个根对象。只要应用程序可以访问到这些根对象，那么这个树上所有的对象都是可以访问的。但是什么时候这些根对象被认为可访问呢？一些被称为GC Roots的特定对象总是可以访问的，任何根对象中有GC Roots的对象也同样是可以访问的。</p>
<p><strong>Java中有4种GC Roots</strong>：</p>
<ol>
<li><strong>局部变量</strong>，存活在线程的栈中。这不是一个实际对象的虚拟引用，因此并不可见。</li>
<li><strong>活动的Java线程</strong>总是被认为是存活对象，因此是GC Root。这对线程的局部变量尤其重要。</li>
<li><strong>静态变量</strong>被他们的类引用。这一点使他们事实上也是GC Root。类本身是可以被回收的，此时会清除所有的静态成员。</li>
<li><strong>JNI引用</strong>是Java对象被native代码引用，这是JNI调用的一部分。因为JVM并不知道某个对象是否被native代码引用，所以这些对象会被特殊对待。这样的对象代表了一个特殊形式的GC Root。</li>
</ol>
<p>因此，一个简单的Java应用有如下GC Roots：</p>
<ul>
<li>主线程中的局部变量</li>
<li>主线程本身</li>
<li>Main类的静态成员</li>
</ul>
<h2 id="垃圾释放机制">垃圾释放机制</h2>
<p><strong>用户控制的内存释放</strong><br>内存释放可以被手动和自动控制。在C/C++中，程序员需要主动调用free()、delete()方法来释放内存。然后对象会被添加到空闲空间以供重新分配。</p>
<p><strong>自动垃圾回收</strong><br>另一个堆内存回收机制就是垃圾回收。目前有很多垃圾回收技术。</p>
<h2 id="引用计数">引用计数</h2>
<p>这是最古老和最简单的垃圾回收技术之一。<br>每个堆中的对象都有一个引用计数字段，它记录着堆对象的引用次数。当一个对象的引用计数变为0，它就会被回收。</p>
<h2 id="标记-清除回收">标记-清除回收</h2>
<p>包括标记&amp;清除法在内的很多回收器，在空间几乎满之前不做任何事情。<br>回收器运行一个标记过程标记所有存活的堆对象。<br>在标记过程以后，任何没有被标记的对象都是要被释放的垃圾。然后清空堆空间，回收所有未被标记的对象。在标记过程中也会清除所有仍在使用中的堆对象。</p>
<p>这基本可分为两个过程：</p>
<ol>
<li>算法从GC Roots开始扫描所有对象的引用，并标记所有存活的对象</li>
<li>对内存中所有没有被标记的对象会被回收。它们只是简单的被标记为释放</li>
</ol>
<h2 id="整理">整理</h2>
<p>当清除过程以后，存活的对象会分布在整个堆空间。如果活动对象跨越许多内存页，分页的开销可能会增加。Cache命中率可能也会下降。<br>我们可以在标记-清除后添加一个整理阶段。在存活的对象被标记出来以后，他们会一起被移动到堆的一端。该过程还包括了将全局指针、局部指针和内部堆指针指向对象新地址。</p>
<h2 id="复制回收器">复制回收器</h2>
<p>复制回收器被用来整合复制与存货堆对象的识别。复制收集器非常流行而且被使用的非常广泛。<br>假设一个简单的复制回收器，我们开始将堆分为两半 - from区和to区。</p>
<p>一开始，我们从from区用一个简单的“堆的一端”的指针来分配堆内存。当from区满了以后，我们停下来做垃圾回收。实际上，我们不真的做垃圾回收，我们将标记阶段存活的对象移动到to区，然后将指针更新到对象的新地址。</p>
<h2 id="分代回收技术">分代回收技术</h2>
<p>复制回收器的伟大之处在于很多在两次垃圾回收之间的创建和死亡的对象并不会消耗资源。然而<strong>并不是所有的堆对象都如此短命</strong>。实际上，一些堆对象非常长寿。<br>分代垃圾回收技术是为了更好的处理不同生存时间的对象。堆被分为两代或更多代，每一代都有自己的from区和to区。回收最频繁的新对象被分配在最年轻的一代。如果对象存活过一次或多次垃圾回收，它就会被升代到更老的一代，这样它就会尽量少的被垃圾回收处理。这样持续直到那些非常长寿的对象会到达最老的一代，这里的对象很少会被回收。</p>
<p>该方法的优点在于那些长寿的对象会被“筛选”出来，极大的降低了重复处理它们的开销。当然，一些长寿的对象在本代最终被回收时也会死亡。</p>
<h2 id="关于垃圾回收的一些问题">关于垃圾回收的一些问题</h2>
<ol>
<li><p>垃圾回收涉及到了哪些内存？<br>堆内存</p>
</li>
<li><p>垃圾回收有哪些职责？<br>垃圾回收负责释放那些不可访问对象的内存空间。它确保内存可以被高效使用，但是不保证有足够的内存运行程序。</p>
</li>
<li><p>一个对象什么时候会被回收呢？<br>当没有活动线程可以访问到一个对象时，它会变成可回收的</p>
</li>
<li><p>垃圾回收可以强制执行吗？<br>垃圾回收不能被强制执行。尽管有几个请求GC的方法，但是JVM并不保证会马上执行GC。</p>
</li>
<li><p>如何请求GC？</p>
<ol>
<li>Java中运行GC的方法在Runtime中。Runtime是Java主程序的一个单例。getRuntime()方法返回一个Runtime单例，Runtime实例的gc()方法用来请求GC操作。</li>
<li>调用System类的System.gc()方法来请求JVM的GC操作。</li>
</ol>
</li>
<li><p>GC可以保证程序不会出现Out Of Memory吗？<br>GC不能保证程序不会OOM。</p>
</li>
<li><p>Java中finalize方法的用途是什么？<br>在对象被回收之前做一些清理操作，比如关闭数据库连接，释放资源等。</p>
</li>
<li><p>如果一个对象已经被回收了，那它还能重新被访问吗？<br>不能</p>
</li>
<li><p>String如何被回收？<br>在正常情况下，字符串常量和类都被分配在JVM的永久代中，通常不会被回收。</p>
</li>
</ol>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"java-latte"</span>);</div></pre></td></tr></table></figure>


<p>   s引用的字符串对象被分配在堆内存中，而字符串常量”java-latte”被分配在字符串池。字符串池中的对象不会被回收。在程序的整个生命周期，字符串池中的对象会被重用，来提高性能。<br>   如果你像这样调用intern()方法：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"java-latte"</span>).Intern();</div></pre></td></tr></table></figure>


<p>   intern方法会返回字符串常量”java-latte”。但是与字符串常量不同的intern字符串在他们不可访问时是会被回收的。</p>
<ol>
<li><p>静态字段是否会被回收？<br>一旦类被加载，静态字段就不会被回收。静态字段在该类相应的class loader被回收时会被回收。<br>基本上，静态变量被class对象引用，而class对象又被class loader引用。所以除非class loader移除了该类或者class loader被回收，其他情况静态变量是不会被回收的。</p>
</li>
<li><p>一个对象的finalize()方法会被垃圾回收器调用多少次？<br>一次。</p>
</li>
<li><p>如果在finalize()方法执行过程中抛出一个uncaught exception会发生什么？<br>该异常会被忽略而且垃圾回收的finalization过程会中断。</p>
</li>
<li><p>如何启用/禁用在程序退出时执行finalize()方法？<br>Runtime.getRuntime().runFinalizersOnExit(boolean value)，通过boolean参数来控制。</p>
</li>
<li><p>垃圾回收器是一个守护线程吗？<br>是一个守护线程。这个线程被JVM启动，在所有非守护线程退出以后退出。</p>
</li>
<li><p>谁在控制垃圾回收器？<br>JVM控制GC；JVM决定何时运行GC。当JVM发现内存不足时就会运行GC，但是JVM的GC操作不能保证实时执行。程序员可以请求GC但是JVM并不保证真正执行GC操作。</p>
</li>
<li><p>垃圾回收器如何处理类的实例成员和静态成员？<br>当实例成员没有存活的线程能够访问时就会被回收。静态成员被Class对象引用，Class对象被class loader引用，所以除非class loader卸载该类或者class loader被卸载，不然静态成员不会被卸载（想想卸载应用程序的行为）。</p>
</li>
<li><p>“单例”对象如何回收？<br>你必须有一个方法将静态变量设为null。下次再获取该单例时，实例会被重新创建…当然这也就不是一个单例了。</p>
</li>
<li><p>静态成员保存在JVM内存的哪个区域？<br>静态成员被保存在永久代。</p>
</li>
</ol>
<h2 id="使对象可回收的方法">使对象可回收的方法</h2>
<ol>
<li>对象一旦不需要再使用就将引用设为null。</li>
<li>将引用指向其他对象：</li>
</ol>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="typename">String</span> str1 = <span class="string">"Java.latte.blogspot.in"</span>;</div><div class="line"><span class="typename">String</span> str2 = <span class="string">"google.com"</span>;</div><div class="line">//<span class="typename">String</span> object referred by str1 <span class="keyword">is</span> <span class="keyword">not</span> eligible <span class="keyword">for</span> GC yet</div><div class="line">str1 = str2;</div><div class="line">//str1 <span class="keyword">variable</span> referes <span class="keyword">to</span> the <span class="typename">String</span> object <span class="string">"google.com"</span> <span class="keyword">and</span> the object <span class="string">"Java.latte.blogspot.in"</span> <span class="keyword">is</span> <span class="keyword">not</span> referred by any <span class="keyword">variable</span> <span class="keyword">and</span> hence <span class="keyword">is</span> eligible <span class="keyword">for</span> GC</div></pre></td></tr></table></figure>


<ol>
<li>创建孤立区域<br>如果我们有两个对象，它们是同一个类的实例，而且两个对象互相引用。如果这两个对象没有任何其他的引用，这两个对象就形成了一个孤立区域，将会被GC回收。</li>
</ol>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Test gc3;</div><div class="line">Test <span class="variable">gc1 =</span> new Test ();</div><div class="line">Test <span class="variable">gc2 =</span> new Test ();</div><div class="line">gc1.<span class="variable">g =</span> gc2;</div><div class="line">gc2.<span class="variable">g =</span> gc1;</div><div class="line"><span class="variable">gc1 =</span> <span class="constant">null</span>;</div><div class="line"><span class="variable">gc2 =</span> <span class="constant">null</span>;</div></pre></td></tr></table></figure>

<p>   这里gc1和gc2互相引用而且没有其他有效的引用，形成了一个孤立区域。</p>
<h2 id="如何设置永久区空间大小？">如何设置永久区空间大小？</h2>
<p>你可以通过-XX:PermSize和-XX:MaxPermSize两个JVM选项来设置永久区大小。但是一般只有在OOM Perm size时我们才去设置它。</p>
<h2 id="垃圾回收性能调优关键点">垃圾回收性能调优关键点</h2>
<p><strong>堆空间大小</strong></p>
<ul>
<li>-Xms 启动JVM时分配的堆空间大小</li>
<li>-Xmx 最大的JVM堆空间大小</li>
</ul>
<p><strong>青年区域大小</strong></p>
<ul>
<li>-XX:NewRatio 青年区域和老年区域的比例</li>
<li>-XX:NewSize 青年区域大小</li>
<li>-XX:SurvivorRatio Eden区和Survivor区的比例</li>
</ul>
<p>现在我们会在一些例子的帮助下理解这些参数</p>
<p><strong>配置堆空间</strong></p>
<ul>
<li>-Xmx的值决定了JVM初始化时最大保留的堆空间大小</li>
<li>-Xms的值在初始化时分配的空间大小，JVM内存可以增长到-Xmx的大小</li>
</ul>
<p><strong>总的堆大小</strong></p>
<ul>
<li>总的可用内存是影响GC性能最重要的参数</li>
<li>默认情况下，JVM在每次GC增加和减少堆内存，以保住空闲空间与已用空间的比例在一定的范围内</li>
<li>-XX:MinHeapFreeRatio - 当某一代中空闲空间比例低于这个值时就会扩充这一代的空间大小来保住这个比例。默认是40</li>
<li>-XX:MaxHeapFreeRatio - 当某一代中空闲空间比例高于这个值时就会减少这一代的空间大小来保住这个比例。默认是70</li>
</ul>
<p><strong>青年代</strong></p>
<p>青年代空间越大，Minor GC的次数越少，但是这意味着老年代更小，这会导致更频繁的Major GC。</p>
<p><strong>-XX:SurvivorRatio</strong></p>
<p>该参数表示每个Survivor区与Eden区的比例。SurvivorRatio参数控制着两个Survivor区的大小。<br>正如你上面看到的，青年代被分为3个区域。例如，-XX:SurvivorRatio=6将每个Survivor区与Eden区的比例设置为1:6，每个Survivor区空间将是青年代总大小的8分之1。<br>假设x=s0（Survivor 1），x=s1（Survivor 2），6x=eden区大小，青年代总大小为8x。显然每个Survivor区就是青年代总大小的8分之1.</p>
<p><strong>-XX:NewSize</strong></p>
<p>这是Survivor区（S0和S1）和Eden区的总大小</p>
<p><strong>-XX:NewRatio</strong></p>
<p>NewRatio是青年代大小与老年代的比例。<br>如果XX:NewRatio=1，青年代：老年代=1：1，对1GB的堆内存来说，青年代：老年代=500MB：500MB。<br>如果NewRatio是2，青年代：老年代=1：2，因此这个值越大，老年代大小会越大，青年代会越小。</p>
<p><strong>-XX:+PrintTenuringDistribution</strong></p>
<p>在每次新生代GC时，输出幸存区中对象的年龄分布</p>
<p><strong>Example</strong><br>Xmx / Xms = 1000 MB<br>NewRatio = 3<br>从这两个参数我们可以计算出<br>老年代 = 750 &amp; 青年代（包括两个Survivor区和Eden区） = 250</p>
<p>如果SurvivorRatio = 10，那么每个Survivor区大小是Eden区的1/12<br>那么计算结果如下：<br>20.888 = 21<br>S0 &amp; S1 = 21<br>Eden space= 208</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址：<a href="http://java-latte.blogspot.in/2013/08/garbage-collection-in-java.html" target="_blank" rel="external">Garbage Collection in]]>
    </summary>
    
      <category term="Java 垃圾回收" scheme="http://elvin.im/tags/Java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="Java" scheme="http://elvin.im/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[斯坦福机器学习课程理解（一）什么是梯度]]></title>
    <link href="http://elvin.im/2015/12/17/%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E6%A2%AF%E5%BA%A6/"/>
    <id>http://elvin.im/2015/12/17/斯坦福机器学习课程理解（一）什么是梯度/</id>
    <published>2015-12-17T11:18:25.000Z</published>
    <updated>2015-12-17T11:19:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>入行程序员以来，渐渐觉得现在使用的一些技术都是一些很基础的东西，并没有什么深度。然后又看到了机器学习的一些应用，深感以我现有的经验根本无法完成，所以萌发了自学机器学习的想法。在网易公开课上找到Andrew Ng的机器学习课程，评价非常好，就这样，我开始了这门课的学习。</p>
<p>第一节课是类似于课程导论，在大学学习模式识别时也有所了解。第二节课就正式开始讲解相关知识，第一个算法介绍的是梯度下降，发现不像本科课程，算法会涉及到大量数学知识。于是我就先补一下相关的数学知识。</p>
<h1 id="梯度">梯度</h1>
<h2 id="梯度的解释">梯度的解释</h2>
<p>维基百科上对梯度的解释如下</p>
<blockquote>
<p>假设有一个房间，房间内所有点的温度由一个标量场$\phi$ 给出的，即点$(x,y,z)$的温度是$\phi (x,y,z)$。假设温度不随时间改变。然后，在房间的每一点，该点的梯度将显示变热最快的方向。梯度的大小将表示在该方向上变热的速度。</p>
</blockquote>
<p>看到这个解释，就好理解了。将情况简化，维度减少到一维，梯度就是导数，假如是一个线性函数，梯度就是斜率。</p>
<h2 id="形式化定义">形式化定义</h2>
<p>一个标量函数$\varphi $的梯度记为：</p>
<p>$$\nabla \varphi 或\operatorname {grad} \varphi $$<br>其中$\nabla$（nabla）表示向量微分算子。</p>
<p>$\nabla \varphi $在三维直角坐标中表示为</p>
<p>$$\nabla \varphi ={\begin{pmatrix}{\frac {\partial \varphi }{\partial x}},{\frac {\partial \varphi }{\partial y}},{\frac {\partial \varphi }{\partial z}}\end{pmatrix}}$$</p>
<p>比如：<br>函数$\varphi =2x+3y^{2}-\sin(z)$的梯度为：</p>
<p>$$\nabla \varphi ={\begin{pmatrix}{\frac {\partial \varphi }{\partial x}},{\frac {\partial \varphi }{\partial y}},{\frac {\partial \varphi }{\partial z}}\end{pmatrix}}={\begin{pmatrix}{2},{6y},{-\cos(z)}\end{pmatrix}}$$</p>
<h1 id="总结">总结</h1>
<p>梯度实际就是单变量函数求导数的多变量版本。这样梯度下降中的求解偏微分就好理解了，就是为了找到下降速度最快的方向。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1>
<p>入行程序员以来，渐渐觉得现在使用的一些技术都是一些很基础的东西，并没有什么深度。然后又看到了机器学习的一些应用，深感以我现有的经验根本无法完成，所以萌发了自学机器学习的想法。在网易公开课上找到Andrew Ng的机器学习课程，评价非常]]>
    </summary>
    
      <category term="机器学习" scheme="http://elvin.im/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="http://elvin.im/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Docker搭建Hadoop集群]]></title>
    <link href="http://elvin.im/2015/06/24/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAHadoop%E9%9B%86%E7%BE%A4/"/>
    <id>http://elvin.im/2015/06/24/使用Docker搭建Hadoop集群/</id>
    <published>2015-06-24T12:07:14.000Z</published>
    <updated>2015-06-24T12:10:22.000Z</updated>
    <content type="html"><![CDATA[<p>最近想研究Hadoop，但是苦于机器有限，又不想只搭建单节点环境，于是就考虑用Docker在一台机器上搭建一个Hadoop集群。</p>
<p>操作系统：CentOS 7<br>Java: 1.7<br>Docker: 1.7<br>Hadoop: 2.6.0</p>
<h2 id="安装Docker环境">安装Docker环境</h2>
<h3 id="更新软件包">更新软件包</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">update</span></div></pre></td></tr></table></figure>

<h3 id="下载Docker_RPM安装包">下载Docker RPM安装包</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/rpm/<span class="number">1.7</span>.<span class="number">0</span>/centos-<span class="number">6</span>/RPMS/x86_64/docker-engine-<span class="number">1.7</span>.<span class="number">0</span>-<span class="number">1</span>.el6.x86_64.rpm</div></pre></td></tr></table></figure>

<h3 id="安装Docker">安装Docker</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">yum</span> <span class="comment">localinstall</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">nogpgcheck</span> <span class="comment">docker</span><span class="literal">-</span><span class="comment">engine</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">el6</span><span class="string">.</span><span class="comment">x86_64</span><span class="string">.</span><span class="comment">rpm</span></div></pre></td></tr></table></figure>

<h3 id="启动Docker">启动Docker</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">service</span> <span class="title">docker</span> start</span></div></pre></td></tr></table></figure>

<h3 id="用Docker运行hello-world">用Docker运行hello-world</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">docker</span> run hello-world</div></pre></td></tr></table></figure>

<h2 id="安装Hadoop环境">安装Hadoop环境</h2>
<h3 id="获取Ubuntu_14-10镜像">获取Ubuntu 14.10镜像</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">docker</span> <span class="tag">pull</span> <span class="tag">ubuntu</span><span class="pseudo">:14</span><span class="class">.10</span></div></pre></td></tr></table></figure>

<h3 id="创建hadoopbase容器">创建hadoopbase容器</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="command">run</span> -<span class="keyword">it</span> <span class="comment">--name hadoopbase --hostname hadoopbase ubuntu:14.10 /bin/bash</span></div></pre></td></tr></table></figure>

<h3 id="在hadoopbase中部署Hadoop环境">在hadoopbase中部署Hadoop环境</h3>
<p>首先用配置一个Hadoop的镜像，然后启动三个Docker容器，一个做master，两个做slave</p>
<h4 id="更新Ubuntu软件包">更新Ubuntu软件包</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>

<h4 id="安装ssh">安装ssh</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install ssh</div></pre></td></tr></table></figure>

<h4 id="设置ssh无密码登陆">设置ssh无密码登陆</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="keyword">t</span> rsa</div><div class="line"><span class="keyword">cd</span> ~/.ssh/</div><div class="line"><span class="keyword">cat</span> id_rsa.pub &gt;&gt; authorized_keys</div><div class="line">chmod <span class="number">700</span> ~/.ssh</div><div class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>

<h4 id="测试ssh登陆">测试ssh登陆</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">service</span> <span class="title">ssh</span> start</span></div><div class="line">ssh localhost</div></pre></td></tr></table></figure>

<h4 id="设置ssh开机启动">设置ssh开机启动</h4>
<p>在~/.bashrc末尾加入如下命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/<span class="keyword">init</span>.d/ssh start</div></pre></td></tr></table></figure>

<h4 id="安装dnsmasq">安装dnsmasq</h4>
<p>因为Docker不能直接改hosts文件，所以安装dnsmasq来解决</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install dnsmasq</div></pre></td></tr></table></figure>

<p>配置dnsmasq，编辑/etc/dnsmasq.conf</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">user=</span>root</div><div class="line"><span class="variable">listen-address=</span><span class="number">127.0</span>.<span class="number">0.1</span></div><div class="line"><span class="variable">addn-hosts=</span>/etc/dnsmasq.hosts</div></pre></td></tr></table></figure>

<p>添加并编辑/etc/dnsmasq.hosts</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.10.2    master</div><div class="line">192.168.10.3    slave1</div><div class="line">192.168.10.4    slave2</div></pre></td></tr></table></figure>

<p>设置开机启动，在~/.bashrc末尾加入如下命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/<span class="keyword">init</span>.d/dnsmasq start</div></pre></td></tr></table></figure>

<h4 id="安装Java">安装Java</h4>
<p>先拷贝Java</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">145</span><span class="symbol">:~/server-jre-</span><span class="number">7</span>u8<span class="number">0</span>-linux-x64.tar.gz ~<span class="regexp">/</span></div></pre></td></tr></table></figure>

<p>再解压到/usr/local目录下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xvf server-jre-<span class="number">7</span>u8<span class="number">0</span>-linux-x64.tar.gz</div><div class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/java</div><div class="line">mv ~<span class="regexp">/jdk1.7.0_80/</span> /usr/<span class="keyword">local</span>/java/</div></pre></td></tr></table></figure>

<p>然后再到~/.bashrc末尾添加</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> JAVA_HOME=/usr/local/java/jdk1.<span class="number">7.0</span>_80</div><div class="line"><span class="keyword">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</div><div class="line"><span class="keyword">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></div><div class="line"><span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div></pre></td></tr></table></figure>

<p>然后再运行以下命令验证Java环境</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> ~/.bashrc    #让环境变量生效</div><div class="line">javac -<span class="keyword">version</span></div><div class="line">java -<span class="keyword">version</span></div></pre></td></tr></table></figure>

<h4 id="安装Hadoop">安装Hadoop</h4>
<p>先拷贝Hadoop</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">145</span><span class="symbol">:~/hadoop-</span><span class="number">2.6</span>.<span class="number">0</span>.tar.gz ~<span class="regexp">/</span></div></pre></td></tr></table></figure>

<p>再解压到/usr/local目录下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar xvf hadoop-<span class="number">2.6</span><span class="number">.0</span>.tar.gz</div><div class="line">mv hadoop-<span class="number">2.6</span><span class="number">.0</span> /usr/<span class="built_in">local</span>/</div><div class="line">cd /usr/<span class="built_in">local</span></div><div class="line"><span class="built_in">ln</span> -s hadoop-<span class="number">2.6</span><span class="number">.0</span>/ hadoop</div></pre></td></tr></table></figure>

<h4 id="配置Hadoop">配置Hadoop</h4>
<p>配置hadoop/etc/hadoop/core-site.xml</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="title">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="title">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="title">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>hdfs://192.168.10.2:9000<span class="tag">&lt;/<span class="title">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></div></pre></td></tr></table></figure>

<p>配置hadoop/etc/hadoop/hdfs-site.xml</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;<span class="title">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="title">value</span>&gt;</span>2<span class="tag">&lt;/<span class="title">value</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></div></pre></td></tr></table></figure>

<p>配置masters</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.10.2</div></pre></td></tr></table></figure>

<p>配置slaves</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.10.3</div><div class="line">192.168.10.4</div></pre></td></tr></table></figure>

<h3 id="保存hadoopbase镜像">保存hadoopbase镜像</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit <span class="operator">-a</span> <span class="string">"Elvin"</span> -m <span class="string">"hadoop on docker"</span> <span class="number">426467</span>d551c5 hadoopbase:v1</div></pre></td></tr></table></figure>

<h3 id="安装pipework">安装pipework</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install git</div><div class="line">git clone https:<span class="comment">//github.com/jpetazzo/pipework.git</span></div><div class="line">mv pipework<span class="regexp">/ /</span>usr<span class="regexp">/local/</span></div></pre></td></tr></table></figure>

<p>然后将/usr/local/pipework加入环境变量PATH中</p>
<h3 id="启动Hadoop集群">启动Hadoop集群</h3>
<p>启动三个Docker容器：master，slave1，slave2</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">itd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">slave1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hostname</span> <span class="comment">slave1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">net=none</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dns=127</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1</span> <span class="comment">hadoopbase:v4</span></div><div class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">itd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">slave2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hostname</span> <span class="comment">slave2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">net=none</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dns=127</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1</span> <span class="comment">hadoopbase:v4</span></div><div class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">itd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">master</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hostname</span> <span class="comment">master</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">net=none</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dns=127</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1</span> <span class="comment">hadoopbase:v4</span></div></pre></td></tr></table></figure>

<p>使用pipework为三个容器分配ip</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">pipework</span> br1 master <span class="number">192.168.10.2</span>/<span class="number">24</span></div><div class="line">pipework br1 slave1 <span class="number">192.168.10.3</span>/<span class="number">24</span></div><div class="line">pipework br1 slave2 <span class="number">192.168.10.4</span>/<span class="number">24</span></div></pre></td></tr></table></figure>

<p>进入master容器，启动Hadoop</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker exec -it f8b4605322d7 /bin/bash</div><div class="line">/usr/local/hadoop/sbin/<span class="operator"><span class="keyword">start</span>-dfs.sh</span></div><div class="line">/usr/<span class="keyword">local</span>/hadoop/sbin/<span class="keyword">start</span>-yarn.sh</div></pre></td></tr></table></figure>

<h3 id="验证Hadoop集群">验证Hadoop集群</h3>
<h4 id="查看进程">查看进程</h4>
<p>在三个容器中运行jps查看Hadoop进程，可以看到master中启动了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">580 ResourceManager</div><div class="line">856 Jps</div><div class="line">390 SecondaryNameNode</div><div class="line">211 NameNode</div></pre></td></tr></table></figure>

<p>slave1中启动了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">84 DataNode</div><div class="line">421 Jps</div><div class="line">268 NodeManager</div></pre></td></tr></table></figure>

<p>slave2中启动了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">410 Jps</div><div class="line">87 DataNode</div><div class="line">257 NodeManager</div></pre></td></tr></table></figure>

<h4 id="使用hdfs_dfsadmin_-report查看状态">使用hdfs dfsadmin -report查看状态</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Configured Capacity: 20869324800 (19.44 GB)</div><div class="line">Present Capacity: 17914986496 (16.68 GB)</div><div class="line">DFS Remaining: 17914937344 (16.68 GB)</div><div class="line">DFS Used: 49152 (48 KB)</div><div class="line">DFS Used%: 0.00%</div><div class="line">Under replicated blocks: 0</div><div class="line">Blocks with corrupt replicas: 0</div><div class="line">Missing blocks: 0</div><div class="line"></div><div class="line"><span class="comment">-------------------------------------------------</span></div><div class="line">Live datanodes (2):</div><div class="line"></div><div class="line">Name: 192.168.10.3:50010 (slave1)</div><div class="line">Hostname: slave1</div><div class="line">Decommission Status : Normal</div><div class="line">Configured Capacity: 10434662400 (9.72 GB)</div><div class="line">DFS Used: 24576 (24 KB)</div><div class="line">Non DFS Used: 1477169152 (1.38 GB)</div><div class="line">DFS Remaining: 8957468672 (8.34 GB)</div><div class="line">DFS Used%: 0.00%</div><div class="line">DFS Remaining%: 85.84%</div><div class="line">Configured <span class="operator"><span class="keyword">Cache</span> Capacity: <span class="number">0</span> (<span class="number">0</span> B)</span></div><div class="line"><span class="keyword">Cache</span> Used: <span class="number">0</span> (<span class="number">0</span> B)</div><div class="line"><span class="keyword">Cache</span> Remaining: <span class="number">0</span> (<span class="number">0</span> B)</div><div class="line"><span class="keyword">Cache</span> Used%: <span class="number">100.00</span>%</div><div class="line"><span class="keyword">Cache</span> Remaining%: <span class="number">0.00</span>%</div><div class="line">Xceivers: <span class="number">1</span></div><div class="line"><span class="keyword">Last</span> contact: Wed Jun <span class="number">24</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">44</span> UTC <span class="number">2015</span></div><div class="line"></div><div class="line"></div><div class="line">Name: <span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>:<span class="number">50010</span> (slave2)</div><div class="line">Hostname: slave2</div><div class="line">Decommission <span class="keyword">Status</span> : Normal</div><div class="line">Configured Capacity: <span class="number">10434662400</span> (<span class="number">9.72</span> GB)</div><div class="line">DFS Used: <span class="number">24576</span> (<span class="number">24</span> KB)</div><div class="line">Non DFS Used: <span class="number">1477169152</span> (<span class="number">1.38</span> GB)</div><div class="line">DFS Remaining: <span class="number">8957468672</span> (<span class="number">8.34</span> GB)</div><div class="line">DFS Used%: <span class="number">0.00</span>%</div><div class="line">DFS Remaining%: <span class="number">85.84</span>%</div><div class="line">Configured <span class="keyword">Cache</span> Capacity: <span class="number">0</span> (<span class="number">0</span> B)</div><div class="line"><span class="keyword">Cache</span> Used: <span class="number">0</span> (<span class="number">0</span> B)</div><div class="line"><span class="keyword">Cache</span> Remaining: <span class="number">0</span> (<span class="number">0</span> B)</div><div class="line"><span class="keyword">Cache</span> Used%: <span class="number">100.00</span>%</div><div class="line"><span class="keyword">Cache</span> Remaining%: <span class="number">0.00</span>%</div><div class="line">Xceivers: <span class="number">1</span></div><div class="line"><span class="keyword">Last</span> contact: Wed Jun <span class="number">24</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">43</span> UTC <span class="number">2015</span></div></pre></td></tr></table></figure>

<p>到这里为止，我们在的Hadoop集群就已经搭建好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近想研究Hadoop，但是苦于机器有限，又不想只搭建单节点环境，于是就考虑用Docker在一台机器上搭建一个Hadoop集群。</p>
<p>操作系统：CentOS 7<br>Java: 1.7<br>Docker: 1.7<br>Hadoop: 2.6.0</p>
<h]]>
    </summary>
    
      <category term="Hadoop Docker" scheme="http://elvin.im/tags/Hadoop-Docker/"/>
    
      <category term="Hadoop" scheme="http://elvin.im/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS设置Tomcat为系统服务并随机启动]]></title>
    <link href="http://elvin.im/2015/06/09/CentOS%E8%AE%BE%E7%BD%AETomcat%E4%B8%BA%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%B9%B6%E9%9A%8F%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <id>http://elvin.im/2015/06/09/CentOS设置Tomcat为系统服务并随机启动/</id>
    <published>2015-06-09T11:03:51.000Z</published>
    <updated>2015-06-09T11:04:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="将tomcat设置为系统服务">将tomcat设置为系统服务</h2>
<p>将catalina.sh复制到/etc/init.d下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/tomcat</div><div class="line"><span class="keyword">cp</span> bin/catalina.<span class="keyword">sh</span> /etc/init.<span class="keyword">d</span>/tomcat</div></pre></td></tr></table></figure>

<p>在/etc/init.d/tomcat加入以下内容（根据实际情况配置）：</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">JAVA_HOME</span>=<span class="string">"/usr/local/java/jdk1.7.0_80"</span></div><div class="line"><span class="constant">CATALINA_HOME</span>=<span class="string">"/usr/local/tomcat"</span></div></pre></td></tr></table></figure>

<p>到这一步了就tomcat就可以用以下命令来启动和关闭了</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service tomcat <span class="operator"><span class="keyword">start</span></span></div><div class="line">service tomcat <span class="keyword">stop</span></div></pre></td></tr></table></figure>

<h2 id="让tomcat随机启动">让tomcat随机启动</h2>
<p>首先让/etc/init.d/tomcat支持chkconfig，加入以下内容</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># chkconfig: 2345 73 73</span></div><div class="line"><span class="preprocessor"># description: start or stop tomcat</span></div></pre></td></tr></table></figure>

<p>然后运行以下命令即可</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --<span class="built_in">add</span> tomcat</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="将tomcat设置为系统服务">将tomcat设置为系统服务</h2>
<p>将catalina.sh复制到/etc/init.d下</p>
<figure class="highlight [shell]"><table><tr><td class="gutte]]>
    </summary>
    
      <category term="Linux Tomcat" scheme="http://elvin.im/tags/Linux-Tomcat/"/>
    
      <category term="Linux" scheme="http://elvin.im/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL索引简单研究]]></title>
    <link href="http://elvin.im/2015/06/05/MySQL%E7%B4%A2%E5%BC%95%E7%AE%80%E5%8D%95%E7%A0%94%E7%A9%B6/"/>
    <id>http://elvin.im/2015/06/05/MySQL索引简单研究/</id>
    <published>2015-06-05T11:16:16.000Z</published>
    <updated>2015-06-08T11:17:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="创建测试表">创建测试表</h2>
<p>创建一个待测试的表test_table，数据如下</p>
<pre><code><span class="code">+----+</span>----------<span class="code">+----------+</span>----------+
<span class="header">| id | column_a | column_b | column_c |
+----+----------+----------+----------+</span>
|  1 | A1       | B1       | C1       |
|  2 | A2       | B2       | C2       |
|  3 | A3       | B3       | C3       |
|  4 | A4       | B4       | C4       |
|  5 | A5       | B5       | C5       |
|  6 | A6       | B6       | C6       |
|  7 | A7       | B7       | C7       |
|  8 | A8       | B8       | C8       |
|  9 | A9       | B9       | C9       |
| 10 | A10      | B10      | C10      |
| 11 | A11      | B11      | C11      |
| 12 | A12      | B12      | C12      |
| 13 | A13      | B13      | C13      |
| 14 | A14      | B14      | C14      |
| 15 | A15      | B15      | C15      |
<span class="header">| 16 | A16      | B16      | C16      |
+----+----------+----------+----------+</span>
</code></pre><h2 id="不创建任何索引的情况下">不创建任何索引的情况下</h2>
<h3 id="使用id查询">使用id查询</h3>
<p>由于id被设置为主键，会有索引存在，直接用id查询应该会走索引</p>
<pre><code>mysql&gt; explain select * from test_table where id = <span class="number">1</span>
;
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
<span class="localvars">| id | select_type | table      | type  | possible_keys | key     | key_len | ref   | rows |</span> <span class="class">Extra</span> |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
|  <span class="number">1</span> | <span class="class">SIMPLE</span>      <span class="localvars">| test_table | const |</span> <span class="class">PRIMARY</span>       | <span class="class">PRIMARY</span> | <span class="number">4</span>       <span class="localvars">| const |</span>    <span class="number">1</span> | <span class="class">NULL</span>  |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
</code></pre><p>通过执行计划可以看到用id主键查询确实会走索引，而且由于id = 1唯一确定了一条记录，该查询变成了一个常量查询。</p>
<pre><code>mysql&gt; explain select * from test_table where id &gt; <span class="number">1</span>
    -&gt; ;
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+
<span class="localvars">| id | select_type | table      | type  | possible_keys | key     | key_len | ref  | rows |</span> <span class="class">Extra</span>       |
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+
|  <span class="number">1</span> | <span class="class">SIMPLE</span>      <span class="localvars">| test_table | range |</span> <span class="class">PRIMARY</span>       | <span class="class">PRIMARY</span> | <span class="number">4</span>       | <span class="class">NULL</span> |   <span class="number">15</span> | <span class="class">Using</span> where |
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+
</code></pre><p>这里使用id &gt; 1依然会走索引查询</p>
<pre><code><span class="header">mysql&gt; explain select * from test_table where id != 1;
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+</span>
<span class="header">| id | select_type | table      | type  | possible_keys | key     | key_len | ref  | rows | Extra       |
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | range | PRIMARY       | PRIMARY | 4       | NULL |   16 | Using where |
+----+-------------+------------+-------+---------------+---------+---------+------+------+-------------+</span>
</code></pre><p>使用id != 1还是会走索引查询</p>
<pre><code>mysql&gt; explain select * from test_table where id + <span class="number">1</span> = <span class="number">2</span>
;
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+
<span class="localvars">| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows |</span> <span class="class">Extra</span>       |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+
|  <span class="number">1</span> | <span class="class">SIMPLE</span>      <span class="localvars">| test_table |</span> <span class="class">ALL</span>  | <span class="class">NULL</span>          | <span class="class">NULL</span> | <span class="class">NULL</span>    | <span class="class">NULL</span> |   <span class="number">16</span> | <span class="class">Using</span> where |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+
</code></pre><p>但是使用id + 1 = 2就会变成全表扫描</p>
<pre><code>mysql&gt; explain select * from test_table where id = <span class="number">2</span> - <span class="number">1</span>
;
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
<span class="localvars">| id | select_type | table      | type  | possible_keys | key     | key_len | ref   | rows |</span> <span class="class">Extra</span> |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
|  <span class="number">1</span> | <span class="class">SIMPLE</span>      <span class="localvars">| test_table | const |</span> <span class="class">PRIMARY</span>       | <span class="class">PRIMARY</span> | <span class="number">4</span>       <span class="localvars">| const |</span>    <span class="number">1</span> | <span class="class">NULL</span>  |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+-------+
</code></pre><p>若将id + 1 = 2变换成id = 2 - 1就会走索引，所以在实际编写SQL过程中不应该将索引字段计算以后再查询，Oracle的函数索引可以解决这个问题，但是MySQL不支持函数索引。</p>
<h3 id="使用一个非id字段查询">使用一个非id字段查询</h3>
<pre><code><span class="header">mysql&gt; explain select * from test_table where column_a = 'A1';
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ALL  | NULL          | NULL | NULL    | NULL |   16 | Using where |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
</code></pre><p>使用没有索引的字段查询会走全表扫描</p>
<h2 id="为查询字段加上索引">为查询字段加上索引</h2>
<h3 id="索引字段查询">索引字段查询</h3>
<p>为column_a加上索引</p>
<pre><code><span class="header">mysql&gt; explain select * from test_table where column_a = 'A1';
+----+-------------+------------+------+---------------+---------+---------+-------+------+-----------------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key     | key_len | ref   | rows | Extra                 |
+----+-------------+------------+------+---------------+---------+---------+-------+------+-----------------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ref  | index_a       | index_a | 767     | const |    1 | Using index condition |
+----+-------------+------------+------+---------------+---------+---------+-------+------+-----------------------+</span>
</code></pre><p>加上索引以后查询就变成了索引查询</p>
<pre><code><span class="header">mysql&gt; explain select * from test_table where column_a &gt; 'A1';
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ALL  | index_a       | NULL | NULL    | NULL |   16 | Using where |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>

<span class="header">mysql&gt; explain select * from test_table where column_a &lt;&gt; 'A1';
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ALL  | index_a       | NULL | NULL    | NULL |   16 | Using where |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
</code></pre><p>与int类型的id字段不同，字符串类型的字段用&gt;或者&lt;&gt;查询会变成全表扫描</p>
<pre><code>mysql&gt; explain select * <span class="keyword">from</span> test_table where column_a = '<span class="type">A1</span>' <span class="keyword">and</span> column_b = '<span class="type">B1</span>
';
+----+-------------+------------+------+---------------+---------+---------+-------+------+------------------------------------+
| id | select_type | table      | <span class="keyword">type</span> | possible_keys | key     | key_len | <span class="keyword">ref</span>   | rows | <span class="type">Extra</span>                              |
+----+-------------+------------+------+---------------+---------+---------+-------+------+------------------------------------+
|  <span class="number">1</span> | <span class="type">SIMPLE</span>      | test_table | <span class="keyword">ref</span>  | index_a       | index_a | <span class="number">767</span>     | <span class="keyword">const</span> |    <span class="number">1</span> | <span class="type">Using</span> index condition; <span class="type">Using</span> where |
+----+-------------+------------+------+---------------+---------+---------+-------+------+------------------------------------+
</code></pre><p>索引字段会优先走索引</p>
<h2 id="为多个查询字段加上组合索引">为多个查询字段加上组合索引</h2>
<p>为column_a,column_b加上组合索引</p>
<h3 id="使用组合索引全部字段查询">使用组合索引全部字段查询</h3>
<pre><code><span class="header">mysql&gt; explain select * from test_table where column_a = 'A1' and column_b = 'B1';
+----+-------------+------------+------+---------------+----------+---------+-------------+------+-----------------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key      | key_len | ref         | rows | Extra                 |
+----+-------------+------------+------+---------------+----------+---------+-------------+------+-----------------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ref  | index_ab      | index_ab | 1534    | const,const |    1 | Using index condition |
+----+-------------+------------+------+---------------+----------+---------+-------------+------+-----------------------+</span>
</code></pre><p>可以看到两个字段都走了索引</p>
<h3 id="单独使用组合索引第一个字段查询">单独使用组合索引第一个字段查询</h3>
<pre><code>mysql&gt; explain select * from test<span class="emphasis">_table where column_</span>a = <span class="emphasis">'A1'</span>
<span class="header">;
+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key      | key_len | ref   | rows | Extra                 |
+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ref  | index_ab      | index_ab | 767     | const |    1 | Using index condition |
+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span>
</code></pre><p>单独使用组合索引第一个字段查询是会走索引查询的</p>
<h3 id="单独使用组合索引后续字段查询">单独使用组合索引后续字段查询</h3>
<pre><code><span class="header">mysql&gt; explain select * from test_table where column_b = 'B1';
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
<span class="header">|  1 | SIMPLE      | test_table | ALL  | NULL          | NULL | NULL    | NULL |   16 | Using where |
+----+-------------+------------+------+---------------+------+---------+------+------+-------------+</span>
</code></pre><p>虽然column_b在组合索引index_ab中，但是由于它是第二个字段，所以它并不会走索引。</p>
<p>假如建立一个组合索引index_abc，索引字段为column_a,column_b,column_c，使用column_a查询、column_a+column_b查询、column_a+column_b+column_c查询都会走索引，但是column_b查询、column_b+column_c查询、column_c查询都不会走索引。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="创建测试表">创建测试表</h2>
<p>创建一个待测试的表test_table，数据如下</p>
<pre><code><span class="code">+----+</span>----------<span class="code">+---------]]>
    </summary>
    
      <category term="MySQL 数据库 索引" scheme="http://elvin.im/tags/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95/"/>
    
      <category term="MySQL" scheme="http://elvin.im/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux安装Nexus服务器]]></title>
    <link href="http://elvin.im/2015/06/03/Linux%E5%AE%89%E8%A3%85Nexus%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://elvin.im/2015/06/03/Linux安装Nexus服务器/</id>
    <published>2015-06-03T11:14:39.000Z</published>
    <updated>2015-06-08T11:15:46.000Z</updated>
    <content type="html"><![CDATA[<p>系统版本： CentOS 7</p>
<h2 id="安装Nexus">安装Nexus</h2>
<h3 id="下载Nexus">下载Nexus</h3>
<p>首先从<a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.11.1-01-bundle.tar.gz" target="_blank" rel="external">这里</a>下载Nexus服务器程序，可能需要爬梯子才能下载。</p>
<h3 id="解压到指定目录">解压到指定目录</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvf nexus-<span class="number">2.11</span><span class="number">.1</span>-<span class="number">01</span>-bundle.tar.gz</div><div class="line">mv nexus-<span class="number">2.11</span><span class="number">.1</span>-<span class="number">01</span> /usr/<span class="keyword">local</span>/nexus</div></pre></td></tr></table></figure>

<h3 id="设置端口等参数">设置端口等参数</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/nexus</div><div class="line"><span class="keyword">vi</span> <span class="keyword">conf</span>/nexus.properties</div></pre></td></tr></table></figure>

<h3 id="新建nexus系统用户">新建nexus系统用户</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">groupadd</span> mysql</div><div class="line">useradd -r -m -g mysql mysql</div></pre></td></tr></table></figure>

<h3 id="指定Nexus以nexus用户启动">指定Nexus以nexus用户启动</h3>
<p>修改bin/nexus文件如下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">RUN_AS_USER=</span>nexus</div><div class="line"><span class="variable">NEXUS_HOME=</span>/usr/local/nexus</div><div class="line"><span class="variable">PIDDIR=</span><span class="string">"<span class="subst">${NEXUS_HOME}</span>"</span></div></pre></td></tr></table></figure>

<p>然后将目录权限赋给nexus用户</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">chown</span> -R nexus /usr/<span class="keyword">local</span>/nexus</div></pre></td></tr></table></figure>

<h3 id="创建Nexus工作目录">创建Nexus工作目录</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/sonatype-work</div><div class="line"><span class="keyword">chown</span> -R nexus /usr/<span class="keyword">local</span>/sonatype-work</div></pre></td></tr></table></figure>

<h3 id="将Nexus设置成Linux系统服务">将Nexus设置成Linux系统服务</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cp</span> bin/nexus /etc/init.<span class="keyword">d</span>/</div><div class="line">chkconfig --<span class="built_in">add</span> nexus</div><div class="line">service nexus start</div></pre></td></tr></table></figure>

<h3 id="安装完成">安装完成</h3>
<p>安装完成以后在浏览器输入<a href="http://192.168.1.145:8081/nexus即可访问Nexus。" target="_blank" rel="external">http://192.168.1.145:8081/nexus即可访问Nexus。</a><br>用管理员账户admin/admin123可以管理仓库。</p>
<h2 id="客户端Maven使用Nexus服务">客户端Maven使用Nexus服务</h2>
<h3 id="修改Maven的配置文件">修改Maven的配置文件</h3>
<p>修改MAVEN_HOME/conf/settings.xml，在相应字段加入以下内容</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">settings</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">mirrors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">mirror</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="title">mirrorOf</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="title">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">profile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--Enable snapshots for the built in central repo to direct --&gt;</span></div><div class="line">      <span class="comment">&lt;!--all requests to nexus via the mirror --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">repository</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">id</span>&gt;</span>central<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="title">url</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">releases</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">releases</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">repository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">repositories</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="title">pluginRepositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">id</span>&gt;</span>central<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="title">url</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">releases</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">releases</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">pluginRepositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">profiles</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">activeProfiles</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--make the profile active all the time --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">activeProfile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">activeProfiles</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">settings</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在Eclipse中同样将Maven的配置文件指定为刚刚修改好的。</p>
<p>到这里Nexus服务器的安装与使用都已经完成了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>系统版本： CentOS 7</p>
<h2 id="安装Nexus">安装Nexus</h2>
<h3 id="下载Nexus">下载Nexus</h3>
<p>首先从<a href="https://sonatype-download.global.ssl.fastly]]>
    </summary>
    
      <category term="Maven Nexus" scheme="http://elvin.im/tags/Maven-Nexus/"/>
    
      <category term="Maven" scheme="http://elvin.im/categories/Maven/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS命令备忘录]]></title>
    <link href="http://elvin.im/2015/05/15/CentOS%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://elvin.im/2015/05/15/CentOS命令备忘录/</id>
    <published>2015-05-15T11:58:23.000Z</published>
    <updated>2015-06-09T11:03:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="系统资源监控">系统资源监控</h2>
<h3 id="CPU和内存">CPU和内存</h3>
<p>top命令有些类似windows任务管理器</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">top</span></div></pre></td></tr></table></figure>

<h3 id="磁盘IO">磁盘IO</h3>
<p>以下命令会每1秒打印磁盘IO情况，打印10次</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iostat <span class="operator">-d</span> -m <span class="number">1</span> <span class="number">10</span></div></pre></td></tr></table></figure>

<p>若此命令不存在，则运行以下命令安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> sysstat</span></div></pre></td></tr></table></figure>

<h3 id="网络监控">网络监控</h3>
<p>以下命令会打开一个网络监控程序</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptraf-ng</div></pre></td></tr></table></figure>

<p>若此命令不存在，则运行以下命令安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> iptraf</span></div></pre></td></tr></table></figure>

<h2 id="防火墙">防火墙</h2>
<h3 id="查看端口是否打开">查看端口是否打开</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">firewall-cmd --query-port</span>=<span class="string">3306/tcp</span></div></pre></td></tr></table></figure>

<h3 id="打开/关闭端口">打开/关闭端口</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">firewall-cmd <span class="variable">--add-port=</span><span class="number">3306</span>/tcp    <span class="comment">#临时打开端口</span></div><div class="line">firewall-cmd <span class="variable">--remove-port=</span><span class="number">3306</span>/tcp    <span class="comment">#临时关闭端口</span></div><div class="line">firewall-cmd <span class="variable">--add-port=</span><span class="number">3306</span>/tcp --permanent    <span class="comment">#永久打开端口</span></div><div class="line">firewall-cmd <span class="variable">--remove-port=</span><span class="number">3306</span>/tcp --permanent    <span class="comment">#永久关闭端口</span></div></pre></td></tr></table></figure>

<h2 id="时间设置">时间设置</h2>
<h3 id="查看当前系统时间和时区">查看当前系统时间和时区</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">timedatectl</div></pre></td></tr></table></figure>

<h3 id="同步网络时间">同步网络时间</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> ntpdate <span class="comment">#若命令不存在则安装</span></div><div class="line">ntpdate us.pool.ntp.org</div></pre></td></tr></table></figure>

<h3 id="定时同步">定时同步</h3>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab <span class="operator">-e</span></div></pre></td></tr></table></figure>

<p>运行以上命令后添加一下cron task，就会每30分钟运行一次同步时间命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">*</span>/30 <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> /sbin/ntpdate us.pool.ntp.org</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="系统资源监控">系统资源监控</h2>
<h3 id="CPU和内存">CPU和内存</h3>
<p>top命令有些类似windows任务管理器</p>
<figure class="highlight [shell]"><table><tr><td class=]]>
    </summary>
    
      <category term="CentOS Linux" scheme="http://elvin.im/tags/CentOS-Linux/"/>
    
      <category term="Linux" scheme="http://elvin.im/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS 7下MySQL与Tomcat环境搭建过程备份]]></title>
    <link href="http://elvin.im/2015/05/13/CentOS-7%E4%B8%8BMySQL%E4%B8%8ETomcat%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%A4%87%E4%BB%BD/"/>
    <id>http://elvin.im/2015/05/13/CentOS-7下MySQL与Tomcat环境搭建过程备份/</id>
    <published>2015-05-13T11:52:33.000Z</published>
    <updated>2015-06-09T11:02:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装MySQL">安装MySQL</h2>
<p>MySQL的安装参考了官方的安装文档<br><a href="http://dev.mysql.com/doc/refman/5.6/en/binary-installation.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/binary-installation.html</a><br><a href="http://dev.mysql.com/doc/refman/5.6/en/default-privileges.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/default-privileges.html</a></p>
<h3 id="安装MySQL的依赖">安装MySQL的依赖</h3>
<h4 id="安装libaio">安装libaio</h4>
<p>MySQL依赖libaio，首先要安装libaio，CentOS可以用以下命令安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> libaio</span></div></pre></td></tr></table></figure>

<h4 id="安装perl">安装perl</h4>
<p>因为MySQL的安装脚本是perl脚本，若没有perl解释器，需要先安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install <span class="keyword">perl</span></div><div class="line">yum install <span class="keyword">perl</span>-DBI</div><div class="line">yum install <span class="keyword">perl</span>-DBD-MySQL</div></pre></td></tr></table></figure>

<h3 id="安装MySQL-1">安装MySQL</h3>
<h4 id="下载解压MySQL">下载解压MySQL</h4>
<p>从<a href="http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.24-linux-glibc2.5-x86_64.tar.gz" target="_blank" rel="external">这里</a>下载64位的MySQL程序包，然后解压</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">tar</span> xvf mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">24</span>-linux-glibc2.<span class="number">5</span>-x86_64.tar.gz</div></pre></td></tr></table></figure>

<p>将目录名改为mysql</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mv</span> mysql-<span class="number">5</span>.<span class="number">6</span>.<span class="number">24</span>-linux-glibc2.<span class="number">5</span>-x86_64 mysql</div></pre></td></tr></table></figure>

<p>然后将mysql移动到/usr/local下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv .<span class="regexp">/myqsl /</span>usr<span class="regexp">/local/</span></div></pre></td></tr></table></figure>

<h4 id="创建mysql系统用户">创建mysql系统用户</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">groupadd</span> mysql</div><div class="line">useradd -r -g mysql mysql</div></pre></td></tr></table></figure>

<h4 id="授权给用户mysql">授权给用户mysql</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql</div><div class="line">chown -<span class="variable">R</span> mysql .</div><div class="line">chgrp -<span class="variable">R</span> mysql .</div></pre></td></tr></table></figure>

<h4 id="安装MySQL-2">安装MySQL</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">scripts/mysql_install_db --user</span>=<span class="string">mysql</span></div></pre></td></tr></table></figure>

<h4 id="启动MySQL">启动MySQL</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /var/<span class="command">log</span>/mariadb </div><div class="line">mkdir /var/<span class="command">run</span>/mariadb</div><div class="line">touch /var/<span class="command">run</span>/mariadb/dev.pid</div><div class="line">chown -R mysql /var/<span class="command">run</span>/mariadb</div><div class="line">bin/mysqld_safe <span class="comment">--user=mysql &</span></div></pre></td></tr></table></figure>

<h4 id="将MySQL安装为系统服务">将MySQL安装为系统服务</h4>
<p>安装为系统服务后，MySQL就会随机启动了</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cp support-files/mysql.<span class="keyword">server</span> /etc/init.d/mysql.<span class="keyword">server</span></div><div class="line">chmod a+x /etc/init.d/mysql.<span class="keyword">server</span></div><div class="line">chkconfig --add mysql.<span class="keyword">server</span></div><div class="line">service mysql.<span class="keyword">server</span> status</div></pre></td></tr></table></figure>

<h3 id="MySQL用户设置">MySQL用户设置</h3>
<h4 id="登录MySQL">登录MySQL</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mysql -h localhost -uroot</div></pre></td></tr></table></figure>

<h4 id="查看现有用户">查看现有用户</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> <span class="keyword">User</span>,Host,<span class="keyword">Password</span> <span class="keyword">from</span> mysql.<span class="keyword">user</span>;</span></div></pre></td></tr></table></figure>

<h4 id="为root用户分配密码">为root用户分配密码</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpwd'</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span> = <span class="string">'root'</span>;</span></div><div class="line"><span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span></div></pre></td></tr></table></figure>

<h4 id="移除匿名用户">移除匿名用户</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">''</span>@<span class="string">'localhost'</span>;</span></div><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">''</span>@<span class="string">'localhost.localdomain'</span>;</span></div></pre></td></tr></table></figure>

<h4 id="去掉测试的权限">去掉测试的权限</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mysql.db <span class="keyword">WHERE</span> Db <span class="keyword">LIKE</span> <span class="string">'test%'</span>;</span></div><div class="line"><span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span></div><div class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> test;</span></div></pre></td></tr></table></figure>

<h4 id="查看数据库所有用户">查看数据库所有用户</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">CONCAT</span>(<span class="string">'User: '''</span>,<span class="keyword">user</span>,<span class="string">'''@'''</span>,host,<span class="string">''';'</span>) <span class="keyword">AS</span> <span class="keyword">query</span> <span class="keyword">FROM</span> mysql.<span class="keyword">user</span>;</span></div></pre></td></tr></table></figure>

<h4 id="查看某用户的权限">查看某用户的权限</h4>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> root;</span></div></pre></td></tr></table></figure>

<h3 id="打开远程访问">打开远程访问</h3>
<h4 id="将root用户授权给指定ip访问">将root用户授权给指定ip访问</h4>
<p>%代表任意ip，需要指定可以替换成特定的ip</p>
<figure class="highlight [sql]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> root@<span class="string">"%"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"root"</span>;</span></div><div class="line"><span class="operator"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpwd'</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span> = <span class="string">'root'</span>;</span></div><div class="line"><span class="operator"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span></div></pre></td></tr></table></figure>

<h4 id="打开防火墙">打开防火墙</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">query</span><span class="literal">-</span><span class="comment">port=3306/tcp</span></div><div class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span></div></pre></td></tr></table></figure>

<h4 id="解决中文乱码">解决中文乱码</h4>
<p>中文乱码的根源出在系统各处编码不统一，这里我们统一使用UTF8编码解决此问题，在MySQL配置中加入以下部分</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-server=utf8</div><div class="line"><span class="keyword">...</span></div></pre></td></tr></table></figure>

<h2 id="安装Tomcat">安装Tomcat</h2>
<h3 id="安装JRE">安装JRE</h3>
<h4 id="解压安装包">解压安装包</h4>
<p>从<a href="http://download.oracle.com/otn-pub/java/jdk/7u80-b15/server-jre-7u80-linux-x64.tar.gz?AuthParam=1431401329_7d3d1b0277f38fffa59a24793dbd7361" target="_blank" rel="external">这里</a>下载JRE，然后解压</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xvf server-jre-<span class="number">7</span>u8<span class="number">0</span>-linux-x64.tar.gz</div><div class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/java</div><div class="line">mv jdk1.<span class="number">7.0_80</span> /usr/<span class="keyword">local</span>/java/</div></pre></td></tr></table></figure>

<h4 id="设置环境变量">设置环境变量</h4>
<p>在/etc/profile末尾加入如下内容，然后执行source /etc/profile</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="constant">JAVA_HOME</span>=<span class="regexp">/usr/local</span><span class="regexp">/java/jdk</span>1.<span class="number">7.0_80</span></div><div class="line"><span class="constant">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/<span class="symbol">lib:</span><span class="variable">$JAVA_HOME</span>/jre/lib</div><div class="line"><span class="constant">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:</span><span class="variable">$JAVA_HOME</span>/<span class="symbol">bin:</span><span class="variable">$JAVA_HOME</span>/jre/bin</div><div class="line">export <span class="constant">PATH</span> <span class="constant">CLASSPATH</span> <span class="constant">JAVA_HOME</span></div></pre></td></tr></table></figure>

<h3 id="安装Tomcat-1">安装Tomcat</h3>
<h4 id="下载解压Tomcat">下载解压Tomcat</h4>
<p>从<a href="http://apache.fayea.com/tomcat/tomcat-8/v8.0.22/bin/apache-tomcat-8.0.22.tar.gz" target="_blank" rel="external">这里</a>下载Tomcat，然后解压</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xvf apache-tomcat-<span class="number">8.0</span><span class="number">.22</span>.tar.gz</div><div class="line">mv apache-tomcat-<span class="number">8.0</span><span class="number">.22</span> tomcat</div><div class="line">mv tomcat /usr/<span class="keyword">local</span>/</div></pre></td></tr></table></figure>

<h4 id="修改端口">修改端口</h4>
<p>将tomcat/conf/server.xml中这一行</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector <span class="variable">port=</span><span class="string">"8080"</span> <span class="variable">protocol=</span><span class="string">"HTTP/1.1"</span></div><div class="line">               <span class="variable">connectionTimeout=</span><span class="string">"20000"</span></div><div class="line">               <span class="variable">redirectPort=</span><span class="string">"8443"</span> /&gt;</div></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight [xml]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector <span class="variable">port=</span><span class="string">"80"</span> <span class="variable">protocol=</span><span class="string">"HTTP/1.1"</span></div><div class="line">               <span class="variable">connectionTimeout=</span><span class="string">"20000"</span></div><div class="line">               <span class="variable">redirectPort=</span><span class="string">"8443"</span> /&gt;</div></pre></td></tr></table></figure>

<h4 id="启动Tomcat">启动Tomcat</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/startup.<span class="keyword">sh</span></div></pre></td></tr></table></figure>

<h4 id="打开防火墙端口">打开防火墙端口</h4>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">query</span><span class="literal">-</span><span class="comment">port=80/tcp</span></div><div class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=80/tcp</span></div></pre></td></tr></table></figure>

<p>通过浏览器打开机器的ip，已经可以看到tomcat的界面了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装MySQL">安装MySQL</h2>
<p>MySQL的安装参考了官方的安装文档<br><a href="http://dev.mysql.com/doc/refman/5.6/en/binary-installation.html" target="_bl]]>
    </summary>
    
      <category term="CentOS Linux MySQL Tomcat" scheme="http://elvin.im/tags/CentOS-Linux-MySQL-Tomcat/"/>
    
      <category term="Linux" scheme="http://elvin.im/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用参数占位符查询防止SQL/HQL注入]]></title>
    <link href="http://elvin.im/2015/05/05/%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0%E5%8D%A0%E4%BD%8D%E7%AC%A6%E6%9F%A5%E8%AF%A2%E9%98%B2%E6%AD%A2SQL-HQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://elvin.im/2015/05/05/使用参数占位符查询防止SQL-HQL注入/</id>
    <published>2015-05-05T11:54:48.000Z</published>
    <updated>2015-05-05T11:56:45.000Z</updated>
    <content type="html"><![CDATA[<p>在一些需要数据库查询的场景中，查询条件常常是通过用户输入来的。这里经常就会出现拼接SQL或者HQL的代码。比如：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> hql = <span class="string">"from table where key = '"</span> + <span class="keyword">key</span> + <span class="string">"' order by id desc"</span>;</div></pre></td></tr></table></figure>

<p>这种方式可以完成查询的需求，但是也会代码安全风险，比如用户输入如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span><span class="string">' or '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></div></pre></td></tr></table></figure>

<p>该参数输入后，经过拼接后就变成了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> table <span class="keyword">where</span> key = <span class="string">'1'</span> <span class="keyword">or</span> <span class="string">'1'</span>=<span class="string">'1'</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></div></pre></td></tr></table></figure>

<p>这样就会将该表中的所有记录都查询出来。同样的问题在使用SQL的时候同样会有。</p>
<p>解决这类问题其实很简单，只需要在写数据库查询代码时不要使用SQL和HQL拼接，在需要传递参数时，用参数占位符即可。比如：</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> hql = <span class="string">"from table where key = ? order by id desc"</span>;</div><div class="line"><span class="keyword">this</span>.hibernateTemplate.find(hql, key);</div></pre></td></tr></table></figure>

<p>再比如：</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">String</span> hql = <span class="string">"from table where key = :key order by id desc"</span>;</div><div class="line"><span class="variable">Query</span> <span class="keyword">query</span> = session.create<span class="variable">Query</span>(hql);</div><div class="line"><span class="keyword">query</span>.set<span class="variable">String</span>(<span class="string">"key"</span>, key);</div></pre></td></tr></table></figure>

<p>用参数占位符的方式可以使SQL在数据库预编译，将参数单独传递给数据库，就算参数中有特殊符号，也不会被数据库当做语句执行，这种方式可以有效的避免SQL注入漏洞。<br>SQL拼接产生注入漏洞的原因就是拼接出来的SQL在执行的时候才会进行编译。数据库收到的只是一个Plain SQL，无法区分是否被注入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在一些需要数据库查询的场景中，查询条件常常是通过用户输入来的。这里经常就会出现拼接SQL或者HQL的代码。比如：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div cla]]>
    </summary>
    
      <category term="Hibernate 注入" scheme="http://elvin.im/tags/Hibernate-%E6%B3%A8%E5%85%A5/"/>
    
      <category term="数据库" scheme="http://elvin.im/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android学习之RSS阅读器开发之三——功能更新]]></title>
    <link href="http://elvin.im/2015/02/05/Android%E5%AD%A6%E4%B9%A0%E4%B9%8BRSS%E9%98%85%E8%AF%BB%E5%99%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%89%E2%80%94%E2%80%94%E5%8A%9F%E8%83%BD%E6%9B%B4%E6%96%B0/"/>
    <id>http://elvin.im/2015/02/05/Android学习之RSS阅读器开发之三——功能更新/</id>
    <published>2015-02-04T16:31:06.000Z</published>
    <updated>2015-02-04T16:32:25.000Z</updated>
    <content type="html"><![CDATA[<p>回到珠海这两天晚上对RSS阅读器进行了一些更新。源码放在<a href="https://github.com/imelvin/RSSReader" target="_blank" rel="external">这里</a></p>
<p>下面是一些界面功能的截图和说明</p>
<h2 id="打开原始页面">打开原始页面</h2>
<p><img src="http://elvin-blog.qiniudn.com/rss_detail1_1.png" alt=""></p>
<p>使用App自带的WebView打开原始页面，并提供菜单以复制链接和用其他浏览器打开。</p>
<h2 id="界面调整">界面调整</h2>
<p><img src="http://elvin-blog.qiniudn.com/item_list1_1.png" alt=""></p>
<p>调整了ListView的间距。</p>
<p><img src="http://elvin-blog.qiniudn.com/feed_list1_1.png" alt=""></p>
<p>对侧滑菜单做了改动，由于图片都是网上找的，所以有些不协调。</p>
<h2 id="收藏和删除功能">收藏和删除功能</h2>
<p><img src="http://elvin-blog.qiniudn.com/item_list1_2.png" alt=""></p>
<p>长按某个条目会弹出菜单，可以收藏和删除。收藏会将该条目加入收藏夹，而删除会将相应条目删除，包括收藏夹中的。</p>
<h2 id="获取订阅源的进度条">获取订阅源的进度条</h2>
<p><img src="http://elvin-blog.qiniudn.com/add_feed_progress.png" alt=""></p>
<p>优化了添加订阅源的进度显示，有百分比可以提示用户。</p>
<h2 id="使用SQL_Cipher">使用SQL Cipher</h2>
<p><img src="http://elvin-blog.qiniudn.com/sqlcipher1.png" alt=""></p>
<p>使用SQL Cipher对数据库加密，加密后的数据库就无法被sqlite读取了。SQL Cipher在使用上与sqlite几乎完全一样。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>回到珠海这两天晚上对RSS阅读器进行了一些更新。源码放在<a href="https://github.com/imelvin/RSSReader" target="_blank" rel="external">这里</a></p>
<p>下面是一些界面功能的截图和说明</]]>
    </summary>
    
      <category term="Android" scheme="http://elvin.im/tags/Android/"/>
    
      <category term="Android" scheme="http://elvin.im/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android学习之RSS阅读器开发之二——基本功能完成]]></title>
    <link href="http://elvin.im/2015/01/25/Android%E5%AD%A6%E4%B9%A0%E4%B9%8BRSS%E9%98%85%E8%AF%BB%E5%99%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%AE%8C%E6%88%90/"/>
    <id>http://elvin.im/2015/01/25/Android学习之RSS阅读器开发之二——基本功能完成/</id>
    <published>2015-01-25T05:09:47.000Z</published>
    <updated>2015-01-25T05:19:10.000Z</updated>
    <content type="html"><![CDATA[<p>经过一周的边做边学，一个RSS阅读器在功能上已经基本完成。源码放在<a href="https://github.com/imelvin/RSSReader" target="_blank" rel="external">这里</a></p>
<p>该应用实现的功能如下：</p>
<pre><code>-<span class="ruby"> 侧滑菜单
</span>-<span class="ruby"> 下拉刷新、上拉加载更多
</span>-<span class="ruby"> <span class="constant">ListView</span>分页显示
</span>-<span class="ruby"> 网络下载<span class="constant">XML</span>文件
</span>-<span class="ruby"> <span class="constant">XML</span>解析
</span>-<span class="ruby"> <span class="constant">Sqlite</span>读写
</span>-<span class="ruby"> <span class="constant">TextView</span>显示<span class="constant">Html</span></span>
</code></pre><p>下面是一些界面功能的截图和说明，由于没有测试机，就用的Nexus 5的模拟器。</p>
<h2 id="初始状态">初始状态</h2>
<p><img src="http://elvin-blog.qiniudn.com/feed_list1.png" alt=""></p>
<p>这里可以通过点击添加订阅源按钮去添加一个新的订阅源</p>
<h2 id="添加订阅源">添加订阅源</h2>
<p><img src="http://elvin-blog.qiniudn.com/add_feed1.png" alt=""></p>
<p>在这里可以输入订阅源地址，然后点击回车添加</p>
<p><img src="http://elvin-blog.qiniudn.com/add_feed2.png" alt=""></p>
<p>点击回车后会开启一个AsyncTask去下载RSS文件，并用XMLPullParser进行解析，然后存到本地Sqlite数据库。加入AsyncTask出现异常会提示“请输入一个合法的地址”</p>
<h2 id="RSS条目列表">RSS条目列表</h2>
<p><img src="http://elvin-blog.qiniudn.com/item_list1.png" alt=""></p>
<p>在添加了订阅源后会回到条目列表界面，并用列表显示数据库里面的条目。</p>
<h2 id="阅读界面">阅读界面</h2>
<p><img src="http://elvin-blog.qiniudn.com/item_detail1.png" alt=""></p>
<p>点击某个条目，会进入阅读界面，阅读界面的内容用Html.fromHtml将Html文本显示到TextView。</p>
<p><img src="http://elvin-blog.qiniudn.com/item_detail2.png" alt=""></p>
<p>点击打开原始界面按钮，会调用浏览器打开该条目的链接。</p>
<h2 id="下拉刷新和上拉加载更多">下拉刷新和上拉加载更多</h2>
<p>条目列表界面加入了下拉刷新和上拉加载更多的功能</p>
<p><img src="http://elvin-blog.qiniudn.com/item_list2.png" alt=""><br><img src="http://elvin-blog.qiniudn.com/item_list3.png" alt=""></p>
<p>下拉刷新会下载新版本的RSS文件并解析存储到数据库，并更新列表</p>
<p><img src="http://elvin-blog.qiniudn.com/item_list4.png" alt=""></p>
<p>条目列表不会一次显示数据库中的所有记录，而是分页显示，每次上拉会加载下一页</p>
<h2 id="侧滑菜单">侧滑菜单</h2>
<p><img src="http://elvin-blog.qiniudn.com/feed_list2.png" alt=""></p>
<p>侧滑菜单中的列表是不同的订阅源</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经过一周的边做边学，一个RSS阅读器在功能上已经基本完成。源码放在<a href="https://github.com/imelvin/RSSReader" target="_blank" rel="external">这里</a></p>
<p>该应用实现的功能如下：<]]>
    </summary>
    
      <category term="Android" scheme="http://elvin.im/tags/Android/"/>
    
      <category term="Android" scheme="http://elvin.im/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android学习之RSS阅读器开发之一——搭建开发环境]]></title>
    <link href="http://elvin.im/2015/01/19/Android%E5%AD%A6%E4%B9%A0%E4%B9%8BRSS%E9%98%85%E8%AF%BB%E5%99%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://elvin.im/2015/01/19/Android学习之RSS阅读器开发之一——搭建开发环境/</id>
    <published>2015-01-19T15:21:53.000Z</published>
    <updated>2015-01-20T11:23:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装IDE">安装IDE</h2>
<p>Android Studio已经出了正式版，我这里就选用了Android Studio作为我的IDE，Android Studio可以在<a href="http://android-studio.org/" target="_blank" rel="external">这里</a>下载。</p>
<p>我是在OS X Yosemite下开发，在运行Android Studio的时候遇到以下错误</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unable <span class="keyword">to</span> <span class="keyword">find</span> <span class="keyword">a</span> valid jvm</div></pre></td></tr></table></figure>

<p>后面经过Google后发现Android Studio的info.plist文件中配置的JVMversion为1.6*，然后发现本机之前装的是java 8，所以下载了一个1.6版本的java解决了此问题。</p>
<h2 id="模拟器运行">模拟器运行</h2>
<p>安装好IDE，更新好SDK以后，第一件事就是新建了一个测试项目，这里要注意项目compile SDK版本要跟创建项目时的一致，不然会出现一些错误。</p>
<p>模拟器运行直接选择app执行，然后选择一个虚拟设备就可以了。</p>
<h2 id="单元测试">单元测试</h2>
<p>搭建好基本的开发环境以后，关注了一下Android的单元测试，Android有很多测试的基类，可以继承这些类实现不同的测试目的。</p>
<p>目前用到的是AndroidTestCase。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装IDE">安装IDE</h2>
<p>Android Studio已经出了正式版，我这里就选用了Android Studio作为我的IDE，Android Studio可以在<a href="http://android-studio.org/" target]]>
    </summary>
    
      <category term="Android" scheme="http://elvin.im/tags/Android/"/>
    
      <category term="Android" scheme="http://elvin.im/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HSSF和XSSF特性速成说明]]></title>
    <link href="http://elvin.im/2014/12/22/HSSF%E5%92%8CXSSF%E7%89%B9%E6%80%A7%E9%80%9F%E6%88%90%E8%AF%B4%E6%98%8E/"/>
    <id>http://elvin.im/2014/12/22/HSSF和XSSF特性速成说明/</id>
    <published>2014-12-22T11:59:08.000Z</published>
    <updated>2014-12-22T12:09:04.000Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自 <a href="http://poi.apache.org/spreadsheet/quick-guide.html" target="_blank" rel="external">Busy Developers’ Guide to HSSF and XSSF Features</a></p>
<h2 id="如何新建工作簿">如何新建工作簿</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Workbook wb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.<span class="keyword">write</span>(fileOut);</div><div class="line">fileOut.<span class="keyword">close</span>();</div><div class="line"></div><div class="line">Workbook wb = <span class="keyword">new</span> XSSFWorkbook();</div><div class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"workbook.xlsx"</span>);</div><div class="line">wb.<span class="keyword">write</span>(fileOut);</div><div class="line">fileOut.<span class="keyword">close</span>();</div></pre></td></tr></table></figure>

<h2 id="如何新建工作表">如何新建工作表</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();  <span class="comment">// 或者 new XSSFWorkbook();</span></div><div class="line"><span class="constant">Sheet sheet1</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"><span class="constant">Sheet sheet2</span> = wb.createSheet(<span class="string">"second sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 注意工作表的名字（Sheet Name）不能超过31个字符</span></div><div class="line"><span class="comment">// 而且必须不包含以下任意字符：</span></div><div class="line"><span class="comment">// 0x0000</span></div><div class="line"><span class="comment">// 0x0003</span></div><div class="line"><span class="comment">// 冒号 (:)</span></div><div class="line"><span class="comment">// 反斜杠 (\)</span></div><div class="line"><span class="comment">// 星号 (*)</span></div><div class="line"><span class="comment">// 问号 (?)</span></div><div class="line"><span class="comment">// 斜杠 (/)</span></div><div class="line"><span class="comment">// 中括号 ([])</span></div><div class="line"></div><div class="line"><span class="comment">// 你可以使用org.apache.poi.ss.util.WorkbookUtil#createSafeSheetName(String nameProposal)</span></div><div class="line"><span class="comment">// 安全地创建可用的工作表名（Sheet Name），这个方法会将不可用的字符替换成空格（' '）</span></div><div class="line"><span class="constant">String safeName</span> = WorkbookUtil.createSafeSheetName(<span class="string">"[O'Brien's sales*?]"</span>); <span class="comment">// 返回 " O'Brien's sales   "</span></div><div class="line"><span class="constant">Sheet sheet3</span> = wb.createSheet(safeName);</div><div class="line"><span class="constant"></span></div><div class="line">FileOutputStream fileOut = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="如何新建单元格">如何新建单元格</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="comment">//Workbook wb = new XSSFWorkbook();</span></div><div class="line"><span class="constant">CreationHelper createHelper</span> = wb.getCreationHelper();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个行并在该行创建一个单元格，行从0开始计数（Excel是从1开始）</span></div><div class="line"><span class="constant">Row row</span> = sheet.createRow((short)<span class="number">0</span>);</div><div class="line"><span class="comment">// 创建单元格并设置一个值</span></div><div class="line"><span class="constant">Cell cell</span> = row.createCell(<span class="number">0</span>);</div><div class="line">cell.setCellValue(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 或者在一条语句中同时创建单元格并设置单元格的值</span></div><div class="line">row.createCell(<span class="number">1</span>).setCellValue(<span class="number">1.2</span>);</div><div class="line">row.createCell(<span class="number">2</span>).setCellValue(</div><div class="line">     createHelper.createRichTextString(<span class="string">"This is a string"</span>));</div><div class="line">row.createCell(<span class="number">3</span>).setCellValue(<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line"><span class="constant">FileOutputStream fileOut</span> = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="如何新建日期单元格">如何新建日期单元格</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="comment">//Workbook wb = new XSSFWorkbook();</span></div><div class="line"><span class="constant">CreationHelper createHelper</span> = wb.getCreationHelper();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个行并在该行创建一个单元格，行从0开始计数</span></div><div class="line"><span class="constant">Row row</span> = sheet.createRow(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建单元格并设置一个日期值。</span></div><div class="line"><span class="comment">// 第一个单元格没有设置日期样式</span></div><div class="line"><span class="constant">Cell cell</span> = row.createCell(<span class="number">0</span>);</div><div class="line">cell.setCellValue(new Date());</div><div class="line"></div><div class="line"><span class="comment">// 第二个单元格设置成日期（及时间）格式</span></div><div class="line"><span class="comment">// 修改内置的单元格样式会影响到其他单元格</span></div><div class="line"><span class="comment">// 所以需要用工作簿workbook创建一个新的单元格样式cell style</span></div><div class="line"><span class="constant">CellStyle cellStyle</span> = wb.createCellStyle();</div><div class="line">cellStyle.setDataFormat(</div><div class="line">    createHelper.createDataFormat().getFormat(<span class="string">"m/d/yy h:mm"</span>));</div><div class="line">cell = row.createCell(<span class="number">1</span>);</div><div class="line">cell.setCellValue(new Date());</div><div class="line">cell.setCellStyle(cellStyle);</div><div class="line"></div><div class="line"><span class="comment">// 你也可以用java.util.Calendar设置日期</span></div><div class="line">cell = row.createCell(<span class="number">2</span>);</div><div class="line">cell.setCellValue(Calendar.getInstance());</div><div class="line">cell.setCellStyle(cellStyle);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line"><span class="constant">FileOutputStream fileOut</span> = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="创建不同类型的单元格">创建不同类型的单元格</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Workbook wb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">Sheet sheet = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line">Row row = sheet.createRow((<span class="keyword">short</span>)<span class="number">2</span>);</div><div class="line">row.createCell(<span class="number">0</span>).setCellValue(<span class="number">1.1</span>);</div><div class="line">row.createCell(<span class="number">1</span>).setCellValue(<span class="keyword">new</span> Date());</div><div class="line">row.createCell(<span class="number">2</span>).setCellValue(Calendar.getInstance());</div><div class="line">row.createCell(<span class="number">3</span>).setCellValue(<span class="string">"a string"</span>);</div><div class="line">row.createCell(<span class="number">4</span>).setCellValue(<span class="keyword">true</span>);</div><div class="line">row.createCell(<span class="number">5</span>).setCellType(Cell.CELL_TYPE_ERROR);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.<span class="keyword">write</span>(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="文件vs输入流">文件vs输入流</h2>
<p>当打开一个工作簿时，.xls的HSSFWorkbook或者.xlsx的XSSFWorkbook都可以从一个文件（File）或者文件流（InputStream）加载。用InputStream会缓存整个文件需要更多内存，而File对象消耗的内存更少。</p>
<p>如果用WorkbookFactory，不管哪种加载方式都很容易使用：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用文件</span></div><div class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"MyExcel.xls"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 使用文件流，这种方式会消耗更多内存</span></div><div class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"MyExcel.xlsx"</span>));</div></pre></td></tr></table></figure>

<p>如果直接使用HSSFWorkbook或者XSSFWorkbook，你需要仔细研究NPOIFSFileSystem或者OPCPackage，以控制整个生命周期（包括完成操作以后关闭文件）：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HSSFWorkbook, 文件的方式</span></div><div class="line">NPOIFSFileSytem fs <span class="subst">=</span> <span class="literal">new</span> NPOIFSFileSystem(<span class="literal">new</span> File(<span class="string">"file.xls"</span>));</div><div class="line">HSSFWorkbook wb <span class="subst">=</span> <span class="literal">new</span> HSSFWorkbook(fs<span class="built_in">.</span>getRoot());</div><div class="line"><span class="attribute">...</span><span class="built_in">.</span></div><div class="line">fs<span class="built_in">.</span>close();</div><div class="line"></div><div class="line"><span class="comment">// HSSFWorkbook, 使用文件流，这种方式会消耗更多内存</span></div><div class="line">NPOIFSFileSytem fs <span class="subst">=</span> <span class="literal">new</span> NPOIFSFileSystem(myInputStream);</div><div class="line">HSSFWorkbook wb <span class="subst">=</span> <span class="literal">new</span> HSSFWorkbook(fs<span class="built_in">.</span>getRoot());</div><div class="line"></div><div class="line"><span class="comment">// XSSFWorkbook, 文件的方式</span></div><div class="line">OPCPackage pkg <span class="subst">=</span> OPCPackage<span class="built_in">.</span>open(<span class="literal">new</span> File(<span class="string">"file.xlsx"</span>));</div><div class="line">XSSFWorkbook wb <span class="subst">=</span> <span class="literal">new</span> XSSFWorkbook(pkg);</div><div class="line"><span class="attribute">...</span><span class="built_in">.</span></div><div class="line">pkg<span class="built_in">.</span>close();</div><div class="line"></div><div class="line"><span class="comment">// XSSFWorkbook, 使用文件流，这种方式会消耗更多内存</span></div><div class="line">OPCPackage pkg <span class="subst">=</span> OPCPackage<span class="built_in">.</span>open(myInputStream);</div><div class="line">XSSFWorkbook wb <span class="subst">=</span> <span class="literal">new</span> XSSFWorkbook(pkg);</div><div class="line"><span class="attribute">...</span><span class="built_in">.</span></div><div class="line">pkg<span class="built_in">.</span>close();</div></pre></td></tr></table></figure>

<h2 id="各种对齐方式的示例">各种对齐方式的示例</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args)  <span class="keyword">throws</span> Exception {</div><div class="line">    Workbook wb = <span class="keyword">new</span> XSSFWorkbook(); <span class="comment">// 或者 new HSSFWorkbook();</span></div><div class="line"></div><div class="line">    Sheet sheet = wb.createSheet();</div><div class="line">    Row row = sheet.createRow((<span class="keyword">short</span>) <span class="number">2</span>);</div><div class="line">    row.setHeightInPoints(<span class="number">30</span>);</div><div class="line"></div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">0</span>, CellStyle.ALIGN_CENTER, CellStyle.VERTICAL_BOTTOM);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">1</span>, CellStyle.ALIGN_CENTER_SELECTION, CellStyle.VERTICAL_BOTTOM);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">2</span>, CellStyle.ALIGN_FILL, CellStyle.VERTICAL_CENTER);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">3</span>, CellStyle.ALIGN_GENERAL, CellStyle.VERTICAL_CENTER);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">4</span>, CellStyle.ALIGN_JUSTIFY, CellStyle.VERTICAL_JUSTIFY);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">5</span>, CellStyle.ALIGN_LEFT, CellStyle.VERTICAL_TOP);</div><div class="line">    createCell(wb, row, (<span class="keyword">short</span>) <span class="number">6</span>, CellStyle.ALIGN_RIGHT, CellStyle.VERTICAL_TOP);</div><div class="line"></div><div class="line">    <span class="comment">// 输出到文件</span></div><div class="line">    FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"xssf-align.xlsx"</span>);</div><div class="line">    wb.write(fileOut);</div><div class="line">    fileOut.close();</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 创建一个单元格并把它按指定方式对齐</div><div class="line"> *</div><div class="line"> *<span class="javadoctag"> @param</span> wb     工作簿workbook</div><div class="line"> *<span class="javadoctag"> @param</span> row    待创建单元格的行</div><div class="line"> *<span class="javadoctag"> @param</span> column 创建单元格的列顺序</div><div class="line"> *<span class="javadoctag"> @param</span> halign 单元格的水平对齐方式</div><div class="line"> *<span class="javadoctag"> @param</span> valign 单元格的竖直对齐方式</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createCell</span>(Workbook wb, Row row, <span class="keyword">short</span> column, <span class="keyword">short</span> halign, <span class="keyword">short</span> valign) {</div><div class="line">    Cell cell = row.createCell(column);</div><div class="line">    cell.setCellValue(<span class="string">"Align It"</span>);</div><div class="line">    CellStyle cellStyle = wb.createCellStyle();</div><div class="line">    cellStyle.setAlignment(halign);</div><div class="line">    cellStyle.setVerticalAlignment(valign);</div><div class="line">    cell.setCellStyle(cellStyle);</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="边框的使用">边框的使用</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一行并在该行创建一些单元格</span></div><div class="line"><span class="constant">Row row</span> = sheet.createRow(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个单元格并赋值</span></div><div class="line"><span class="constant">Cell cell</span> = row.createCell(<span class="number">1</span>);</div><div class="line">cell.setCellValue(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使单元格被边框包住</span></div><div class="line"><span class="constant">CellStyle style</span> = wb.createCellStyle();</div><div class="line">style.setBorderBottom(CellStyle.BORDER_THIN);</div><div class="line">style.setBottomBorderColor(IndexedColors.BLACK.getIndex());</div><div class="line">style.setBorderLeft(CellStyle.BORDER_THIN);</div><div class="line">style.setLeftBorderColor(IndexedColors.GREEN.getIndex());</div><div class="line">style.setBorderRight(CellStyle.BORDER_THIN);</div><div class="line">style.setRightBorderColor(IndexedColors.BLUE.getIndex());</div><div class="line">style.setBorderTop(CellStyle.BORDER_MEDIUM_DASHED);</div><div class="line">style.setTopBorderColor(IndexedColors.BLACK.getIndex());</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line"><span class="constant">FileOutputStream fileOut</span> = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="遍历行和单元格">遍历行和单元格</h2>
<p>有时候你需要遍历工作表的所有行，或者一行的所有单元格。行Row内部定义了一个CellIterator来迭代所有的单元格（通过row.cellIterator()来取得迭代器）。同样的，工作表也提供了一个rowIterator()方法来获得迭代器。由于这些实现了java.lang.Iterable接口，所以可以用foreach来循环遍历。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (Row row : sheet) {</div><div class="line">  <span class="keyword">for</span> (Cell cell : row) {</div><div class="line">    <span class="comment">// 做一些处理</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="在控制缺失/空白的单元格时遍历单元格">在控制缺失/空白的单元格时遍历单元格</h2>
<p>在有些情景中，你需要访问到每一个单元格，并自己处理那些缺失或空白的单元格，而不仅仅是那些在文件中有定义的（CellIterator只返回在文件中有定义的，主要是值和样式）。<br>在这些情境中，你需要先拿到开始和结束列的信息，然后调用getCell(int, MissingCellPolicy)来拿到这个单元格。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 决定处理哪些行</span></div><div class="line"><span class="keyword">int</span> rowStart = Math.<span class="built_in">min</span>(<span class="number">15</span>, sheet.getFirstRowNum());</div><div class="line"><span class="keyword">int</span> rowEnd = Math.<span class="built_in">max</span>(<span class="number">1400</span>, sheet.getLastRowNum());</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> rowNum = rowStart; rowNum &lt; rowEnd; rowNum++) {</div><div class="line">   Row r = sheet.getRow(rowNum);</div><div class="line"></div><div class="line">   <span class="keyword">int</span> lastColumn = Math.<span class="built_in">max</span>(r.getLastCellNum(), MY_MINIMUM_COLUMN_COUNT);</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> cn = <span class="number">0</span>; cn &lt; lastColumn; cn++) {</div><div class="line">      Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);</div><div class="line">      <span class="keyword">if</span> (c == null) {</div><div class="line">         <span class="comment">// 这个单元格是空的</span></div><div class="line">      } <span class="keyword">else</span> {</div><div class="line">         <span class="comment">// 对单元格的内容做一些处理</span></div><div class="line">      }</div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="取得单元格内容">取得单元格内容</h2>
<p>为了取得单元格内容，你首先需要知道该单元格是什么类型（比如向一个字符串单元格取数字值会触发NumberFormatException）。所以你需要先知道单元格类型，再调用相应的方法取值。<br>在下面的代码中，我们遍历一个工作表中每一个单元格，讲单元格的坐标（如A3）和单元格的内容打印出来。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import org.apache.poi.ss.usermodel.*;</span></div><div class="line"></div><div class="line">Sheet sheet1 = wb.getSheetAt(<span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (Row row : sheet1) {</div><div class="line">    <span class="keyword">for</span> (Cell cell : row) {</div><div class="line">        CellReference cellRef = <span class="keyword">new</span> CellReference(row.getRowNum(), cell.getColumnIndex());</div><div class="line">        System.<span class="keyword">out</span>.print(cellRef.formatAsString());</div><div class="line">        System.<span class="keyword">out</span>.print(<span class="string">" - "</span>);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (cell.getCellType()) {</div><div class="line">            <span class="keyword">case</span> Cell.CELL_TYPE_STRING:</div><div class="line">                System.<span class="keyword">out</span>.println(cell.getRichStringCellValue().getString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Cell.CELL_TYPE_NUMERIC:</div><div class="line">                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) {</div><div class="line">                    System.<span class="keyword">out</span>.println(cell.getDateCellValue());</div><div class="line">                } <span class="keyword">else</span> {</div><div class="line">                    System.<span class="keyword">out</span>.println(cell.getNumericCellValue());</div><div class="line">                }</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Cell.CELL_TYPE_BOOLEAN:</div><div class="line">                System.<span class="keyword">out</span>.println(cell.getBooleanCellValue());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Cell.CELL_TYPE_FORMULA:</div><div class="line">                System.<span class="keyword">out</span>.println(cell.getCellFormula());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                System.<span class="keyword">out</span>.println();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="文本提取(Text_Extraction)">文本提取(Text Extraction)</h2>
<p>标准的ExcelExtractor应该可以满足大多数的文本提取需求。</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">InputStream inp = <span class="keyword">new</span> FileInputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> POIFSFileSystem(inp));</div><div class="line">ExcelExtractor extractor = <span class="keyword">new</span> ExcelExtractor(wb);</div><div class="line"></div><div class="line">extractor.setFormulasNotResults(<span class="literal">true</span>);</div><div class="line">extractor.setIncludeSheetNames(<span class="literal">false</span>);</div><div class="line"><span class="built_in">String</span> <span class="keyword">text</span> = extractor.getText();</div></pre></td></tr></table></figure>

<p>对于一些特殊的文本提取，比如xls转csv，可以参考</p>
<pre><code><span class="regexp">/src/</span>examples<span class="regexp">/src/</span>org<span class="regexp">/apache/</span>poi<span class="regexp">/hssf/</span>eventusermodel<span class="regexp">/examples/</span>XLS2CSVmra.java
</code></pre><h2 id="填充以及颜色">填充以及颜色</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new XSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一行并在该行创建一些单元格</span></div><div class="line"><span class="constant">Row row</span> = sheet.createRow((short) <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Aqua颜色的背景</span></div><div class="line"><span class="constant">CellStyle style</span> = wb.createCellStyle();</div><div class="line">style.setFillBackgroundColor(IndexedColors.AQUA.getIndex());</div><div class="line">style.setFillPattern(CellStyle.BIG_SPOTS);</div><div class="line"><span class="constant">Cell cell</span> = row.createCell((short) <span class="number">1</span>);</div><div class="line">cell.setCellValue(<span class="string">"X"</span>);</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line"><span class="comment">// 橙色前景，前景是用前景色填充而不是字体颜色</span></div><div class="line">style = wb.createCellStyle();</div><div class="line">style.setFillForegroundColor(IndexedColors.ORANGE.getIndex());</div><div class="line">style.setFillPattern(CellStyle.SOLID_FOREGROUND);</div><div class="line">cell = row.createCell((short) <span class="number">2</span>);</div><div class="line">cell.setCellValue(<span class="string">"X"</span>);</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line"><span class="constant">FileOutputStream fileOut</span> = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>


<h2 id="合并单元格">合并单元格</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Workbook wb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">Sheet sheet = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line">Row row = sheet.createRow((<span class="keyword">short</span>) <span class="number">1</span>);</div><div class="line">Cell cell = row.createCell((<span class="keyword">short</span>) <span class="number">1</span>);</div><div class="line">cell.setCellValue(<span class="string">"This is a test of merging"</span>);</div><div class="line"></div><div class="line">sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(</div><div class="line">        <span class="number">1</span>, <span class="comment">//起始行（从0开始算）</span></div><div class="line">        <span class="number">1</span>, <span class="comment">//终止行（从0开始算）</span></div><div class="line">        <span class="number">1</span>, <span class="comment">//起始列（从0开始算）</span></div><div class="line">        <span class="number">2</span>  <span class="comment">//终止列（从0开始算）</span></div><div class="line">));</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.<span class="keyword">write</span>(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="字体的使用">字体的使用</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一行并在该行创建一些单元格</span></div><div class="line"><span class="constant">Row row</span> = sheet.createRow(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个新的字体并修改它</span></div><div class="line"><span class="constant">Font font</span> = wb.createFont();</div><div class="line">font.setFontHeightInPoints((short)<span class="number">24</span>);</div><div class="line">font.setFontName(<span class="string">"Courier New"</span>);</div><div class="line">font.setItalic(<span class="literal">true</span>);</div><div class="line">font.setStrikeout(<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 字体需要被设置到样式中，所以需要新建一个样式来使用</span></div><div class="line"><span class="constant">CellStyle style</span> = wb.createCellStyle();</div><div class="line">style.setFont(font);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个单元格并赋值</span></div><div class="line"><span class="constant">Cell cell</span> = row.createCell(<span class="number">1</span>);</div><div class="line">cell.setCellValue(<span class="string">"This is a test of fonts"</span>);</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line"><span class="comment">// 输出到文件</span></div><div class="line"><span class="constant">FileOutputStream fileOut</span> = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<p>注意，一个工作簿最多能创建32767（short类型的最大正数值）个不同的字体。在应用中，你需要尽量重用这些字体，而不是为每一个单元格新建一个字体。例如：</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Wrong:</div><div class="line"></div><div class="line">    for (int <span class="variable">i =</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {</div><div class="line">        Row <span class="variable">row =</span> sheet.createRow(i);</div><div class="line">        Cell <span class="variable">cell =</span> row.createCell((short) <span class="number">0</span>);</div><div class="line"></div><div class="line">        CellStyle <span class="variable">style =</span> workbook.createCellStyle();</div><div class="line">        Font <span class="variable">font =</span> workbook.createFont();</div><div class="line">        font.setBoldweight(Font.BOLDWEIGHT_BOLD);</div><div class="line">        style.setFont(font);</div><div class="line">        cell.setCellStyle(style);</div><div class="line">    }</div><div class="line">    </div><div class="line">Correct:</div><div class="line"></div><div class="line">    CellStyle <span class="variable">style =</span> workbook.createCellStyle();</div><div class="line">    Font <span class="variable">font =</span> workbook.createFont();</div><div class="line">    font.setBoldweight(Font.BOLDWEIGHT_BOLD);</div><div class="line">    style.setFont(font);</div><div class="line">    for (int <span class="variable">i =</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {</div><div class="line">        Row <span class="variable">row =</span> sheet.createRow(i);</div><div class="line">        Cell <span class="variable">cell =</span> row.createCell((short) <span class="number">0</span>);</div><div class="line">        cell.setCellStyle(style);</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="使用自定义颜色">使用自定义颜色</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">HSSF:</div><div class="line"></div><div class="line">    HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">    HSSFSheet sheet = wb.createSheet();</div><div class="line">    HSSFRow row = sheet.createRow((<span class="keyword">short</span>) <span class="number">0</span>);</div><div class="line">    HSSFCell cell = row.createCell((<span class="keyword">short</span>) <span class="number">0</span>);</div><div class="line">    cell.setCellValue(<span class="string">"Default Palette"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 像之前的例子一样，使用标准调色板中的颜色</span></div><div class="line">    <span class="comment">// 这里将使用绿黄色背景和红色文字</span></div><div class="line"></div><div class="line">    HSSFCellStyle style = wb.createCellStyle();</div><div class="line">    style.setFillForegroundColor(HSSFColor.LIME.index);</div><div class="line">    style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</div><div class="line"></div><div class="line">    HSSFFont font = wb.createFont();</div><div class="line">    font.setColor(HSSFColor.RED.index);</div><div class="line">    style.setFont(font);</div><div class="line"></div><div class="line">    cell.setCellStyle(style);</div><div class="line"></div><div class="line">    <span class="comment">// 用默认调色板保存</span></div><div class="line">    FileOutputStream <span class="keyword">out</span> = <span class="keyword">new</span> FileOutputStream(<span class="string">"default_palette.xls"</span>);</div><div class="line">    wb.write(<span class="keyword">out</span>);</div><div class="line">    <span class="keyword">out</span>.close();</div><div class="line"></div><div class="line">    <span class="comment">// 现在用freebsd.org的颜色替换调色板中的红色和绿黄色</span></div><div class="line"></div><div class="line">    cell.setCellValue(<span class="string">"Modified Palette"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 为工作簿创建一个自定义调色板</span></div><div class="line">    HSSFPalette palette = wb.getCustomPalette();</div><div class="line"></div><div class="line">    <span class="comment">// 用freebsd.org的红色替换标准红色</span></div><div class="line">    palette.setColorAtIndex(HSSFColor.RED.index,</div><div class="line">            (<span class="keyword">byte</span>) <span class="number">153</span>,  <span class="comment">//RGB 红色 (0-255)</span></div><div class="line">            (<span class="keyword">byte</span>) <span class="number">0</span>,    <span class="comment">//RGB 绿色</span></div><div class="line">            (<span class="keyword">byte</span>) <span class="number">0</span>     <span class="comment">//RGB 蓝色</span></div><div class="line">    );</div><div class="line">    <span class="comment">// 用freebsd.org金色替换绿黄色</span></div><div class="line">    palette.setColorAtIndex(HSSFColor.LIME.index, (<span class="keyword">byte</span>) <span class="number">255</span>, (<span class="keyword">byte</span>) <span class="number">204</span>, (<span class="keyword">byte</span>) <span class="number">102</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 用修改过的调色板保存</span></div><div class="line">    <span class="comment">// 注意不管之前在哪里用到了红色和绿黄色，现在都会变成新的颜色（译者注：同一个工作簿有效）</span></div><div class="line">    <span class="keyword">out</span> = <span class="keyword">new</span> FileOutputStream(<span class="string">"modified_palette.xls"</span>);</div><div class="line">    wb.write(<span class="keyword">out</span>);</div><div class="line">    <span class="keyword">out</span>.close();</div><div class="line">                    </div><div class="line">XSSF:</div><div class="line"></div><div class="line">    XSSFWorkbook wb = <span class="keyword">new</span> XSSFWorkbook();</div><div class="line">    XSSFSheet sheet = wb.createSheet();</div><div class="line">    XSSFRow row = sheet.createRow(<span class="number">0</span>);</div><div class="line">    XSSFCell cell = row.createCell( <span class="number">0</span>);</div><div class="line">    cell.setCellValue(<span class="string">"custom XSSF colors"</span>);</div><div class="line"></div><div class="line">    XSSFCellStyle style1 = wb.createCellStyle();</div><div class="line">    style1.setFillForegroundColor(<span class="keyword">new</span> XSSFColor(<span class="keyword">new</span> java.awt.Color(<span class="number">128</span>, <span class="number">0</span>, <span class="number">128</span>)));</div><div class="line">    style1.setFillPattern(CellStyle.SOLID_FOREGROUND);</div></pre></td></tr></table></figure>

<h2 id="读取并覆盖工作簿">读取并覆盖工作簿</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">InputStream <span class="variable">inp =</span> new FileInputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">//InputStream <span class="variable">inp =</span> new FileInputStream(<span class="string">"workbook.xlsx"</span>);</div><div class="line"></div><div class="line">Workbook <span class="variable">wb =</span> WorkbookFactory.create(inp);</div><div class="line">Sheet <span class="variable">sheet =</span> wb.getSheetAt(<span class="number">0</span>);</div><div class="line">Row <span class="variable">row =</span> sheet.getRow(<span class="number">2</span>);</div><div class="line">Cell <span class="variable">cell =</span> row.getCell(<span class="number">3</span>);</div><div class="line"><span class="keyword">if</span> (<span class="variable">cell =</span>= <span class="constant">null</span>)</div><div class="line">    <span class="variable">cell =</span> row.createCell(<span class="number">3</span>);</div><div class="line">cell.setCellType(Cell.CELL_TYPE_STRING);</div><div class="line">cell.setCellValue(<span class="string">"a test"</span>);</div><div class="line"></div><div class="line">// 输出到文件</div><div class="line">FileOutputStream <span class="variable">fileOut =</span> new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="在单元格中使用换行">在单元格中使用换行</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new XSSFWorkbook();   <span class="comment">// 或者 new HSSFWorkbook();</span></div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet();</div><div class="line"><span class="constant"></span></div><div class="line">Row row = sheet.createRow(<span class="number">2</span>);</div><div class="line"><span class="constant">Cell cell</span> = row.createCell(<span class="number">2</span>);</div><div class="line">cell.setCellValue(<span class="string">"用\n来创建新行"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 你需要在单元格样式中将wrap设置为true才能使换行符生效</span></div><div class="line"><span class="constant">CellStyle cs</span> = wb.createCellStyle();</div><div class="line">cs.setWrapText(<span class="literal">true</span>);</div><div class="line">cell.setCellStyle(cs);</div><div class="line"></div><div class="line"><span class="comment">// 增加行高以容纳两行文本</span></div><div class="line">row.setHeightInPoints((<span class="number">2</span>*sheet.getDefaultRowHeightInPoints()));</div><div class="line"></div><div class="line"><span class="comment">// 自动调整列宽（译者注：中文时列宽计算不准）</span></div><div class="line">sheet.autoSizeColumn((short)<span class="number">2</span>);</div><div class="line"><span class="constant"></span></div><div class="line">FileOutputStream fileOut = new FileOutputStream(<span class="string">"ooxml-newlines.xlsx"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="数据格式">数据格式</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Workbook <span class="variable">wb =</span> new HSSFWorkbook();</div><div class="line">Sheet <span class="variable">sheet =</span> wb.createSheet(<span class="string">"format sheet"</span>);</div><div class="line">CellStyle style;</div><div class="line">DataFormat <span class="variable">format =</span> wb.createDataFormat();</div><div class="line">Row row;</div><div class="line">Cell cell;</div><div class="line">short <span class="variable">rowNum =</span> <span class="number">0</span>;</div><div class="line">short <span class="variable">colNum =</span> <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="variable">row =</span> sheet.createRow(rowNum++);</div><div class="line"><span class="variable">cell =</span> row.createCell(colNum);</div><div class="line">cell.setCellValue(<span class="number">11111.25</span>);</div><div class="line"><span class="variable">style =</span> wb.createCellStyle();</div><div class="line">style.setDataFormat(format.getFormat(<span class="string">"0.0"</span>));</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line"><span class="variable">row =</span> sheet.createRow(rowNum++);</div><div class="line"><span class="variable">cell =</span> row.createCell(colNum);</div><div class="line">cell.setCellValue(<span class="number">11111.25</span>);</div><div class="line"><span class="variable">style =</span> wb.createCellStyle();</div><div class="line">style.setDataFormat(format.getFormat(<span class="string">"#,##0.0000"</span>));</div><div class="line">cell.setCellStyle(style);</div><div class="line"></div><div class="line">FileOutputStream <span class="variable">fileOut =</span> new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="使工作表适应到一页">使工作表适应到一页</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Workbook wb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">Sheet sheet = wb.createSheet(<span class="string">"format sheet"</span>);</div><div class="line">PrintSetup <span class="keyword">ps</span> = sheet.getPrintSetup();</div><div class="line"></div><div class="line">sheet.setAutobreaks(true);</div><div class="line"></div><div class="line"><span class="keyword">ps</span>.setFitHeight((short)<span class="number">1</span>);</div><div class="line"><span class="keyword">ps</span>.setFitWidth((short)<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">// 创建一些行和单元格</div><div class="line"></div><div class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.<span class="keyword">write</span>(fileOut);</div><div class="line">fileOut.<span class="keyword">close</span>();</div></pre></td></tr></table></figure>

<h2 id="设置打印区域">设置打印区域</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"Sheet1"</span>);</div><div class="line"><span class="comment">// 为第一个工作表设置打印区域</span></div><div class="line">wb.setPrintArea(<span class="number">0</span>, <span class="string">"$A$1:$C$2"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 也可以像这样</span></div><div class="line">wb.setPrintArea(</div><div class="line">        <span class="number">0</span>, <span class="comment">// 工作表序号</span></div><div class="line">        <span class="number">0</span>, <span class="comment">// 起始列</span></div><div class="line">        <span class="number">1</span>, <span class="comment">// 结束列</span></div><div class="line">        <span class="number">0</span>, <span class="comment">// 起始行</span></div><div class="line">        <span class="number">0</span>  <span class="comment">// 结束行</span></div><div class="line">);</div><div class="line"><span class="constant"></span></div><div class="line">FileOutputStream fileOut = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="在页脚设置页码">在页脚设置页码</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook(); <span class="comment">// 或者 new XSSFWorkbook();</span></div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"format sheet"</span>);</div><div class="line"><span class="constant">Footer footer</span> = sheet.getFooter();</div><div class="line"></div><div class="line">footer.setRight( <span class="string">"Page "</span> + HeaderFooter.page() + <span class="string">" of "</span> + HeaderFooter.numPages() );</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 创建一些行和单元格</span></div><div class="line"><span class="constant"></span></div><div class="line">FileOutputStream fileOut = new FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb.write(fileOut);</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="使用便捷方法">使用便捷方法</h2>
<p>便捷方法提供了不显示创建新样式来设置边框、合并区域以及改变样式属性的特性。</p>
<figure class="highlight [java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();  <span class="comment">// 或者 new XSSFWorkbook()</span></div><div class="line"><span class="constant">Sheet sheet1</span> = wb.createSheet( <span class="string">"new sheet"</span> );</div><div class="line"></div><div class="line"><span class="comment">// 创建合并区域</span></div><div class="line"><span class="constant">Row row</span> = sheet1.createRow( <span class="number">1</span> );</div><div class="line"><span class="constant">Row row2</span> = sheet1.createRow( <span class="number">2</span> );</div><div class="line"><span class="constant">Cell cell</span> = row.createCell( <span class="number">1</span> );</div><div class="line">cell.setCellValue( <span class="string">"This is a test of merging"</span> );</div><div class="line"><span class="constant">CellRangeAddress region</span> = CellRangeAddress.valueOf(<span class="string">"B2:E5"</span>);</div><div class="line">sheet1.addMergedRegion( region );</div><div class="line"></div><div class="line"><span class="comment">// 设置边框和边框颜色</span></div><div class="line">final short borderMediumDashed = CellStyle.BORDER_MEDIUM_DASHED;</div><div class="line"><span class="constant">RegionUtil.setBorderBottom( borderMediumDashed,</span></div><div class="line">    region, sheet1, wb );</div><div class="line">RegionUtil.setBorderTop( borderMediumDashed,</div><div class="line">    region, sheet1, wb );</div><div class="line">RegionUtil.setBorderLeft( borderMediumDashed,</div><div class="line">    region, sheet1, wb );</div><div class="line">RegionUtil.setBorderRight( borderMediumDashed,</div><div class="line">    region, sheet1, wb );</div><div class="line">RegionUtil.setBottomBorderColor(IndexedColors.AQUA.getIndex(), region, sheet1, wb);</div><div class="line">RegionUtil.setTopBorderColor(IndexedColors.AQUA.getIndex(), region, sheet1, wb);</div><div class="line">RegionUtil.setLeftBorderColor(IndexedColors.AQUA.getIndex(), region, sheet1, wb);</div><div class="line">RegionUtil.setRightBorderColor(IndexedColors.AQUA.getIndex(), region, sheet1, wb);</div><div class="line"></div><div class="line">// HSSFCellUtil的使用</div><div class="line">CellStyle style = wb.createCellStyle();</div><div class="line">style.setIndention((short)<span class="number">4</span>);</div><div class="line"><span class="constant">CellUtil.createCell(row, 8, "This is the value of the cell", style);</span></div><div class="line">Cell cell2 = CellUtil.createCell( row2, <span class="number">8</span>, <span class="string">"This is the value of the cell"</span>);</div><div class="line"><span class="constant">CellUtil.setAlignment(cell2, wb, CellStyle.ALIGN_CENTER);</span></div><div class="line"></div><div class="line">// 输出到文件</div><div class="line">FileOutputStream fileOut = new FileOutputStream( <span class="string">"workbook.xls"</span> );</div><div class="line">wb.write( fileOut );</div><div class="line">fileOut.close();</div></pre></td></tr></table></figure>

<h2 id="在工作表中上移或下移行">在工作表中上移或下移行</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"row sheet"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一些行和单元格</span></div><div class="line"></div><div class="line"><span class="comment">// 将6-11行上移到工作表的顶部（0-5行）</span></div><div class="line">sheet.shiftRows(<span class="number">5</span>, <span class="number">10</span>, -<span class="number">5</span>);</div></pre></td></tr></table></figure>

<h2 id="将工作表设置成选中">将工作表设置成选中</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet</span> = wb.createSheet(<span class="string">"row sheet"</span>);</div><div class="line">sheet.setSelected(<span class="literal">true</span>);</div></pre></td></tr></table></figure>

<h2 id="设置缩放">设置缩放</h2>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Workbook wb</span> = new HSSFWorkbook();</div><div class="line"><span class="constant">Sheet sheet1</span> = wb.createSheet(<span class="string">"new sheet"</span>);</div><div class="line">sheet1.setZoom(<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 缩放到75%</span></div></pre></td></tr></table></figure>

<h2 id="页眉和页脚">页眉和页脚</h2>
<p>例子是页眉的，也可以直接用在页脚上</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Workbook wb <span class="subst">=</span> <span class="literal">new</span> HSSFWorkbook();</div><div class="line">Sheet sheet <span class="subst">=</span> wb<span class="built_in">.</span>createSheet(<span class="string">"new sheet"</span>);</div><div class="line"></div><div class="line"><span class="keyword">Header</span> <span class="keyword">header</span> <span class="subst">=</span> sheet<span class="built_in">.</span>getHeader();</div><div class="line"><span class="keyword">header</span><span class="built_in">.</span>setCenter(<span class="string">"Center Header"</span>);</div><div class="line"><span class="keyword">header</span><span class="built_in">.</span>setLeft(<span class="string">"Left Header"</span>);</div><div class="line"><span class="keyword">header</span><span class="built_in">.</span>setRight(HSSFHeader<span class="built_in">.</span>font(<span class="string">"Stencil-Normal"</span>, <span class="string">"Italic"</span>) <span class="subst">+</span></div><div class="line">                HSSFHeader<span class="built_in">.</span>fontSize((short) <span class="number">16</span>) <span class="subst">+</span> <span class="string">"Right w/ Stencil-Normal Italic font and size 16"</span>);</div><div class="line"></div><div class="line">FileOutputStream fileOut <span class="subst">=</span> <span class="literal">new</span> FileOutputStream(<span class="string">"workbook.xls"</span>);</div><div class="line">wb<span class="built_in">.</span>write(fileOut);</div><div class="line">fileOut<span class="built_in">.</span>close();</div></pre></td></tr></table></figure>

<h2 id="其他">其他</h2>
<p>本文并没有全文翻译，还有一些不太常用的功能可以参考原文</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自 <a href="http://poi.apache.org/spreadsheet/quick-guide.html" target="_blank" rel="external">Busy Developers’ Guide to HSSF and XSSF]]>
    </summary>
    
      <category term="Java POI" scheme="http://elvin.im/tags/Java-POI/"/>
    
      <category term="Java" scheme="http://elvin.im/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java POI使用备忘]]></title>
    <link href="http://elvin.im/2014/11/16/Java-POI%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/"/>
    <id>http://elvin.im/2014/11/16/Java-POI使用备忘/</id>
    <published>2014-11-16T12:16:41.000Z</published>
    <updated>2014-11-17T15:16:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="修改单元格的样式">修改单元格的样式</h2>
<p>比如将单元格背景色变灰</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="constant">CellStyle cellStyle</span> = cell.getCellStyle();</div><div class="line"><span class="constant">CellStyle greyCellStyle</span> = workbook.createCellStyle();</div><div class="line">greyCellStyle.cloneStyleFrom(cellStyle);    <span class="comment">//先复制原有样式，再修改</span></div><div class="line">greyCellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);</div><div class="line">greyCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</div><div class="line">cell.setCellStyle(greyCellStyle);</div></pre></td></tr></table></figure>

<p>因为在读取excel的时候，POI通过getCellStyle获取的单元格样式可能是被多个相同样式的单元格共享的，直接修改旧样式会造成混乱。所以这里先复制原有样式，再修改。</p>
<h1 id="设置自定义背景颜色">设置自定义背景颜色</h1>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">style.setFillPattern(CellStyle.SOLID_FOREGROUND);</div><div class="line"><span class="keyword">if</span> (workbook <span class="keyword">instanceof</span> HSSFWorkbook) {</div><div class="line">    HSSFWorkbook hssfWorkbook = (HSSFWorkbook) workbook;</div><div class="line">    HSSFPalette customPalette = hssfWorkbook.getCustomPalette();</div><div class="line">    customPalette.setColorAtIndex(HSSFColor.BLUE.index, (<span class="keyword">byte</span>) <span class="number">0</span>, (<span class="keyword">byte</span>) <span class="number">102</span>, (<span class="keyword">byte</span>) <span class="number">153</span>);</div><div class="line">    style.setFillForegroundColor(HSSFColor.BLUE.index);</div><div class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (workbook <span class="keyword">instanceof</span> XSSFWorkbook) {</div><div class="line">    XSSFCellStyle xssfCellStyle = (XSSFCellStyle) style;</div><div class="line">    XSSFColor newColor = <span class="keyword">new</span> XSSFColor(<span class="keyword">new</span> java.awt.Color(<span class="number">0</span>, <span class="number">102</span>, <span class="number">153</span>));</div><div class="line">    xssfCellStyle.setFillForegroundColor(newColor);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="修改单元格的样式">修改单元格的样式</h2>
<p>比如将单元格背景色变灰</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</]]>
    </summary>
    
      <category term="Java POI" scheme="http://elvin.im/tags/Java-POI/"/>
    
      <category term="Java" scheme="http://elvin.im/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo在github搭建免费博客]]></title>
    <link href="http://elvin.im/2014/10/25/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    <id>http://elvin.im/2014/10/25/使用Hexo在github搭建免费博客/</id>
    <published>2014-10-25T05:14:15.000Z</published>
    <updated>2014-10-25T15:00:02.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo是一个基于NodeJS实现的博客框架，它可以解析由markdown写的文章并生成静态的HTML文件，而且可以更换不同的主题。<br>github pages可以免费托管静态页面，而且不限制流量，目前在国内访问还算稳定，是搭建博客的不错选择。</p>
<h2 id="准备环境">准备环境</h2>
<h3 id="注册github，创建仓库">注册github，创建仓库</h3>
<p>使用github需要先注册一个github账号，并创建一个名为username.github.io的仓库（username替换成注册的用户名）。<br><img src="http://elvin-blog.qiniudn.com/github-create-reposity.png" alt=""></p>
<h3 id="安装Git，NodeJS环境">安装Git，NodeJS环境</h3>
<p>不同平台Git和NodeJS的安装方法可以很容易搜索到，安装结束后在命令行输入以下命令。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现git版本号则说明git已经安装好，然后设置github的SSH-Key（也可以很容易搜索到）。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">ssh</span> -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>

<p>若出现以下结果，则说明SSH-Key已经设置完成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You<span class="attribute">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>

<p>然后验证NodeJS环境，输入以下命令。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现版本号，则说明环境已经OK。</p>
<h3 id="安装Hexo">安装Hexo</h3>
<p>Hexo是一个基于NodeJS的项目，可以使用npm命令来一键安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<p>待命令执行完执行以下命令检验安装结果</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现版本号则说明Hexo已经安装好。</p>
<h2 id="搭建博客">搭建博客</h2>
<p>到这里，环境搭建已经完成，下面就是使用Hexo创建博客了。</p>
<h3 id="创建Hexo项目">创建Hexo项目</h3>
<p>先创建一个目录，用于放置博客的项目文件。切换到该目录下执行下列命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p>通过该命令，初始化了一个Hexo项目</p>
<h3 id="本地测试">本地测试</h3>
<p>Hexo依赖了几个NodeJS模块，所以init后需要先安装一下那些模块。这个命令很多教程没有提到，但是没有这个命令会导致后续一些问题。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span></span></div></pre></td></tr></table></figure>

<p>上面提到过，Hexo最终会生成静态HTML文件发布。这个生成命令如下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div></pre></td></tr></table></figure>

<p>这个命令每次部署之前都需要先运行一次。部署前先在本地运行起来检查一次</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> s</div></pre></td></tr></table></figure>

<p>本地打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>查看，若是页面显示正常，就说明博客已经生成完成，可以准备部署了</p>
<h3 id="部署到github">部署到github</h3>
<p>用文本编辑器打开项目根目录下面的_config.yml，找到deploy项，配置如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: github</div><div class="line">  repository: git@github.com:username/username.github.<span class="built_in">io</span>.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>保存以后，再执行下列命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> d</div></pre></td></tr></table></figure>

<p>待命令执行成功以后，就可以打开<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>查看部署的结果了，应该跟之前本地的一样。到这里为止，Hexo博客就已经搭建完成了。</p>
<h2 id="写博客">写博客</h2>
<h3 id="创建新文章">创建新文章</h3>
<p>Hexo支持markdown，使用下列命令创建一篇新文章</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> n <span class="string">"新文章"</span></div></pre></td></tr></table></figure>

<p>该命令执行完以后，在source/_posts目录下面可以找到一个名为<em>新文章.md</em>的文件，使用markdown语法编写文件。</p>
<h3 id="部署到github-1">部署到github</h3>
<p>部署前需要先生成HTML，再部署</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div><div class="line">hexo d</div></pre></td></tr></table></figure>

<h2 id="定制">定制</h2>
<h3 id="换主题">换主题</h3>
<p>github上有很多Hexo主题，可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">这里</a>找到一个自己喜欢的主题。<br>安装主题的方式很简单，直接把主题的仓库clone到theme目录下就可以了，下面以jacman主题为例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/wuchong/jacman.git themes/jacman</div></pre></td></tr></table></figure>

<p>然后在_config.xml里面把theme改成jacman就好了。</p>
<h3 id="绑定域名">绑定域名</h3>
<p>在source目录下面创建一个名为CNAME的文件，把需要绑定的域名填写到文件里</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">example.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<ul>
<li>假如是像example.com这样的顶级域名，则在DNS设置里面加入A记录指向192.30.252.153和192.30.252.154</li>
<li>假如是像blog.example.com这样的二级域名，则在DNS设置里面加入CNAME记录指向username.github.io</li>
</ul>
<h3 id="添加评论功能">添加评论功能</h3>
<p>由于Hexo是静态博客，所以只能用第三方的评论系统。Hexo默认支持disqus，但在国内还是用多说会比较快一点。由于我使用的jacman本来就支持多说，只需要在主题的_config.yml里面把多说的配置改为true，然后把注册的多说用户名填上去就可以了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#### Comment</span></div><div class="line">duoshuo: </div><div class="line">  enable: <span class="literal">true</span>  ## duoshuo.com</div><div class="line">  short_name: wuchong   ##e.g. wuchong   <span class="keyword">for</span> duoshuo <span class="keyword">short</span> name.</div></pre></td></tr></table></figure>

<h3 id="添加统计功能">添加统计功能</h3>
<p>在国内还是使用百度统计比较稳定，在theme目录下相应的_config.yml中添加配置项</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">baidu_tongji</span>: <span class="string">true</span></div></pre></td></tr></table></figure>

<p>然后新建theme/jacman/layout/_partial/baidu_tongji.ejs，内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> (theme.baidu_tongji){ %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">#你的百度统计代码,可以从百度统计官网注册获得</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% } %&gt;</span></div></pre></td></tr></table></figure>

<p>最后在hexo/themes/jackman/_partial/footer.ejs中的最后添加如下代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="variable">%-</span> partial(<span class="string">'baidu_tongji'</span>) <span class="variable">%&gt;</span></div></pre></td></tr></table></figure>

<p>注意百度统计会被Ad-block拦截，测试的时候记得关闭Ad-block。</p>
<h3 id="更新友情链接">更新友情链接</h3>
<p>编辑heme/jacman/layout/_widget/links.ejs修改相应的链接和现实文本，要增加记录可以新加li标签。</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"linkslist"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"asidetitle"</span>&gt;</span><span class="vbscript">&lt;%= __(<span class="comment">'links') %&gt;</span></span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://wuchong.me"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">title</span>=<span class="value">"Cloud"</span>&gt;</span>Jark's Blog<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://hexo.io"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">title</span>=<span class="value">"Hexo"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="添加RSS功能">添加RSS功能</h3>
<p>hexo可以使用插件实现RSS功能，首先安装RSS插件到本地</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>

<p>然后开启RSS功能，编辑_config.yml添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-feed</div></pre></td></tr></table></figure>

<p>这样打开<a href="http://username.github.io/atom.xml" target="_blank" rel="external">http://username.github.io/atom.xml</a>应该就不是404了</p>
<p>参考链接：<br><a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a><br><a href="http://fy98.com/2014/03/03/build-blog-with-hexo" target="_blank" rel="external">http://fy98.com/2014/03/03/build-blog-with-hexo</a><br><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">http://zipperary.com/2013/06/02/hexo-guide-5/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo是一个基于NodeJS实现的博客框架，它可以解析由markdown写的文章并生成静态的HTML文件，而且可以更换不同的主题。<br>github pages可以免费托管静态页面，而且不限制流量，目前在国内访问还算稳定，是搭建博客的不错选择。</p>
<h2 id="]]>
    </summary>
    
      <category term="Hexo github" scheme="http://elvin.im/tags/Hexo-github/"/>
    
      <category term="github" scheme="http://elvin.im/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS闭包在ExtJS中的应用]]></title>
    <link href="http://elvin.im/2014/10/23/JS%E9%97%AD%E5%8C%85%E5%9C%A8ExtJS%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://elvin.im/2014/10/23/JS闭包在ExtJS中的应用/</id>
    <published>2014-10-23T14:00:00.000Z</published>
    <updated>2014-10-23T14:01:27.000Z</updated>
    <content type="html"><![CDATA[<p>ExtJS作为一个大型JavaScript框架，不可避免的有大量闭包的应用。bind函数和createBuffered函数就是典型的应用。</p>
<h2 id="Ext-bind函数">Ext.bind函数</h2>
<h3 id="用途">用途</h3>
<p>bind函数在ExtJS中有着广泛的应用，这是该函数的用途：</p>
<blockquote>
<p>Create a new function from the provided fn, change this to the provided scope, optionally overrides arguments for the call. (Defaults to the arguments passed by the caller)</p>
</blockquote>
<h3 id="使用示例">使用示例</h3>
<p>定义一个对象a，包含一个对象b和一个方法c</p>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = {</div><div class="line">    b: <span class="number">1</span>,</div><div class="line">    c: <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.b + d);</div><div class="line">    }</div><div class="line">};</div><div class="line">a.c(<span class="number">2</span>);  <span class="comment">//结果会打印出3，此时函数c运行时的this是对象a</span></div><div class="line">setTimeout(a.c, <span class="number">1000</span>);  <span class="comment">//1秒后打印出NaN，此时函数c运行时this是window</span></div><div class="line">e = Ext.bind(a.c, a);</div><div class="line">e(<span class="number">3</span>);    <span class="comment">//结果打印出4</span></div><div class="line">f = Ext.bind(a.c, a, [<span class="number">4</span>]);</div><div class="line">f();    <span class="comment">//结果打印出5</span></div><div class="line">setTimeout(f, <span class="number">1000</span>);    <span class="comment">//1秒后打印出5</span></div></pre></td></tr></table></figure>


<h3 id="源码分析">源码分析</h3>
<p>下面是参数定义和源代码。</p>
<blockquote>
<p><strong>Parameters</strong><br><strong>fn</strong> : <em>Function</em><br>The function to delegate.<br><strong>scope</strong> : <em>Object (optional)</em><br>The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window).<br><strong>args</strong> : <em>Array (optional)</em><br>Overrides arguments for the call. (Defaults to the arguments passed by the caller)<br><strong>appendArgs</strong> : <em>Boolean/Number (optional)</em><br>if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position</p>
</blockquote>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">bind: <span class="function"><span class="keyword">function</span><span class="params">(fn, scope, args, appendArgs)</span> </span>{</div><div class="line">    <span class="comment">//当只有fn和scope两个参数时将scope绑定到fn上</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) {</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">return</span> fn.apply(scope, <span class="built_in">arguments</span>);</div><div class="line">        };</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> method = fn,</div><div class="line">        slice = <span class="built_in">Array</span>.prototype.slice;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> callArgs = args || <span class="built_in">arguments</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (appendArgs === <span class="literal">true</span>) {</div><div class="line">            callArgs = slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">            callArgs = callArgs.concat(args);</div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> appendArgs == <span class="string">'number'</span>) {</div><div class="line">            callArgs = slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>); <span class="comment">// copy arguments first</span></div><div class="line">            Ext.Array.insert(callArgs, appendArgs, args);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">return</span> method.apply(scope || Ext.global, callArgs);</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在这个函数里ExtJS用返回了一个新的函数。执行这个新函数时，会带上之前用闭包绑定的scope和参数来执行旧函数fn。</p>
<h2 id="Ext-Function-createBuffered函数">Ext.Function.createBuffered函数</h2>
<h3 id="用途-1">用途</h3>
<p>createBuffered函数创建了一个缓冲函数，在连续多次调用的时候只有最后一次的调用会被执行。官方的用途说明如下：</p>
<blockquote>
<p>Creates a delegate function, optionally with a bound scope which, when called, buffers the execution of the passed function for the configured number of milliseconds. If called again within that period, the impending invocation will be canceled, and the timeout period will begin again.</p>
</blockquote>
<h3 id="使用示例-1">使用示例</h3>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = {</div><div class="line">    b: <span class="number">1</span>,</div><div class="line">    c: <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.b + d);</div><div class="line">    }</div><div class="line">};</div><div class="line">e = Ext.Function.createBuffered(a.c, <span class="number">1000</span>, a, [<span class="number">3</span>]);</div><div class="line">e();</div><div class="line">e();</div><div class="line">e();    <span class="comment">//只有最后一次会调用a.c打印出结果4</span></div></pre></td></tr></table></figure>

<h3 id="源码分析-1">源码分析</h3>
<p>下面是createBuffered函数的参数定义和源代码</p>
<blockquote>
<p><strong>Parameters</strong><br><strong>fn</strong> : <em>Function</em><br>The function to invoke on a buffered timer.<br><strong>buffer</strong> : <em>Number</em><br>The number of milliseconds by which to buffer the invocation of the function.<br><strong>scope</strong> : <em>Object (optional)</em><br>The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.<br><strong>args</strong> : <em>Array (optional)</em><br>Override arguments for the call. Defaults to the arguments passed by the caller.</p>
</blockquote>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">createBuffered: <span class="function"><span class="keyword">function</span><span class="params">(fn, buffer, scope, args)</span> </span>{</div><div class="line">    <span class="keyword">var</span> timerId;    <span class="comment">//只有每个return出去的函数可以访问到</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> callArgs = args || <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>),</div><div class="line">            me = scope || <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">//如果延时函数已设置，就清除上一次的延时函数，在后面重新设置延时函数</span></div><div class="line">        <span class="comment">//保证了fn只有最后一次会被执行</span></div><div class="line">        <span class="keyword">if</span> (timerId) {</div><div class="line">            clearTimeout(timerId);</div><div class="line">        }</div><div class="line"></div><div class="line">        timerId = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            fn.apply(me, callArgs);</div><div class="line">        }, buffer);</div><div class="line">    };</div><div class="line">},</div></pre></td></tr></table></figure>

<p>该函数用闭包封装了一个变量timerId，当返回的缓冲函数在短时间被重复调用时就会通过timerId不断清除上一次设定的延时函数来保证只有最后一次调用会执行fn。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ExtJS作为一个大型JavaScript框架，不可避免的有大量闭包的应用。bind函数和createBuffered函数就是典型的应用。</p>
<h2 id="Ext-bind函数">Ext.bind函数</h2>
<h3 id="用途">用途</h3>
<p>bind]]>
    </summary>
    
      <category term="JavaScript 闭包 ExtJS" scheme="http://elvin.im/tags/JavaScript-%E9%97%AD%E5%8C%85-ExtJS/"/>
    
      <category term="JavaScript" scheme="http://elvin.im/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE下textfield粘贴内容中的换行符]]></title>
    <link href="http://elvin.im/2014/10/22/IE%E4%B8%8Btextfield%E7%B2%98%E8%B4%B4%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://elvin.im/2014/10/22/IE下textfield粘贴内容中的换行符/</id>
    <published>2014-10-22T12:54:53.000Z</published>
    <updated>2014-10-23T14:04:06.000Z</updated>
    <content type="html"><![CDATA[<p>对于将含有换行符的数据粘贴到单行的text输入框，不同浏览器有不同的行为。<br>待粘贴内容，也就是测试源码日下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"testText"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="不同浏览器的不同行为">不同浏览器的不同行为</h2>
<h3 id="在Chrome下">在Chrome下</h3>
<p><img src="http://ww1.sinaimg.cn/large/79c63b39gw1eeu1jyeuz4j205k02sa9x.jpg" alt=""></p>
<p>再复制出来的结果如下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span> <span class="tag">&lt;<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span> <span class="tag">&lt;/<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">body</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> <span class="tag">&lt;/<span class="title">body</span>&gt;</span> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现换行变成了空格</p>
<h3 id="在FireFox下">在FireFox下</h3>
<p><img src="http://ww2.sinaimg.cn/large/79c63b39gw1eeu1ns594tj207503pt8q.jpg" alt=""></p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span> <span class="tag">&lt;<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span> <span class="tag">&lt;/<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">body</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> <span class="tag">&lt;/<span class="title">body</span>&gt;</span> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现FireFox与Chrome行为一致</p>
<h3 id="在IE下">在IE下</h3>
<p><img src="http://ww2.sinaimg.cn/large/79c63b39gw1eeu1sfkfhwj207u03rjr9.jpg" alt=""></p>
<p>复制出来的结果如下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现只有第一行数据</p>
<h2 id="解决方法">解决方法</h2>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) {</div><div class="line">    $(<span class="string">'#testText'</span>).bind(<span class="string">'paste'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">        <span class="keyword">var</span> clipped = <span class="built_in">window</span>.clipboardData.getData(<span class="string">"text"</span>);</div><div class="line"></div><div class="line">        clipped = clipped.replace(<span class="regexp">/(\r\n|\n|\r)/gm</span>, <span class="string">" "</span>); <span class="comment">//replace newlines with spaces</span></div><div class="line">        <span class="built_in">window</span>.clipboardData.setData(<span class="string">'text'</span>, clipped);</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>对于将含有换行符的数据粘贴到单行的text输入框，不同浏览器有不同的行为。<br>待粘贴内容，也就是测试源码日下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div cla]]>
    </summary>
    
      <category term="JS" scheme="http://elvin.im/tags/JS/"/>
    
      <category term="HTML" scheme="http://elvin.im/tags/HTML/"/>
    
      <category term="浏览器兼容性" scheme="http://elvin.im/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="浏览器兼容性" scheme="http://elvin.im/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[寻找第k小元素实现]]></title>
    <link href="http://elvin.im/2012/03/13/%E5%AF%BB%E6%89%BE%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/13/寻找第k小元素实现/</id>
    <published>2012-03-13T14:36:55.000Z</published>
    <updated>2014-10-25T14:41:00.000Z</updated>
    <content type="html"><![CDATA[<p>n个已排序的序列A[1…n]的中项是这个序列的第[n/2]（向上取整）小的元素。最直接的方法是对这个序列进行排序并取出该元素，这个方法需要O(n log n)的时间。</p>
<p>选择算法是找出序列中的第k小的元素，该算法会设置一个阈值，当元素个数小于该值时直接排序找出第k小元素。若不小于阈值，则将n个元素分为[n/5]组，每组5个元素，如果n不是5的倍数，则排除剩余的元素。每组进行排序并取出它们的中项即第3个元素。接着将这些中项序列中的中项元素记为mm，它是通过递归计算得到的。将A中的元素划分成三个数组：A1、A2和A3，其中分别包含小于、等于和大于mm的元素。最后求出第k小的元素出现在三个数组中的哪一个，并根据测试结果，算法或者返回滴k小的元素，或者在A1或A3上递归。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//算法：SELECT<span class="comment"></span></div><div class="line">//输入：n个元素的数组A[1...n]和整数k，1&lt;=k&lt;=n<span class="comment"></span></div><div class="line">//输出：A中的第k小元素<span class="comment"></span></div><div class="line">//select(A, low, high, k)</div><div class="line">  </div><div class="line">p ← high - low + <span class="number">1</span>  </div><div class="line"><span class="keyword">if</span> p &lt; <span class="number">44</span> <span class="keyword">then</span> 将A排序 <span class="constant">return</span> A[k]  </div><div class="line">令q=[p/<span class="number">5</span>]（向下取整）。将A分成q组，每组<span class="number">5</span>个元素。如果<span class="number">5</span>不整除p，则排除剩余元素  </div><div class="line">将q组中的每一组单独排序，找出中项。所有中项的集合为M  </div><div class="line">mm ← select(M, <span class="number">1</span>, q, [q/<span class="number">2</span>]（向上取整）) {mm为中项集合的中项}  </div><div class="line">将A[low...high]分成三组  </div><div class="line">A1 = {<span class="operator">a</span>|<span class="operator">a</span>&lt;mm}  </div><div class="line">A2 = {<span class="operator">a</span>|<span class="operator">a</span>=mm}  </div><div class="line">A3 = {<span class="operator">a</span>|<span class="operator">a</span>&gt;mm}  </div><div class="line"><span class="keyword">case</span>  </div><div class="line">    |A1|&gt;=k: <span class="constant">return</span> select(A1, <span class="number">1</span>, |A1|, k)  </div><div class="line">    |A1|+|A2|&gt;=k: <span class="constant">return</span> mm  </div><div class="line">    |A1|+|A2|&lt;k: <span class="constant">return</span> select(A3, <span class="number">1</span>, |A3|, k-|A1|-|A3|)  </div><div class="line"><span class="function"><span class="keyword">end</span> <span class="title">case</span></span></div></pre></td></tr></table></figure>

<p>下面是C++实现：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;  </span></div><div class="line"><span class="comment">#include &lt;stack&gt;  </span></div><div class="line"><span class="comment">#include &lt;cmath&gt;  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> std::stack;  </div><div class="line"><span class="keyword">using</span> std::cout;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="type">int</span> <span class="type">Split</span>(<span class="type">int</span> * a, <span class="type">int</span> low, <span class="type">int</span> high) {  </div><div class="line">    <span class="type">int</span> i = low;  </div><div class="line">    <span class="type">int</span> x = a[low];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low+<span class="number">1</span>; j &lt;= high; j++) {  </div><div class="line">        <span class="keyword">if</span> (a[j] &lt;= x) {  </div><div class="line">            i ++;  </div><div class="line">            <span class="keyword">if</span> (i != j) {  </div><div class="line">                <span class="type">int</span> temp = a[i];  </div><div class="line">                a[i] = a[j];  </div><div class="line">                a[j] = temp;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> temp = a[low];  </div><div class="line">    a[low] = a[i];  </div><div class="line">    a[i] = temp;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> i;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">void</span> <span class="type">QuickSort</span>(<span class="type">int</span> * a, <span class="type">int</span> low, <span class="type">int</span> high) {  </div><div class="line">    <span class="keyword">if</span> (low &gt;= high) {  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    stack&lt;<span class="type">int</span>&gt; <span class="type">range</span>;  </div><div class="line">    <span class="type">range</span>.push(low);  </div><div class="line">    <span class="type">range</span>.push(high);  </div><div class="line">    <span class="keyword">while</span>(!<span class="type">range</span>.empty()) {  </div><div class="line">        high = <span class="type">range</span>.top();  </div><div class="line">        <span class="type">range</span>.pop();  </div><div class="line">        low = <span class="type">range</span>.top();  </div><div class="line">        <span class="type">range</span>.pop();  </div><div class="line">  </div><div class="line">        <span class="type">int</span> w = <span class="type">Split</span>(a, low, high);  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (low &lt; w-<span class="number">1</span>) {  </div><div class="line">            <span class="type">range</span>.push(low);  </div><div class="line">            <span class="type">range</span>.push(w-<span class="number">1</span>);  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (high &gt; w+<span class="number">1</span>) {  </div><div class="line">            <span class="type">range</span>.push(w+<span class="number">1</span>);  </div><div class="line">            <span class="type">range</span>.push(high);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line">//寻找第k小的元素，但会破坏原数组的顺序  </div><div class="line"><span class="type">int</span> select(<span class="type">int</span> * A, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k) {  </div><div class="line">    <span class="type">int</span> <span class="literal">result</span> = <span class="number">0</span>;  </div><div class="line">    <span class="type">int</span> p = high-low+<span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (p &lt; <span class="number">6</span>/*<span class="number">44</span>*/) {  </div><div class="line">        <span class="type">QuickSort</span>(A, low, high);  </div><div class="line">        <span class="keyword">return</span> A[k-<span class="number">1</span>];  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> q = p / <span class="number">5</span>;  </div><div class="line">    <span class="type">int</span> * M = new <span class="type">int</span> [q];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) {  </div><div class="line">        <span class="type">QuickSort</span>(A, i*<span class="number">5</span>, i*<span class="number">5</span>+<span class="number">4</span>);  </div><div class="line">        M[i] = A[i*<span class="number">5</span>+<span class="number">2</span>];  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> mm = select(M, <span class="number">0</span>, q-<span class="number">1</span>, <span class="type">int</span>(ceil(q/<span class="number">2</span>.<span class="number">0</span>)));  </div><div class="line">  </div><div class="line">    <span class="type">int</span> * <span class="type">A1</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> * <span class="type">A2</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> * <span class="type">A3</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, count3 = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) {  </div><div class="line">        <span class="keyword">if</span> (A[i] &lt; mm) {  </div><div class="line">            <span class="type">A1</span>[count1++] = A[i];  </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == mm) {  </div><div class="line">            <span class="type">A2</span>[count2++] = A[i];  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            <span class="type">A3</span>[count3++] = A[i];  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">if</span> (count1 &gt;= k) {  </div><div class="line">        <span class="literal">result</span> = select(<span class="type">A1</span>, <span class="number">0</span>, count1-<span class="number">1</span>, k);  </div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &gt;= k) {  </div><div class="line">        <span class="literal">result</span> = mm;  </div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &lt; k) {  </div><div class="line">        <span class="literal">result</span> = select(<span class="type">A3</span>, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2);  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    delete [] M;  </div><div class="line">    delete [] <span class="type">A1</span>;  </div><div class="line">    delete [] <span class="type">A2</span>;  </div><div class="line">    delete [] <span class="type">A3</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">int</span> main(<span class="type">void</span>) {  </div><div class="line">    <span class="type">int</span> a[] = {<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>};  </div><div class="line">    <span class="type">int</span> <span class="literal">result</span> = select(a, <span class="number">0</span>, <span class="number">24</span>, <span class="number">13</span>);  </div><div class="line">  </div><div class="line">    cout &lt;&lt; <span class="string">"序列：\n"</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) {  </div><div class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">    }  </div><div class="line">    cout &lt;&lt; endl;  </div><div class="line">    cout &lt;&lt; <span class="string">"的第k小元素为："</span> &lt;&lt; <span class="literal">result</span> &lt;&lt; endl;  </div><div class="line">  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Java版本：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package select;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.util.<span class="type">ArrayList</span>;  </div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Arrays</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> sort.<span class="type">QuickSort</span>;  </div><div class="line">  </div><div class="line">public class <span class="type">SelectArray</span> {  </div><div class="line">    private <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt; <span class="type">array</span> = new <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;();  </div><div class="line">      </div><div class="line">    public <span class="type">SelectArray</span>(<span class="type">int</span> [] <span class="type">array</span>) {  </div><div class="line">        this.<span class="type">array</span>.clear();  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="type">array</span>.length; i++) {  </div><div class="line">            this.<span class="type">array</span>.add(<span class="type">array</span>[i]);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    private <span class="type">int</span> select(<span class="type">int</span> [] A, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k) {  </div><div class="line">        //<span class="type">QuickSort</span> qs = null;  </div><div class="line">        <span class="type">int</span> <span class="literal">result</span> = <span class="number">0</span>;    </div><div class="line">        <span class="type">int</span> p = high-low+<span class="number">1</span>;    </div><div class="line">        <span class="keyword">if</span> (p &lt; <span class="number">6</span>/*<span class="number">44</span>*/) {    </div><div class="line">            A = new <span class="type">QuickSort</span>(A).getSortedIntArray();    </div><div class="line">            <span class="keyword">return</span> A[k-<span class="number">1</span>];    </div><div class="line">        }    </div><div class="line">        <span class="type">int</span> q = p / <span class="number">5</span>;    </div><div class="line">        <span class="type">int</span> [] M = new <span class="type">int</span> [q];    </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) {  </div><div class="line">            <span class="type">int</span> [] t = <span class="type">Arrays</span>.copyOfRange(A, i*<span class="number">5</span>, i*<span class="number">5</span>+<span class="number">4</span>);  </div><div class="line">            t = new <span class="type">QuickSort</span>(t).getSortedIntArray();   </div><div class="line">            M[i] = t[<span class="number">2</span>];    </div><div class="line">        }    </div><div class="line">        <span class="type">int</span> mm = select(M, <span class="number">0</span>, q-<span class="number">1</span>, (<span class="type">int</span>)<span class="type">Math</span>.floor(q/<span class="number">2</span>.<span class="number">0</span>));    </div><div class="line">        </div><div class="line">        <span class="type">int</span> [] <span class="type">A1</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> [] <span class="type">A2</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> [] <span class="type">A3</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, count3 = <span class="number">0</span>;    </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) {    </div><div class="line">            <span class="keyword">if</span> (A[i] &lt; mm) {    </div><div class="line">                <span class="type">A1</span>[count1++] = A[i];    </div><div class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == mm) {    </div><div class="line">                <span class="type">A2</span>[count2++] = A[i];    </div><div class="line">            } <span class="keyword">else</span> {    </div><div class="line">                <span class="type">A3</span>[count3++] = A[i];    </div><div class="line">            }    </div><div class="line">        }    </div><div class="line">        <span class="keyword">if</span> (count1 &gt;= k) {    </div><div class="line">            <span class="literal">result</span> = select(<span class="type">A1</span>, <span class="number">0</span>, count1-<span class="number">1</span>, k);    </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &gt;= k) {    </div><div class="line">            <span class="literal">result</span> = mm;    </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &lt; k) {    </div><div class="line">            <span class="literal">result</span> = select(<span class="type">A3</span>, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2);    </div><div class="line">        }  </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;    </div><div class="line">    }  </div><div class="line">      </div><div class="line">    public <span class="type">int</span> getSelectedElement(<span class="type">int</span> k) {  </div><div class="line">        <span class="type">int</span> [] A = new <span class="type">int</span> [this.<span class="type">array</span>.size()];  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) {  </div><div class="line">            A[i] = this.<span class="type">array</span>.get(i);   </div><div class="line">        }  </div><div class="line">        <span class="keyword">return</span> select(A, <span class="number">0</span>, A.length-<span class="number">1</span>, k);  </div><div class="line">    }  </div><div class="line">    /** </div><div class="line">     * @param args </div><div class="line">     */  </div><div class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) {  </div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub  </div><div class="line">        <span class="type">int</span> a[] = {<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>};  </div><div class="line">        <span class="type">SelectArray</span> sa = new <span class="type">SelectArray</span>(a);  </div><div class="line">          </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"序列："</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) {    </div><div class="line">            <span class="type">System</span>.<span class="keyword">out</span>.print(a[i] + <span class="string">"  "</span>);    </div><div class="line">        }   </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();  </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"的第k小元素为："</span> + sa.getSelectedElement(<span class="number">13</span>));  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Python版本如下：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python    </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil  </div><div class="line">  </div><div class="line">class <span class="type">SelectList</span>:  </div><div class="line">    def __init__(self, l):  </div><div class="line">        self.<span class="type">array</span> = list()  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:  </div><div class="line">            self.<span class="type">array</span>.append(i)  </div><div class="line">  </div><div class="line">    def select(self, a, low, high, k):  </div><div class="line">        <span class="literal">result</span> = <span class="number">0</span>  </div><div class="line">        p = high-low + <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> p &lt; <span class="number">6</span>:  </div><div class="line">            a.sort()  </div><div class="line">            <span class="keyword">return</span> a[k-<span class="number">1</span>]  </div><div class="line">        q = p/<span class="number">5</span>  </div><div class="line">        M = [<span class="number">0</span>] * q  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">0</span>, q):  </div><div class="line">            t = a[i*<span class="number">5</span>:i*<span class="number">5</span>+<span class="number">5</span>]  </div><div class="line">            t.sort()  </div><div class="line">            M[i] = t[<span class="number">2</span>]  </div><div class="line">        mm = self.select(M, <span class="number">0</span>, q-<span class="number">1</span>, <span class="type">int</span>(ceil(q/<span class="number">2</span>.<span class="number">0</span>)))  </div><div class="line">          </div><div class="line">        a1 = []   </div><div class="line">        a2 = []  </div><div class="line">        a3 = []  </div><div class="line">        count1 = <span class="number">0</span>  </div><div class="line">        count2 = <span class="number">0</span>  </div><div class="line">        count3 = <span class="number">0</span>  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">            <span class="keyword">if</span> i &lt; mm:  </div><div class="line">                a1.append(i)  </div><div class="line">                count1 += <span class="number">1</span>  </div><div class="line">            <span class="keyword">elif</span> i == mm:  </div><div class="line">                a2.append(i)  </div><div class="line">                count2 += <span class="number">1</span>  </div><div class="line">            <span class="keyword">else</span>:  </div><div class="line">                a3.append(i)  </div><div class="line">                count3 += <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> count1 &gt;= k:  </div><div class="line">            <span class="literal">result</span> = self.select(a1, <span class="number">0</span>, count1-<span class="number">1</span>, k)  </div><div class="line">        <span class="keyword">elif</span> count1+count2 &gt;= k:  </div><div class="line">            <span class="literal">result</span> = mm  </div><div class="line">        <span class="keyword">elif</span> count1+count2 &lt; k:  </div><div class="line">            <span class="literal">result</span> = self.select(a3, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2)  </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>  </div><div class="line">  </div><div class="line">    def getSelectedElement(self, k):  </div><div class="line">        <span class="keyword">return</span> self.select(self.<span class="type">array</span>, <span class="number">0</span>, len(self.<span class="type">array</span>)-<span class="number">1</span>, k)  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == '__main__':  </div><div class="line">    a = [<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>]  </div><div class="line">    sl = <span class="type">SelectList</span>(a)  </div><div class="line">  </div><div class="line">    print <span class="string">"序列："</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">        print i,  </div><div class="line">    print  </div><div class="line">    print <span class="string">"的第k小元素为："</span>, sl.getSelectedElement(<span class="number">13</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>n个已排序的序列A[1…n]的中项是这个序列的第[n/2]（向上取整）小的元素。最直接的方法是对这个序列进行排序并取出该元素，这个方法需要O(n log n)的时间。</p>
<p>选择算法是找出序列中的第k小的元素，该算法会设置一个阈值，当元素个数小于该值时直接排序找出第]]>
    </summary>
    
      <category term="寻找第k小元素" scheme="http://elvin.im/tags/%E5%AF%BB%E6%89%BE%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最长公共子序列实现]]></title>
    <link href="http://elvin.im/2012/03/11/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/11/最长公共子序列实现/</id>
    <published>2012-03-11T14:27:00.000Z</published>
    <updated>2014-10-25T14:35:26.000Z</updated>
    <content type="html"><![CDATA[<p>今天实现的算法是求解最长公共子序列，在字母表Σ上，分别给出两个长度为n和m的字符串A和B，确定在A和B中最长公共子序列的长度并输出该最长公共子序列。这里，A=a1a2…an的子序列是一个形式为ai1ai2…aik的字符串，其中每个ij都在1和n之间，并且1&lt;=i1<i2<...<ik>=n，子序列不是子串，并不要求连续。例如zxyxyz和xyyzx的最长公共子序列为xyyz。</i2<...<ik></p>
<p>此问题可以用动态规划技术来解决，为了使用动态规划，首先得有一个递推公式。令A = a1a2…an好B = b1b2…bn,令L[i,j]表示a1a2…ai和b1b2…bi的最长公共子序列的长度。i、j可能为0，即表示空串。则i=0或j=0时，L[i,j]=0。递推关系如下：</p>
<blockquote>
<p>如果i和j都大于0，那么</p>
<pre><code><span class="attribute">若ai </span>=<span class="string"> bj，L[i,j] = L[i-1,j-1]+1
若ai ≠ bj，L[i,j] = max{L[i,j-1]，L[i-1,j]}</span>
</code></pre></blockquote>
<p>根据上述递推关系可以导出如下的算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：LCS</span></div><div class="line"><span class="comment">//输入：字符串A和B，长度分别为n和m</span></div><div class="line"><span class="comment">//输出：A和B最长公共子序列的长度和其中一个最长公共子序列</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i ← <span class="number">0</span> <span class="keyword">to</span> n:  </div><div class="line">    L[i,<span class="number">0</span>] ← <span class="number">0</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">for</span> j ← <span class="number">0</span> <span class="keyword">to</span> n:  </div><div class="line">    L[<span class="number">0</span>,j] ← <span class="number">0</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">for</span> i ← <span class="number">1</span> <span class="keyword">to</span> n:  </div><div class="line">    <span class="keyword">for</span> j ← <span class="number">1</span> <span class="keyword">to</span> m:  </div><div class="line">        <span class="keyword">if</span> ai == bi <span class="keyword">then</span> L[i,j] ← L[i-<span class="number">1</span>,j-<span class="number">1</span>] + <span class="number">1</span>  </div><div class="line">        <span class="keyword">else</span> L[i,j] ← max{L[i,j-<span class="number">1</span>],L[i-<span class="number">1</span>,j]}  </div><div class="line">        <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line">    <span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">while</span> i &lt;= n <span class="keyword">and</span> j &lt;= m:  </div><div class="line">    <span class="keyword">if</span> ai == bi <span class="keyword">then</span> 输出ai i=i+<span class="number">1</span> j=j+<span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> L[i+<span class="number">1</span>,j] &gt; L[i][j+<span class="number">1</span>] <span class="keyword">then</span> i = i+<span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span> j = j+<span class="number">1</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">while</span>  </div><div class="line"><span class="keyword">return</span> L[n,m]</div></pre></td></tr></table></figure>

<p>下面是C++版本的实现：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "LCSString.h"  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> std::<span class="built_in">cout</span>;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {  </div><div class="line">    LCSString s1(<span class="string">"xyxxzxyzxy"</span>);  </div><div class="line">    std::<span class="built_in">string</span> s2(<span class="string">"zxzyyzxxyxxz"</span>);  </div><div class="line">  </div><div class="line">    std::<span class="built_in">string</span> s = s1.getLCS(s2);  </div><div class="line">  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">"和"</span> &lt;&lt; s2 &lt;&lt; <span class="string">"的一个最长公共子序列为:"</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; endl;  </div><div class="line">  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LCSString.h  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;  </span></div><div class="line">  </div><div class="line"><span class="keyword">class</span> LCSString:<span class="keyword">public</span> std::<span class="built_in">string</span> {  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    LCSString(<span class="keyword">void</span>);  </div><div class="line">    LCSString(<span class="keyword">const</span> <span class="keyword">char</span> * _Ptr);  </div><div class="line">    ~LCSString(<span class="keyword">void</span>);  </div><div class="line">    std::<span class="built_in">string</span> getLCS(std::<span class="built_in">string</span> s);  </div><div class="line">};</div></pre></td></tr></table></figure>



<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">//<span class="type">LCSString</span>.cpp  </div><div class="line"><span class="comment">#include "LCSString.h"  </span></div><div class="line"><span class="comment">#include &lt;iostream&gt;  </span></div><div class="line"><span class="keyword">using</span> std::cout;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::<span class="type">LCSString</span>(<span class="type">void</span>):std::<span class="type">string</span>() {  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::<span class="type">LCSString</span>(<span class="keyword">const</span> <span class="type">char</span> * _Ptr):std::<span class="type">string</span>(_Ptr) {  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::~<span class="type">LCSString</span>(<span class="type">void</span>) {  </div><div class="line">}  </div><div class="line">  </div><div class="line">//求本字符串与另一个字符串s的最长公共子序列  </div><div class="line">std::<span class="type">string</span> <span class="type">LCSString</span>::getLCS(std::<span class="type">string</span> s) {  </div><div class="line">    std::<span class="type">string</span> <span class="literal">result</span>;  </div><div class="line">    <span class="type">int</span> n_len = this-&gt;length()+<span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> m_len = s.length()+<span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> ** L = new <span class="type">int</span> * [n_len];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        L[i] = new <span class="type">int</span> [m_len];  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        L[i][<span class="number">0</span>] = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_len; i++) {  </div><div class="line">        L[<span class="number">0</span>][i] = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n_len; i++) {  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt; m_len; j ++) {  </div><div class="line">            <span class="keyword">if</span> (this-&gt;operator[](i-<span class="number">1</span>) == s[j-<span class="number">1</span>]) {  </div><div class="line">                L[i][j] = L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;  </div><div class="line">            } <span class="keyword">else</span> {  </div><div class="line">                //L[i][j]取L[i][j-<span class="number">1</span>]和L[i-<span class="number">1</span>][j]的最大值  </div><div class="line">                L[i][j] = (L[i][j-<span class="number">1</span>] &gt; L[i-<span class="number">1</span>][j]?L[i][j-<span class="number">1</span>]:L[i-<span class="number">1</span>][j]);     </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_len; j++) {  </div><div class="line">            cout &lt;&lt; L[i][j] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">        }  </div><div class="line">        cout &lt;&lt; endl;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="type">int</span> i = n_len - <span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> j = m_len - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> && j &gt; <span class="number">0</span>) {  </div><div class="line">        <span class="keyword">if</span> (this-&gt;operator[](i-<span class="number">1</span>) == s[j-<span class="number">1</span>]) {  </div><div class="line">            <span class="literal">result</span> = s[j-<span class="number">1</span>] + <span class="literal">result</span>;   </div><div class="line">            i --;  </div><div class="line">            j --;                                                         </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]) {  </div><div class="line">            i --;  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            j --;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        delete [] L[i];  </div><div class="line">    }  </div><div class="line">    delete [] L;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Java版本实现：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">package lcs;  </div><div class="line">  </div><div class="line">public class <span class="type">LCSString</span> {  </div><div class="line">    private <span class="type">String</span> s1;  </div><div class="line">      </div><div class="line">    public <span class="type">LCSString</span>(<span class="type">String</span> s) {  </div><div class="line">        this.s1 = new <span class="type">String</span>(s);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    public <span class="type">String</span> getLCSString(<span class="type">String</span> s2) {  </div><div class="line">        <span class="type">String</span> <span class="literal">result</span> = new <span class="type">String</span>();  </div><div class="line">        <span class="type">int</span> n = s1.length()+<span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> m = s2.length()+<span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> [][] L = new <span class="type">int</span> [n][m];  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {  </div><div class="line">            L[i][<span class="number">0</span>] = <span class="number">0</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) {  </div><div class="line">            L[<span class="number">0</span>][i]= <span class="number">0</span>;   </div><div class="line">        }  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) {  </div><div class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++) {  </div><div class="line">                <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) {  </div><div class="line">                    L[i][j]= L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;   </div><div class="line">                } <span class="keyword">else</span> {  </div><div class="line">                    //L[i][j]取L[i][j-<span class="number">1</span>]和L[i-<span class="number">1</span>][j]的最大值    </div><div class="line">                    L[i][j] = (L[i][j-<span class="number">1</span>] &gt; L[i-<span class="number">1</span>][j]?L[i][j-<span class="number">1</span>]:L[i-<span class="number">1</span>][j]);   </div><div class="line">                }  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">        <span class="type">int</span> i = n - <span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> j = m - <span class="number">1</span>;  </div><div class="line">      </div><div class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> && j &gt; <span class="number">0</span>) {  </div><div class="line">            <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) {  </div><div class="line">                <span class="literal">result</span> = s1.charAt(i-<span class="number">1</span>) + <span class="literal">result</span>;   </div><div class="line">                i --;  </div><div class="line">                j --;                                                         </div><div class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]) {  </div><div class="line">                i --;  </div><div class="line">            } <span class="keyword">else</span> {  </div><div class="line">                j --;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    /** </div><div class="line">     * @param args </div><div class="line">     */  </div><div class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) {  </div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub  </div><div class="line">        <span class="type">String</span> s1 = <span class="string">"xyxxzxyzxy"</span>;  </div><div class="line">        <span class="type">String</span> s2 = <span class="string">"zxzyyzxxyxxz"</span>;  </div><div class="line">        <span class="type">LCSString</span> lcs = new <span class="type">LCSString</span>(s1);  </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(s1 + <span class="string">"和"</span> + s2 + <span class="string">"的一个最长公共子序列为:"</span> + lcs.getLCSString(s2));  </div><div class="line">    }  </div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Python版本实现：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python  </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line">class <span class="type">LCSString</span>:  </div><div class="line">    def __init__(self, s):  </div><div class="line">        self.s1 = str(s)  </div><div class="line">  </div><div class="line">    def getLCSString(self, s2):  </div><div class="line">        <span class="literal">result</span> = ''  </div><div class="line">        n = len(self.s1)+<span class="number">1</span>  </div><div class="line">        m = len(s2)+<span class="number">1</span>  </div><div class="line">        L = [<span class="number">0</span>]*n  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">0</span>, n):  </div><div class="line">            L[i] = [<span class="number">0</span>] * m  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">1</span>, n):  </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">range</span>(<span class="number">1</span>, m):  </div><div class="line">                <span class="keyword">if</span> self.s1[i-<span class="number">1</span>] == s2[j-<span class="number">1</span>]:  </div><div class="line">                    L[i][j] = L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>  </div><div class="line">                <span class="keyword">else</span>:  </div><div class="line">                    L[i][j] = max(L[i-<span class="number">1</span>][j], L[i][j-<span class="number">1</span>])  </div><div class="line">          </div><div class="line">        print  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> L:  </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:  </div><div class="line">                print j,  </div><div class="line">            print  </div><div class="line">        i = n-<span class="number">1</span>  </div><div class="line">        j = m-<span class="number">1</span>  </div><div class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:  </div><div class="line">            <span class="keyword">if</span> self.s1[i-<span class="number">1</span>] == s2[j-<span class="number">1</span>]:  </div><div class="line">                <span class="literal">result</span> = s2[j-<span class="number">1</span>] + <span class="literal">result</span>  </div><div class="line">                i -= <span class="number">1</span>  </div><div class="line">                j -= <span class="number">1</span>  </div><div class="line">            <span class="keyword">elif</span> L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]:  </div><div class="line">                i -= <span class="number">1</span>  </div><div class="line">            <span class="keyword">else</span>:  </div><div class="line">                j -= <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == '__main__':  </div><div class="line">    s1 = <span class="string">"xyxxzxyzxy"</span>  </div><div class="line">    s2 = <span class="string">"zxzyyzxxyxxz"</span>  </div><div class="line">    lcs = <span class="type">LCSString</span>(s1)  </div><div class="line">    print s1 + <span class="string">"和"</span> + s2 + <span class="string">"的一个最长公共子序列为:"</span> + lcs.getLCSString(s2)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>今天实现的算法是求解最长公共子序列，在字母表Σ上，分别给出两个长度为n和m的字符串A和B，确定在A和B中最长公共子序列的长度并输出该最长公共子序列。这里，A=a1a2…an的子序列是一个形式为ai1ai2…aik的字符串，其中每个ij都在1和n之间，并且1&lt;=i1<i]]>
    </summary>
    
      <category term="最长公共子序列" scheme="http://elvin.im/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
</feed>
