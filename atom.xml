<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Elvin Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://elvin.im/"/>
  <updated>2014-11-17T15:16:42.308Z</updated>
  <id>http://elvin.im/</id>
  
  <author>
    <name><![CDATA[Elvin Guan]]></name>
    <email><![CDATA[gwmwhu@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java POI使用备忘]]></title>
    <link href="http://elvin.im/2014/11/16/Java-POI%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/"/>
    <id>http://elvin.im/2014/11/16/Java-POI使用备忘/</id>
    <published>2014-11-16T12:16:41.000Z</published>
    <updated>2014-11-17T15:16:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="修改单元格的样式">修改单元格的样式</h2>
<p>比如将单元格背景色变灰</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="constant">CellStyle cellStyle</span> = cell.getCellStyle();</div><div class="line"><span class="constant">CellStyle greyCellStyle</span> = workbook.createCellStyle();</div><div class="line">greyCellStyle.cloneStyleFrom(cellStyle);    <span class="comment">//先复制原有样式，再修改</span></div><div class="line">greyCellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);</div><div class="line">greyCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</div><div class="line">cell.setCellStyle(greyCellStyle);</div></pre></td></tr></table></figure>

<p>因为在读取excel的时候，POI通过getCellStyle获取的单元格样式可能是被多个相同样式的单元格共享的，直接修改旧样式会造成混乱。所以这里先复制原有样式，再修改。</p>
<h1 id="设置自定义背景颜色">设置自定义背景颜色</h1>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">style.setFillPattern(CellStyle.SOLID_FOREGROUND);</div><div class="line"><span class="keyword">if</span> (workbook <span class="keyword">instanceof</span> HSSFWorkbook) {</div><div class="line">    HSSFWorkbook hssfWorkbook = (HSSFWorkbook) workbook;</div><div class="line">    HSSFPalette customPalette = hssfWorkbook.getCustomPalette();</div><div class="line">    customPalette.setColorAtIndex(HSSFColor.BLUE.index, (<span class="keyword">byte</span>) <span class="number">0</span>, (<span class="keyword">byte</span>) <span class="number">102</span>, (<span class="keyword">byte</span>) <span class="number">153</span>);</div><div class="line">    style.setFillForegroundColor(HSSFColor.BLUE.index);</div><div class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (workbook <span class="keyword">instanceof</span> XSSFWorkbook) {</div><div class="line">    XSSFCellStyle xssfCellStyle = (XSSFCellStyle) style;</div><div class="line">    XSSFColor newColor = <span class="keyword">new</span> XSSFColor(<span class="keyword">new</span> java.awt.Color(<span class="number">0</span>, <span class="number">102</span>, <span class="number">153</span>));</div><div class="line">    xssfCellStyle.setFillForegroundColor(newColor);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="修改单元格的样式">修改单元格的样式</h2>
<p>比如将单元格背景色变灰</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</]]>
    </summary>
    
      <category term="Java POI" scheme="http://elvin.im/tags/Java-POI/"/>
    
      <category term="Java" scheme="http://elvin.im/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo在github搭建免费博客]]></title>
    <link href="http://elvin.im/2014/10/25/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    <id>http://elvin.im/2014/10/25/使用Hexo在github搭建免费博客/</id>
    <published>2014-10-25T05:14:15.000Z</published>
    <updated>2014-10-25T15:00:02.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo是一个基于NodeJS实现的博客框架，它可以解析由markdown写的文章并生成静态的HTML文件，而且可以更换不同的主题。<br>github pages可以免费托管静态页面，而且不限制流量，目前在国内访问还算稳定，是搭建博客的不错选择。</p>
<h2 id="准备环境">准备环境</h2>
<h3 id="注册github，创建仓库">注册github，创建仓库</h3>
<p>使用github需要先注册一个github账号，并创建一个名为username.github.io的仓库（username替换成注册的用户名）。<br><img src="http://elvin-blog.qiniudn.com/github-create-reposity.png" alt=""></p>
<h3 id="安装Git，NodeJS环境">安装Git，NodeJS环境</h3>
<p>不同平台Git和NodeJS的安装方法可以很容易搜索到，安装结束后在命令行输入以下命令。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现git版本号则说明git已经安装好，然后设置github的SSH-Key（也可以很容易搜索到）。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">ssh</span> -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>

<p>若出现以下结果，则说明SSH-Key已经设置完成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You<span class="attribute">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>

<p>然后验证NodeJS环境，输入以下命令。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现版本号，则说明环境已经OK。</p>
<h3 id="安装Hexo">安装Hexo</h3>
<p>Hexo是一个基于NodeJS的项目，可以使用npm命令来一键安装</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<p>待命令执行完执行以下命令检验安装结果</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --<span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>若出现版本号则说明Hexo已经安装好。</p>
<h2 id="搭建博客">搭建博客</h2>
<p>到这里，环境搭建已经完成，下面就是使用Hexo创建博客了。</p>
<h3 id="创建Hexo项目">创建Hexo项目</h3>
<p>先创建一个目录，用于放置博客的项目文件。切换到该目录下执行下列命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p>通过该命令，初始化了一个Hexo项目</p>
<h3 id="本地测试">本地测试</h3>
<p>Hexo依赖了几个NodeJS模块，所以init后需要先安装一下那些模块。这个命令很多教程没有提到，但是没有这个命令会导致后续一些问题。</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span></span></div></pre></td></tr></table></figure>

<p>上面提到过，Hexo最终会生成静态HTML文件发布。这个生成命令如下</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div></pre></td></tr></table></figure>

<p>这个命令每次部署之前都需要先运行一次。部署前先在本地运行起来检查一次</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> s</div></pre></td></tr></table></figure>

<p>本地打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>查看，若是页面显示正常，就说明博客已经生成完成，可以准备部署了</p>
<h3 id="部署到github">部署到github</h3>
<p>用文本编辑器打开项目根目录下面的_config.yml，找到deploy项，配置如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: github</div><div class="line">  repository: git@github.com:username/username.github.<span class="built_in">io</span>.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>保存以后，再执行下列命令</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> d</div></pre></td></tr></table></figure>

<p>待命令执行成功以后，就可以打开<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>查看部署的结果了，应该跟之前本地的一样。到这里为止，Hexo博客就已经搭建完成了。</p>
<h2 id="写博客">写博客</h2>
<h3 id="创建新文章">创建新文章</h3>
<p>Hexo支持markdown，使用下列命令创建一篇新文章</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> n <span class="string">"新文章"</span></div></pre></td></tr></table></figure>

<p>该命令执行完以后，在source/_posts目录下面可以找到一个名为<em>新文章.md</em>的文件，使用markdown语法编写文件。</p>
<h3 id="部署到github-1">部署到github</h3>
<p>部署前需要先生成HTML，再部署</p>
<figure class="highlight [shell]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div><div class="line">hexo d</div></pre></td></tr></table></figure>

<h2 id="定制">定制</h2>
<h3 id="换主题">换主题</h3>
<p>github上有很多Hexo主题，可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">这里</a>找到一个自己喜欢的主题。<br>安装主题的方式很简单，直接把主题的仓库clone到theme目录下就可以了，下面以jacman主题为例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/wuchong/jacman.git themes/jacman</div></pre></td></tr></table></figure>

<p>然后在_config.xml里面把theme改成jacman就好了。</p>
<h3 id="绑定域名">绑定域名</h3>
<p>在source目录下面创建一个名为CNAME的文件，把需要绑定的域名填写到文件里</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">example.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<ul>
<li>假如是像example.com这样的顶级域名，则在DNS设置里面加入A记录指向192.30.252.153和192.30.252.154</li>
<li>假如是像blog.example.com这样的二级域名，则在DNS设置里面加入CNAME记录指向username.github.io</li>
</ul>
<h3 id="添加评论功能">添加评论功能</h3>
<p>由于Hexo是静态博客，所以只能用第三方的评论系统。Hexo默认支持disqus，但在国内还是用多说会比较快一点。由于我使用的jacman本来就支持多说，只需要在主题的_config.yml里面把多说的配置改为true，然后把注册的多说用户名填上去就可以了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#### Comment</span></div><div class="line">duoshuo: </div><div class="line">  enable: <span class="literal">true</span>  ## duoshuo.com</div><div class="line">  short_name: wuchong   ##e.g. wuchong   <span class="keyword">for</span> duoshuo <span class="keyword">short</span> name.</div></pre></td></tr></table></figure>

<h3 id="添加统计功能">添加统计功能</h3>
<p>在国内还是使用百度统计比较稳定，在theme目录下相应的_config.yml中添加配置项</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">baidu_tongji</span>: <span class="string">true</span></div></pre></td></tr></table></figure>

<p>然后新建theme/jacman/layout/_partial/baidu_tongji.ejs，内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> (theme.baidu_tongji){ %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">#你的百度统计代码,可以从百度统计官网注册获得</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% } %&gt;</span></div></pre></td></tr></table></figure>

<p>最后在hexo/themes/jackman/_partial/footer.ejs中的最后添加如下代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="variable">%-</span> partial(<span class="string">'baidu_tongji'</span>) <span class="variable">%&gt;</span></div></pre></td></tr></table></figure>

<p>注意百度统计会被Ad-block拦截，测试的时候记得关闭Ad-block。</p>
<h3 id="更新友情链接">更新友情链接</h3>
<p>编辑heme/jacman/layout/_widget/links.ejs修改相应的链接和现实文本，要增加记录可以新加li标签。</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"linkslist"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"asidetitle"</span>&gt;</span><span class="vbscript">&lt;%= __(<span class="comment">'links') %&gt;</span></span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://wuchong.me"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">title</span>=<span class="value">"Cloud"</span>&gt;</span>Jark's Blog<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://hexo.io"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">title</span>=<span class="value">"Hexo"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="添加RSS功能">添加RSS功能</h3>
<p>hexo可以使用插件实现RSS功能，首先安装RSS插件到本地</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>

<p>然后开启RSS功能，编辑_config.yml添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-feed</div></pre></td></tr></table></figure>

<p>这样打开<a href="http://username.github.io/atom.xml" target="_blank" rel="external">http://username.github.io/atom.xml</a>应该就不是404了</p>
<p>参考链接：<br><a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a><br><a href="http://fy98.com/2014/03/03/build-blog-with-hexo" target="_blank" rel="external">http://fy98.com/2014/03/03/build-blog-with-hexo</a><br><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">http://zipperary.com/2013/06/02/hexo-guide-5/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo是一个基于NodeJS实现的博客框架，它可以解析由markdown写的文章并生成静态的HTML文件，而且可以更换不同的主题。<br>github pages可以免费托管静态页面，而且不限制流量，目前在国内访问还算稳定，是搭建博客的不错选择。</p>
<h2 id="]]>
    </summary>
    
      <category term="Hexo github" scheme="http://elvin.im/tags/Hexo-github/"/>
    
      <category term="github" scheme="http://elvin.im/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS闭包在ExtJS中的应用]]></title>
    <link href="http://elvin.im/2014/10/23/JS%E9%97%AD%E5%8C%85%E5%9C%A8ExtJS%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://elvin.im/2014/10/23/JS闭包在ExtJS中的应用/</id>
    <published>2014-10-23T14:00:00.000Z</published>
    <updated>2014-10-23T14:01:27.000Z</updated>
    <content type="html"><![CDATA[<p>ExtJS作为一个大型JavaScript框架，不可避免的有大量闭包的应用。bind函数和createBuffered函数就是典型的应用。</p>
<h2 id="Ext-bind函数">Ext.bind函数</h2>
<h3 id="用途">用途</h3>
<p>bind函数在ExtJS中有着广泛的应用，这是该函数的用途：</p>
<blockquote>
<p>Create a new function from the provided fn, change this to the provided scope, optionally overrides arguments for the call. (Defaults to the arguments passed by the caller)</p>
</blockquote>
<h3 id="使用示例">使用示例</h3>
<p>定义一个对象a，包含一个对象b和一个方法c</p>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = {</div><div class="line">    b: <span class="number">1</span>,</div><div class="line">    c: <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.b + d);</div><div class="line">    }</div><div class="line">};</div><div class="line">a.c(<span class="number">2</span>);  <span class="comment">//结果会打印出3，此时函数c运行时的this是对象a</span></div><div class="line">setTimeout(a.c, <span class="number">1000</span>);  <span class="comment">//1秒后打印出NaN，此时函数c运行时this是window</span></div><div class="line">e = Ext.bind(a.c, a);</div><div class="line">e(<span class="number">3</span>);    <span class="comment">//结果打印出4</span></div><div class="line">f = Ext.bind(a.c, a, [<span class="number">4</span>]);</div><div class="line">f();    <span class="comment">//结果打印出5</span></div><div class="line">setTimeout(f, <span class="number">1000</span>);    <span class="comment">//1秒后打印出5</span></div></pre></td></tr></table></figure>


<h3 id="源码分析">源码分析</h3>
<p>下面是参数定义和源代码。</p>
<blockquote>
<p><strong>Parameters</strong><br><strong>fn</strong> : <em>Function</em><br>The function to delegate.<br><strong>scope</strong> : <em>Object (optional)</em><br>The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window).<br><strong>args</strong> : <em>Array (optional)</em><br>Overrides arguments for the call. (Defaults to the arguments passed by the caller)<br><strong>appendArgs</strong> : <em>Boolean/Number (optional)</em><br>if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position</p>
</blockquote>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">bind: <span class="function"><span class="keyword">function</span><span class="params">(fn, scope, args, appendArgs)</span> </span>{</div><div class="line">    <span class="comment">//当只有fn和scope两个参数时将scope绑定到fn上</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) {</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">return</span> fn.apply(scope, <span class="built_in">arguments</span>);</div><div class="line">        };</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> method = fn,</div><div class="line">        slice = <span class="built_in">Array</span>.prototype.slice;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> callArgs = args || <span class="built_in">arguments</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (appendArgs === <span class="literal">true</span>) {</div><div class="line">            callArgs = slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</div><div class="line">            callArgs = callArgs.concat(args);</div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> appendArgs == <span class="string">'number'</span>) {</div><div class="line">            callArgs = slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>); <span class="comment">// copy arguments first</span></div><div class="line">            Ext.Array.insert(callArgs, appendArgs, args);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">return</span> method.apply(scope || Ext.global, callArgs);</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在这个函数里ExtJS用返回了一个新的函数。执行这个新函数时，会带上之前用闭包绑定的scope和参数来执行旧函数fn。</p>
<h2 id="Ext-Function-createBuffered函数">Ext.Function.createBuffered函数</h2>
<h3 id="用途-1">用途</h3>
<p>createBuffered函数创建了一个缓冲函数，在连续多次调用的时候只有最后一次的调用会被执行。官方的用途说明如下：</p>
<blockquote>
<p>Creates a delegate function, optionally with a bound scope which, when called, buffers the execution of the passed function for the configured number of milliseconds. If called again within that period, the impending invocation will be canceled, and the timeout period will begin again.</p>
</blockquote>
<h3 id="使用示例-1">使用示例</h3>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = {</div><div class="line">    b: <span class="number">1</span>,</div><div class="line">    c: <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.b + d);</div><div class="line">    }</div><div class="line">};</div><div class="line">e = Ext.Function.createBuffered(a.c, <span class="number">1000</span>, a, [<span class="number">3</span>]);</div><div class="line">e();</div><div class="line">e();</div><div class="line">e();    <span class="comment">//只有最后一次会调用a.c打印出结果4</span></div></pre></td></tr></table></figure>

<h3 id="源码分析-1">源码分析</h3>
<p>下面是createBuffered函数的参数定义和源代码</p>
<blockquote>
<p><strong>Parameters</strong><br><strong>fn</strong> : <em>Function</em><br>The function to invoke on a buffered timer.<br><strong>buffer</strong> : <em>Number</em><br>The number of milliseconds by which to buffer the invocation of the function.<br><strong>scope</strong> : <em>Object (optional)</em><br>The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.<br><strong>args</strong> : <em>Array (optional)</em><br>Override arguments for the call. Defaults to the arguments passed by the caller.</p>
</blockquote>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">createBuffered: <span class="function"><span class="keyword">function</span><span class="params">(fn, buffer, scope, args)</span> </span>{</div><div class="line">    <span class="keyword">var</span> timerId;    <span class="comment">//只有每个return出去的函数可以访问到</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> callArgs = args || <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>),</div><div class="line">            me = scope || <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">//如果延时函数已设置，就清除上一次的延时函数，在后面重新设置延时函数</span></div><div class="line">        <span class="comment">//保证了fn只有最后一次会被执行</span></div><div class="line">        <span class="keyword">if</span> (timerId) {</div><div class="line">            clearTimeout(timerId);</div><div class="line">        }</div><div class="line"></div><div class="line">        timerId = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            fn.apply(me, callArgs);</div><div class="line">        }, buffer);</div><div class="line">    };</div><div class="line">},</div></pre></td></tr></table></figure>

<p>该函数用闭包封装了一个变量timerId，当返回的缓冲函数在短时间被重复调用时就会通过timerId不断清除上一次设定的延时函数来保证只有最后一次调用会执行fn。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ExtJS作为一个大型JavaScript框架，不可避免的有大量闭包的应用。bind函数和createBuffered函数就是典型的应用。</p>
<h2 id="Ext-bind函数">Ext.bind函数</h2>
<h3 id="用途">用途</h3>
<p>bind]]>
    </summary>
    
      <category term="JavaScript 闭包 ExtJS" scheme="http://elvin.im/tags/JavaScript-%E9%97%AD%E5%8C%85-ExtJS/"/>
    
      <category term="JavaScript" scheme="http://elvin.im/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE下textfield粘贴内容中的换行符]]></title>
    <link href="http://elvin.im/2014/10/22/IE%E4%B8%8Btextfield%E7%B2%98%E8%B4%B4%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://elvin.im/2014/10/22/IE下textfield粘贴内容中的换行符/</id>
    <published>2014-10-22T12:54:53.000Z</published>
    <updated>2014-10-23T14:04:06.000Z</updated>
    <content type="html"><![CDATA[<p>对于将含有换行符的数据粘贴到单行的text输入框，不同浏览器有不同的行为。<br>待粘贴内容，也就是测试源码日下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"testText"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="不同浏览器的不同行为">不同浏览器的不同行为</h2>
<h3 id="在Chrome下">在Chrome下</h3>
<p><img src="http://ww1.sinaimg.cn/large/79c63b39gw1eeu1jyeuz4j205k02sa9x.jpg" alt=""></p>
<p>再复制出来的结果如下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span> <span class="tag">&lt;<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span> <span class="tag">&lt;/<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">body</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> <span class="tag">&lt;/<span class="title">body</span>&gt;</span> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现换行变成了空格</p>
<h3 id="在FireFox下">在FireFox下</h3>
<p><img src="http://ww2.sinaimg.cn/large/79c63b39gw1eeu1ns594tj207503pt8q.jpg" alt=""></p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span> <span class="tag">&lt;<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">title</span>&gt;</span> <span class="tag">&lt;/<span class="title">head</span>&gt;</span> <span class="tag">&lt;<span class="title">body</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> <span class="tag">&lt;/<span class="title">body</span>&gt;</span> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现FireFox与Chrome行为一致</p>
<h3 id="在IE下">在IE下</h3>
<p><img src="http://ww2.sinaimg.cn/large/79c63b39gw1eeu1sfkfhwj207u03rjr9.jpg" alt=""></p>
<p>复制出来的结果如下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>可以发现只有第一行数据</p>
<h2 id="解决方法">解决方法</h2>
<figure class="highlight [JavaScript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) {</div><div class="line">    $(<span class="string">'#testText'</span>).bind(<span class="string">'paste'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">        <span class="keyword">var</span> clipped = <span class="built_in">window</span>.clipboardData.getData(<span class="string">"text"</span>);</div><div class="line"></div><div class="line">        clipped = clipped.replace(<span class="regexp">/(\r\n|\n|\r)/gm</span>, <span class="string">" "</span>); <span class="comment">//replace newlines with spaces</span></div><div class="line">        <span class="built_in">window</span>.clipboardData.setData(<span class="string">'text'</span>, clipped);</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>对于将含有换行符的数据粘贴到单行的text输入框，不同浏览器有不同的行为。<br>待粘贴内容，也就是测试源码日下</p>
<figure class="highlight [html]"><table><tr><td class="gutter"><pre><div cla]]>
    </summary>
    
      <category term="JS" scheme="http://elvin.im/tags/JS/"/>
    
      <category term="HTML" scheme="http://elvin.im/tags/HTML/"/>
    
      <category term="浏览器兼容性" scheme="http://elvin.im/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="浏览器兼容性" scheme="http://elvin.im/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[寻找第k小元素实现]]></title>
    <link href="http://elvin.im/2012/03/13/%E5%AF%BB%E6%89%BE%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/13/寻找第k小元素实现/</id>
    <published>2012-03-13T14:36:55.000Z</published>
    <updated>2014-10-25T14:41:00.000Z</updated>
    <content type="html"><![CDATA[<p>n个已排序的序列A[1…n]的中项是这个序列的第[n/2]（向上取整）小的元素。最直接的方法是对这个序列进行排序并取出该元素，这个方法需要O(n log n)的时间。</p>
<p>选择算法是找出序列中的第k小的元素，该算法会设置一个阈值，当元素个数小于该值时直接排序找出第k小元素。若不小于阈值，则将n个元素分为[n/5]组，每组5个元素，如果n不是5的倍数，则排除剩余的元素。每组进行排序并取出它们的中项即第3个元素。接着将这些中项序列中的中项元素记为mm，它是通过递归计算得到的。将A中的元素划分成三个数组：A1、A2和A3，其中分别包含小于、等于和大于mm的元素。最后求出第k小的元素出现在三个数组中的哪一个，并根据测试结果，算法或者返回滴k小的元素，或者在A1或A3上递归。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//算法：SELECT<span class="comment"></span></div><div class="line">//输入：n个元素的数组A[1...n]和整数k，1&lt;=k&lt;=n<span class="comment"></span></div><div class="line">//输出：A中的第k小元素<span class="comment"></span></div><div class="line">//select(A, low, high, k)</div><div class="line">  </div><div class="line">p ← high - low + <span class="number">1</span>  </div><div class="line"><span class="keyword">if</span> p &lt; <span class="number">44</span> <span class="keyword">then</span> 将A排序 <span class="constant">return</span> A[k]  </div><div class="line">令q=[p/<span class="number">5</span>]（向下取整）。将A分成q组，每组<span class="number">5</span>个元素。如果<span class="number">5</span>不整除p，则排除剩余元素  </div><div class="line">将q组中的每一组单独排序，找出中项。所有中项的集合为M  </div><div class="line">mm ← select(M, <span class="number">1</span>, q, [q/<span class="number">2</span>]（向上取整）) {mm为中项集合的中项}  </div><div class="line">将A[low...high]分成三组  </div><div class="line">A1 = {<span class="operator">a</span>|<span class="operator">a</span>&lt;mm}  </div><div class="line">A2 = {<span class="operator">a</span>|<span class="operator">a</span>=mm}  </div><div class="line">A3 = {<span class="operator">a</span>|<span class="operator">a</span>&gt;mm}  </div><div class="line"><span class="keyword">case</span>  </div><div class="line">    |A1|&gt;=k: <span class="constant">return</span> select(A1, <span class="number">1</span>, |A1|, k)  </div><div class="line">    |A1|+|A2|&gt;=k: <span class="constant">return</span> mm  </div><div class="line">    |A1|+|A2|&lt;k: <span class="constant">return</span> select(A3, <span class="number">1</span>, |A3|, k-|A1|-|A3|)  </div><div class="line"><span class="function"><span class="keyword">end</span> <span class="title">case</span></span></div></pre></td></tr></table></figure>

<p>下面是C++实现：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;  </span></div><div class="line"><span class="comment">#include &lt;stack&gt;  </span></div><div class="line"><span class="comment">#include &lt;cmath&gt;  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> std::stack;  </div><div class="line"><span class="keyword">using</span> std::cout;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="type">int</span> <span class="type">Split</span>(<span class="type">int</span> * a, <span class="type">int</span> low, <span class="type">int</span> high) {  </div><div class="line">    <span class="type">int</span> i = low;  </div><div class="line">    <span class="type">int</span> x = a[low];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low+<span class="number">1</span>; j &lt;= high; j++) {  </div><div class="line">        <span class="keyword">if</span> (a[j] &lt;= x) {  </div><div class="line">            i ++;  </div><div class="line">            <span class="keyword">if</span> (i != j) {  </div><div class="line">                <span class="type">int</span> temp = a[i];  </div><div class="line">                a[i] = a[j];  </div><div class="line">                a[j] = temp;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> temp = a[low];  </div><div class="line">    a[low] = a[i];  </div><div class="line">    a[i] = temp;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> i;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">void</span> <span class="type">QuickSort</span>(<span class="type">int</span> * a, <span class="type">int</span> low, <span class="type">int</span> high) {  </div><div class="line">    <span class="keyword">if</span> (low &gt;= high) {  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    stack&lt;<span class="type">int</span>&gt; <span class="type">range</span>;  </div><div class="line">    <span class="type">range</span>.push(low);  </div><div class="line">    <span class="type">range</span>.push(high);  </div><div class="line">    <span class="keyword">while</span>(!<span class="type">range</span>.empty()) {  </div><div class="line">        high = <span class="type">range</span>.top();  </div><div class="line">        <span class="type">range</span>.pop();  </div><div class="line">        low = <span class="type">range</span>.top();  </div><div class="line">        <span class="type">range</span>.pop();  </div><div class="line">  </div><div class="line">        <span class="type">int</span> w = <span class="type">Split</span>(a, low, high);  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (low &lt; w-<span class="number">1</span>) {  </div><div class="line">            <span class="type">range</span>.push(low);  </div><div class="line">            <span class="type">range</span>.push(w-<span class="number">1</span>);  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (high &gt; w+<span class="number">1</span>) {  </div><div class="line">            <span class="type">range</span>.push(w+<span class="number">1</span>);  </div><div class="line">            <span class="type">range</span>.push(high);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line">//寻找第k小的元素，但会破坏原数组的顺序  </div><div class="line"><span class="type">int</span> select(<span class="type">int</span> * A, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k) {  </div><div class="line">    <span class="type">int</span> <span class="literal">result</span> = <span class="number">0</span>;  </div><div class="line">    <span class="type">int</span> p = high-low+<span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (p &lt; <span class="number">6</span>/*<span class="number">44</span>*/) {  </div><div class="line">        <span class="type">QuickSort</span>(A, low, high);  </div><div class="line">        <span class="keyword">return</span> A[k-<span class="number">1</span>];  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> q = p / <span class="number">5</span>;  </div><div class="line">    <span class="type">int</span> * M = new <span class="type">int</span> [q];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) {  </div><div class="line">        <span class="type">QuickSort</span>(A, i*<span class="number">5</span>, i*<span class="number">5</span>+<span class="number">4</span>);  </div><div class="line">        M[i] = A[i*<span class="number">5</span>+<span class="number">2</span>];  </div><div class="line">    }  </div><div class="line">    <span class="type">int</span> mm = select(M, <span class="number">0</span>, q-<span class="number">1</span>, <span class="type">int</span>(ceil(q/<span class="number">2</span>.<span class="number">0</span>)));  </div><div class="line">  </div><div class="line">    <span class="type">int</span> * <span class="type">A1</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> * <span class="type">A2</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> * <span class="type">A3</span> = new <span class="type">int</span> [p];  </div><div class="line">    <span class="type">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, count3 = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) {  </div><div class="line">        <span class="keyword">if</span> (A[i] &lt; mm) {  </div><div class="line">            <span class="type">A1</span>[count1++] = A[i];  </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == mm) {  </div><div class="line">            <span class="type">A2</span>[count2++] = A[i];  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            <span class="type">A3</span>[count3++] = A[i];  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">if</span> (count1 &gt;= k) {  </div><div class="line">        <span class="literal">result</span> = select(<span class="type">A1</span>, <span class="number">0</span>, count1-<span class="number">1</span>, k);  </div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &gt;= k) {  </div><div class="line">        <span class="literal">result</span> = mm;  </div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &lt; k) {  </div><div class="line">        <span class="literal">result</span> = select(<span class="type">A3</span>, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2);  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    delete [] M;  </div><div class="line">    delete [] <span class="type">A1</span>;  </div><div class="line">    delete [] <span class="type">A2</span>;  </div><div class="line">    delete [] <span class="type">A3</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">int</span> main(<span class="type">void</span>) {  </div><div class="line">    <span class="type">int</span> a[] = {<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>};  </div><div class="line">    <span class="type">int</span> <span class="literal">result</span> = select(a, <span class="number">0</span>, <span class="number">24</span>, <span class="number">13</span>);  </div><div class="line">  </div><div class="line">    cout &lt;&lt; <span class="string">"序列：\n"</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) {  </div><div class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">    }  </div><div class="line">    cout &lt;&lt; endl;  </div><div class="line">    cout &lt;&lt; <span class="string">"的第k小元素为："</span> &lt;&lt; <span class="literal">result</span> &lt;&lt; endl;  </div><div class="line">  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Java版本：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package select;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.util.<span class="type">ArrayList</span>;  </div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Arrays</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> sort.<span class="type">QuickSort</span>;  </div><div class="line">  </div><div class="line">public class <span class="type">SelectArray</span> {  </div><div class="line">    private <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt; <span class="type">array</span> = new <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;();  </div><div class="line">      </div><div class="line">    public <span class="type">SelectArray</span>(<span class="type">int</span> [] <span class="type">array</span>) {  </div><div class="line">        this.<span class="type">array</span>.clear();  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="type">array</span>.length; i++) {  </div><div class="line">            this.<span class="type">array</span>.add(<span class="type">array</span>[i]);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    private <span class="type">int</span> select(<span class="type">int</span> [] A, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k) {  </div><div class="line">        //<span class="type">QuickSort</span> qs = null;  </div><div class="line">        <span class="type">int</span> <span class="literal">result</span> = <span class="number">0</span>;    </div><div class="line">        <span class="type">int</span> p = high-low+<span class="number">1</span>;    </div><div class="line">        <span class="keyword">if</span> (p &lt; <span class="number">6</span>/*<span class="number">44</span>*/) {    </div><div class="line">            A = new <span class="type">QuickSort</span>(A).getSortedIntArray();    </div><div class="line">            <span class="keyword">return</span> A[k-<span class="number">1</span>];    </div><div class="line">        }    </div><div class="line">        <span class="type">int</span> q = p / <span class="number">5</span>;    </div><div class="line">        <span class="type">int</span> [] M = new <span class="type">int</span> [q];    </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) {  </div><div class="line">            <span class="type">int</span> [] t = <span class="type">Arrays</span>.copyOfRange(A, i*<span class="number">5</span>, i*<span class="number">5</span>+<span class="number">4</span>);  </div><div class="line">            t = new <span class="type">QuickSort</span>(t).getSortedIntArray();   </div><div class="line">            M[i] = t[<span class="number">2</span>];    </div><div class="line">        }    </div><div class="line">        <span class="type">int</span> mm = select(M, <span class="number">0</span>, q-<span class="number">1</span>, (<span class="type">int</span>)<span class="type">Math</span>.floor(q/<span class="number">2</span>.<span class="number">0</span>));    </div><div class="line">        </div><div class="line">        <span class="type">int</span> [] <span class="type">A1</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> [] <span class="type">A2</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> [] <span class="type">A3</span> = new <span class="type">int</span> [p];    </div><div class="line">        <span class="type">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, count3 = <span class="number">0</span>;    </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) {    </div><div class="line">            <span class="keyword">if</span> (A[i] &lt; mm) {    </div><div class="line">                <span class="type">A1</span>[count1++] = A[i];    </div><div class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == mm) {    </div><div class="line">                <span class="type">A2</span>[count2++] = A[i];    </div><div class="line">            } <span class="keyword">else</span> {    </div><div class="line">                <span class="type">A3</span>[count3++] = A[i];    </div><div class="line">            }    </div><div class="line">        }    </div><div class="line">        <span class="keyword">if</span> (count1 &gt;= k) {    </div><div class="line">            <span class="literal">result</span> = select(<span class="type">A1</span>, <span class="number">0</span>, count1-<span class="number">1</span>, k);    </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &gt;= k) {    </div><div class="line">            <span class="literal">result</span> = mm;    </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (count1+count2 &lt; k) {    </div><div class="line">            <span class="literal">result</span> = select(<span class="type">A3</span>, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2);    </div><div class="line">        }  </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;    </div><div class="line">    }  </div><div class="line">      </div><div class="line">    public <span class="type">int</span> getSelectedElement(<span class="type">int</span> k) {  </div><div class="line">        <span class="type">int</span> [] A = new <span class="type">int</span> [this.<span class="type">array</span>.size()];  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) {  </div><div class="line">            A[i] = this.<span class="type">array</span>.get(i);   </div><div class="line">        }  </div><div class="line">        <span class="keyword">return</span> select(A, <span class="number">0</span>, A.length-<span class="number">1</span>, k);  </div><div class="line">    }  </div><div class="line">    /** </div><div class="line">     * @param args </div><div class="line">     */  </div><div class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) {  </div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub  </div><div class="line">        <span class="type">int</span> a[] = {<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>};  </div><div class="line">        <span class="type">SelectArray</span> sa = new <span class="type">SelectArray</span>(a);  </div><div class="line">          </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"序列："</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) {    </div><div class="line">            <span class="type">System</span>.<span class="keyword">out</span>.print(a[i] + <span class="string">"  "</span>);    </div><div class="line">        }   </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();  </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"的第k小元素为："</span> + sa.getSelectedElement(<span class="number">13</span>));  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Python版本如下：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python    </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil  </div><div class="line">  </div><div class="line">class <span class="type">SelectList</span>:  </div><div class="line">    def __init__(self, l):  </div><div class="line">        self.<span class="type">array</span> = list()  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:  </div><div class="line">            self.<span class="type">array</span>.append(i)  </div><div class="line">  </div><div class="line">    def select(self, a, low, high, k):  </div><div class="line">        <span class="literal">result</span> = <span class="number">0</span>  </div><div class="line">        p = high-low + <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> p &lt; <span class="number">6</span>:  </div><div class="line">            a.sort()  </div><div class="line">            <span class="keyword">return</span> a[k-<span class="number">1</span>]  </div><div class="line">        q = p/<span class="number">5</span>  </div><div class="line">        M = [<span class="number">0</span>] * q  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">0</span>, q):  </div><div class="line">            t = a[i*<span class="number">5</span>:i*<span class="number">5</span>+<span class="number">5</span>]  </div><div class="line">            t.sort()  </div><div class="line">            M[i] = t[<span class="number">2</span>]  </div><div class="line">        mm = self.select(M, <span class="number">0</span>, q-<span class="number">1</span>, <span class="type">int</span>(ceil(q/<span class="number">2</span>.<span class="number">0</span>)))  </div><div class="line">          </div><div class="line">        a1 = []   </div><div class="line">        a2 = []  </div><div class="line">        a3 = []  </div><div class="line">        count1 = <span class="number">0</span>  </div><div class="line">        count2 = <span class="number">0</span>  </div><div class="line">        count3 = <span class="number">0</span>  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">            <span class="keyword">if</span> i &lt; mm:  </div><div class="line">                a1.append(i)  </div><div class="line">                count1 += <span class="number">1</span>  </div><div class="line">            <span class="keyword">elif</span> i == mm:  </div><div class="line">                a2.append(i)  </div><div class="line">                count2 += <span class="number">1</span>  </div><div class="line">            <span class="keyword">else</span>:  </div><div class="line">                a3.append(i)  </div><div class="line">                count3 += <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> count1 &gt;= k:  </div><div class="line">            <span class="literal">result</span> = self.select(a1, <span class="number">0</span>, count1-<span class="number">1</span>, k)  </div><div class="line">        <span class="keyword">elif</span> count1+count2 &gt;= k:  </div><div class="line">            <span class="literal">result</span> = mm  </div><div class="line">        <span class="keyword">elif</span> count1+count2 &lt; k:  </div><div class="line">            <span class="literal">result</span> = self.select(a3, <span class="number">0</span>, count3-<span class="number">1</span>, k-count1-count2)  </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>  </div><div class="line">  </div><div class="line">    def getSelectedElement(self, k):  </div><div class="line">        <span class="keyword">return</span> self.select(self.<span class="type">array</span>, <span class="number">0</span>, len(self.<span class="type">array</span>)-<span class="number">1</span>, k)  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == '__main__':  </div><div class="line">    a = [<span class="number">8</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">7</span>]  </div><div class="line">    sl = <span class="type">SelectList</span>(a)  </div><div class="line">  </div><div class="line">    print <span class="string">"序列："</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">        print i,  </div><div class="line">    print  </div><div class="line">    print <span class="string">"的第k小元素为："</span>, sl.getSelectedElement(<span class="number">13</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>n个已排序的序列A[1…n]的中项是这个序列的第[n/2]（向上取整）小的元素。最直接的方法是对这个序列进行排序并取出该元素，这个方法需要O(n log n)的时间。</p>
<p>选择算法是找出序列中的第k小的元素，该算法会设置一个阈值，当元素个数小于该值时直接排序找出第]]>
    </summary>
    
      <category term="寻找第k小元素" scheme="http://elvin.im/tags/%E5%AF%BB%E6%89%BE%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最长公共子序列实现]]></title>
    <link href="http://elvin.im/2012/03/11/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/11/最长公共子序列实现/</id>
    <published>2012-03-11T14:27:00.000Z</published>
    <updated>2014-10-25T14:35:26.000Z</updated>
    <content type="html"><![CDATA[<p>今天实现的算法是求解最长公共子序列，在字母表Σ上，分别给出两个长度为n和m的字符串A和B，确定在A和B中最长公共子序列的长度并输出该最长公共子序列。这里，A=a1a2…an的子序列是一个形式为ai1ai2…aik的字符串，其中每个ij都在1和n之间，并且1&lt;=i1<i2<...<ik>=n，子序列不是子串，并不要求连续。例如zxyxyz和xyyzx的最长公共子序列为xyyz。</i2<...<ik></p>
<p>此问题可以用动态规划技术来解决，为了使用动态规划，首先得有一个递推公式。令A = a1a2…an好B = b1b2…bn,令L[i,j]表示a1a2…ai和b1b2…bi的最长公共子序列的长度。i、j可能为0，即表示空串。则i=0或j=0时，L[i,j]=0。递推关系如下：</p>
<blockquote>
<p>如果i和j都大于0，那么</p>
<pre><code><span class="attribute">若ai </span>=<span class="string"> bj，L[i,j] = L[i-1,j-1]+1
若ai ≠ bj，L[i,j] = max{L[i,j-1]，L[i-1,j]}</span>
</code></pre></blockquote>
<p>根据上述递推关系可以导出如下的算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：LCS</span></div><div class="line"><span class="comment">//输入：字符串A和B，长度分别为n和m</span></div><div class="line"><span class="comment">//输出：A和B最长公共子序列的长度和其中一个最长公共子序列</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i ← <span class="number">0</span> <span class="keyword">to</span> n:  </div><div class="line">    L[i,<span class="number">0</span>] ← <span class="number">0</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">for</span> j ← <span class="number">0</span> <span class="keyword">to</span> n:  </div><div class="line">    L[<span class="number">0</span>,j] ← <span class="number">0</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">for</span> i ← <span class="number">1</span> <span class="keyword">to</span> n:  </div><div class="line">    <span class="keyword">for</span> j ← <span class="number">1</span> <span class="keyword">to</span> m:  </div><div class="line">        <span class="keyword">if</span> ai == bi <span class="keyword">then</span> L[i,j] ← L[i-<span class="number">1</span>,j-<span class="number">1</span>] + <span class="number">1</span>  </div><div class="line">        <span class="keyword">else</span> L[i,j] ← max{L[i,j-<span class="number">1</span>],L[i-<span class="number">1</span>,j]}  </div><div class="line">        <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line">    <span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line"><span class="keyword">while</span> i &lt;= n <span class="keyword">and</span> j &lt;= m:  </div><div class="line">    <span class="keyword">if</span> ai == bi <span class="keyword">then</span> 输出ai i=i+<span class="number">1</span> j=j+<span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> L[i+<span class="number">1</span>,j] &gt; L[i][j+<span class="number">1</span>] <span class="keyword">then</span> i = i+<span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span> j = j+<span class="number">1</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">while</span>  </div><div class="line"><span class="keyword">return</span> L[n,m]</div></pre></td></tr></table></figure>

<p>下面是C++版本的实现：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "LCSString.h"  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> std::<span class="built_in">cout</span>;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {  </div><div class="line">    LCSString s1(<span class="string">"xyxxzxyzxy"</span>);  </div><div class="line">    std::<span class="built_in">string</span> s2(<span class="string">"zxzyyzxxyxxz"</span>);  </div><div class="line">  </div><div class="line">    std::<span class="built_in">string</span> s = s1.getLCS(s2);  </div><div class="line">  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">"和"</span> &lt;&lt; s2 &lt;&lt; <span class="string">"的一个最长公共子序列为:"</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; endl;  </div><div class="line">  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LCSString.h  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;  </span></div><div class="line">  </div><div class="line"><span class="keyword">class</span> LCSString:<span class="keyword">public</span> std::<span class="built_in">string</span> {  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    LCSString(<span class="keyword">void</span>);  </div><div class="line">    LCSString(<span class="keyword">const</span> <span class="keyword">char</span> * _Ptr);  </div><div class="line">    ~LCSString(<span class="keyword">void</span>);  </div><div class="line">    std::<span class="built_in">string</span> getLCS(std::<span class="built_in">string</span> s);  </div><div class="line">};</div></pre></td></tr></table></figure>



<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">//<span class="type">LCSString</span>.cpp  </div><div class="line"><span class="comment">#include "LCSString.h"  </span></div><div class="line"><span class="comment">#include &lt;iostream&gt;  </span></div><div class="line"><span class="keyword">using</span> std::cout;  </div><div class="line"><span class="keyword">using</span> std::endl;  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::<span class="type">LCSString</span>(<span class="type">void</span>):std::<span class="type">string</span>() {  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::<span class="type">LCSString</span>(<span class="keyword">const</span> <span class="type">char</span> * _Ptr):std::<span class="type">string</span>(_Ptr) {  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="type">LCSString</span>::~<span class="type">LCSString</span>(<span class="type">void</span>) {  </div><div class="line">}  </div><div class="line">  </div><div class="line">//求本字符串与另一个字符串s的最长公共子序列  </div><div class="line">std::<span class="type">string</span> <span class="type">LCSString</span>::getLCS(std::<span class="type">string</span> s) {  </div><div class="line">    std::<span class="type">string</span> <span class="literal">result</span>;  </div><div class="line">    <span class="type">int</span> n_len = this-&gt;length()+<span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> m_len = s.length()+<span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> ** L = new <span class="type">int</span> * [n_len];  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        L[i] = new <span class="type">int</span> [m_len];  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        L[i][<span class="number">0</span>] = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_len; i++) {  </div><div class="line">        L[<span class="number">0</span>][i] = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n_len; i++) {  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt; m_len; j ++) {  </div><div class="line">            <span class="keyword">if</span> (this-&gt;operator[](i-<span class="number">1</span>) == s[j-<span class="number">1</span>]) {  </div><div class="line">                L[i][j] = L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;  </div><div class="line">            } <span class="keyword">else</span> {  </div><div class="line">                //L[i][j]取L[i][j-<span class="number">1</span>]和L[i-<span class="number">1</span>][j]的最大值  </div><div class="line">                L[i][j] = (L[i][j-<span class="number">1</span>] &gt; L[i-<span class="number">1</span>][j]?L[i][j-<span class="number">1</span>]:L[i-<span class="number">1</span>][j]);     </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m_len; j++) {  </div><div class="line">            cout &lt;&lt; L[i][j] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">        }  </div><div class="line">        cout &lt;&lt; endl;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="type">int</span> i = n_len - <span class="number">1</span>;  </div><div class="line">    <span class="type">int</span> j = m_len - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> && j &gt; <span class="number">0</span>) {  </div><div class="line">        <span class="keyword">if</span> (this-&gt;operator[](i-<span class="number">1</span>) == s[j-<span class="number">1</span>]) {  </div><div class="line">            <span class="literal">result</span> = s[j-<span class="number">1</span>] + <span class="literal">result</span>;   </div><div class="line">            i --;  </div><div class="line">            j --;                                                         </div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]) {  </div><div class="line">            i --;  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            j --;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_len; i++) {  </div><div class="line">        delete [] L[i];  </div><div class="line">    }  </div><div class="line">    delete [] L;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Java版本实现：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">package lcs;  </div><div class="line">  </div><div class="line">public class <span class="type">LCSString</span> {  </div><div class="line">    private <span class="type">String</span> s1;  </div><div class="line">      </div><div class="line">    public <span class="type">LCSString</span>(<span class="type">String</span> s) {  </div><div class="line">        this.s1 = new <span class="type">String</span>(s);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    public <span class="type">String</span> getLCSString(<span class="type">String</span> s2) {  </div><div class="line">        <span class="type">String</span> <span class="literal">result</span> = new <span class="type">String</span>();  </div><div class="line">        <span class="type">int</span> n = s1.length()+<span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> m = s2.length()+<span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> [][] L = new <span class="type">int</span> [n][m];  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {  </div><div class="line">            L[i][<span class="number">0</span>] = <span class="number">0</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) {  </div><div class="line">            L[<span class="number">0</span>][i]= <span class="number">0</span>;   </div><div class="line">        }  </div><div class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) {  </div><div class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++) {  </div><div class="line">                <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) {  </div><div class="line">                    L[i][j]= L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;   </div><div class="line">                } <span class="keyword">else</span> {  </div><div class="line">                    //L[i][j]取L[i][j-<span class="number">1</span>]和L[i-<span class="number">1</span>][j]的最大值    </div><div class="line">                    L[i][j] = (L[i][j-<span class="number">1</span>] &gt; L[i-<span class="number">1</span>][j]?L[i][j-<span class="number">1</span>]:L[i-<span class="number">1</span>][j]);   </div><div class="line">                }  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">        <span class="type">int</span> i = n - <span class="number">1</span>;  </div><div class="line">        <span class="type">int</span> j = m - <span class="number">1</span>;  </div><div class="line">      </div><div class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> && j &gt; <span class="number">0</span>) {  </div><div class="line">            <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) {  </div><div class="line">                <span class="literal">result</span> = s1.charAt(i-<span class="number">1</span>) + <span class="literal">result</span>;   </div><div class="line">                i --;  </div><div class="line">                j --;                                                         </div><div class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]) {  </div><div class="line">                i --;  </div><div class="line">            } <span class="keyword">else</span> {  </div><div class="line">                j --;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    /** </div><div class="line">     * @param args </div><div class="line">     */  </div><div class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) {  </div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub  </div><div class="line">        <span class="type">String</span> s1 = <span class="string">"xyxxzxyzxy"</span>;  </div><div class="line">        <span class="type">String</span> s2 = <span class="string">"zxzyyzxxyxxz"</span>;  </div><div class="line">        <span class="type">LCSString</span> lcs = new <span class="type">LCSString</span>(s1);  </div><div class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(s1 + <span class="string">"和"</span> + s2 + <span class="string">"的一个最长公共子序列为:"</span> + lcs.getLCSString(s2));  </div><div class="line">    }  </div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是Python版本实现：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python  </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line">class <span class="type">LCSString</span>:  </div><div class="line">    def __init__(self, s):  </div><div class="line">        self.s1 = str(s)  </div><div class="line">  </div><div class="line">    def getLCSString(self, s2):  </div><div class="line">        <span class="literal">result</span> = ''  </div><div class="line">        n = len(self.s1)+<span class="number">1</span>  </div><div class="line">        m = len(s2)+<span class="number">1</span>  </div><div class="line">        L = [<span class="number">0</span>]*n  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">0</span>, n):  </div><div class="line">            L[i] = [<span class="number">0</span>] * m  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">range</span>(<span class="number">1</span>, n):  </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">range</span>(<span class="number">1</span>, m):  </div><div class="line">                <span class="keyword">if</span> self.s1[i-<span class="number">1</span>] == s2[j-<span class="number">1</span>]:  </div><div class="line">                    L[i][j] = L[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>  </div><div class="line">                <span class="keyword">else</span>:  </div><div class="line">                    L[i][j] = max(L[i-<span class="number">1</span>][j], L[i][j-<span class="number">1</span>])  </div><div class="line">          </div><div class="line">        print  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> L:  </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:  </div><div class="line">                print j,  </div><div class="line">            print  </div><div class="line">        i = n-<span class="number">1</span>  </div><div class="line">        j = m-<span class="number">1</span>  </div><div class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:  </div><div class="line">            <span class="keyword">if</span> self.s1[i-<span class="number">1</span>] == s2[j-<span class="number">1</span>]:  </div><div class="line">                <span class="literal">result</span> = s2[j-<span class="number">1</span>] + <span class="literal">result</span>  </div><div class="line">                i -= <span class="number">1</span>  </div><div class="line">                j -= <span class="number">1</span>  </div><div class="line">            <span class="keyword">elif</span> L[i-<span class="number">1</span>][j] == L[i][j-<span class="number">1</span>]:  </div><div class="line">                i -= <span class="number">1</span>  </div><div class="line">            <span class="keyword">else</span>:  </div><div class="line">                j -= <span class="number">1</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == '__main__':  </div><div class="line">    s1 = <span class="string">"xyxxzxyzxy"</span>  </div><div class="line">    s2 = <span class="string">"zxzyyzxxyxxz"</span>  </div><div class="line">    lcs = <span class="type">LCSString</span>(s1)  </div><div class="line">    print s1 + <span class="string">"和"</span> + s2 + <span class="string">"的一个最长公共子序列为:"</span> + lcs.getLCSString(s2)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>今天实现的算法是求解最长公共子序列，在字母表Σ上，分别给出两个长度为n和m的字符串A和B，确定在A和B中最长公共子序列的长度并输出该最长公共子序列。这里，A=a1a2…an的子序列是一个形式为ai1ai2…aik的字符串，其中每个ij都在1和n之间，并且1&lt;=i1<i]]>
    </summary>
    
      <category term="最长公共子序列" scheme="http://elvin.im/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无线承载网络无法共享Internet连接的解决方法]]></title>
    <link href="http://elvin.im/2012/03/10/%E6%97%A0%E7%BA%BF%E6%89%BF%E8%BD%BD%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E5%85%B1%E4%BA%ABInternet%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://elvin.im/2012/03/10/无线承载网络无法共享Internet连接的解决方法/</id>
    <published>2012-03-10T13:32:37.000Z</published>
    <updated>2014-10-25T13:47:44.000Z</updated>
    <content type="html"><![CDATA[<p>当没有无线路由器的时候怎么让Android手机通过家用宽带连接Internet呢？只要有一台笔记本或者是台式机+无线网卡。具体的做法如下：</p>
<p>首先以管理员身份在CMD中运行如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh wlan <span class="operator"><span class="keyword">set</span> hostednetwork <span class="keyword">mode</span>=allow ssid=xxx <span class="keyword">key</span>=xxxxxxxxxxxx</span></div></pre></td></tr></table></figure>

<p>该命令启用了无线承载网络并将无线网络的SSID设置为xxx，密码设置为xxxxxxxxxxxxxx，此时会出现一个新的网络连接，我的机器是<strong>无线网络连接 2</strong>。此命令运行成功后将连接到Internet的网络连接的Internet连接共享到新出现的<strong>无线网络连接 2</strong>。截图如下：</p>
<p><img src="http://elvin-blog.qiniudn.com/wlan-collection.jpg" alt=""></p>
<p>最后开启该无线承载网络即可，命令如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh wlan <span class="operator"><span class="keyword">start</span> hostednetwork</span></div></pre></td></tr></table></figure>



<p>此时手机应该已经可以正常连接到此无线网络并正常上网了。</p>
<p>但在共享Internet连接的时候可能会出现如下错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An <span class="keyword">error</span> occurred <span class="keyword">while</span> Internet Connection Sharing we being enabled.Internet Connection Sharing cannot be enabled. A LAN connection <span class="keyword">is</span> already configured <span class="keyword">with</span> <span class="keyword">the</span> IP address <span class="keyword">that</span> <span class="keyword">is</span> required <span class="keyword">for</span> automatic IP addressing.</div></pre></td></tr></table></figure>

<p>此时可以通过如下两条命令修复：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netsh int ip <span class="operator"><span class="keyword">reset</span> D:\resetlog.txt</span></div><div class="line">netsh winsock <span class="keyword">reset</span> <span class="keyword">catalog</span></div></pre></td></tr></table></figure>

<p>用管理员权限执行完这两条命令以后重启，应该就可以正常共享Internet连接了。</p>
<p>参考信息：<a href="http://www.makeuseof.com/answers/share-wireless-internet-connection-windows-7/" target="_blank" rel="external">http://www.makeuseof.com/answers/share-wireless-internet-connection-windows-7/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当没有无线路由器的时候怎么让Android手机通过家用宽带连接Internet呢？只要有一台笔记本或者是台式机+无线网卡。具体的做法如下：</p>
<p>首先以管理员身份在CMD中运行如下命令：</p>
<figure class="highlight"><table><t]]>
    </summary>
    
      <category term="无线网络共享 Windows" scheme="http://elvin.im/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB-Windows/"/>
    
      <category term="Windows" scheme="http://elvin.im/categories/Windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[寻找多数元素实现]]></title>
    <link href="http://elvin.im/2012/03/09/%E5%AF%BB%E6%89%BE%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/09/寻找多数元素实现/</id>
    <published>2012-03-09T14:17:32.000Z</published>
    <updated>2014-10-25T14:24:51.000Z</updated>
    <content type="html"><![CDATA[<p>多数元素是指在一个含有n个元素的序列中出现次数多于[n/2]（向下取整）的元素。</p>
<p>蛮力寻找多数元素是对每个元素进行计数，如果某个元素的计数超过[n/2]，则断言它是多数元素，否则不存在多数元素。这种方法的时间复杂度过高，可以寻找更高性能的算法解决这类问题。</p>
<p>如果一个序列存在多数元素，那么该多数元素一定是该序列排序后的中间元素，也就是第[n/2]（向上取整）个元素。所以可以通过寻找一个序列的中间元素，然后判断该元素是否为多数元素来寻找多数元素。对于此方法，有一个结论可以使用：</p>
<blockquote>
<p>在原序列中去除两个不同元素后，那么在原序列中的多数元素在新序列中还是多数元素。</p>
</blockquote>
<p>这个结论可以支持一个寻找多数元素候选者的算法，该算法的伪代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：CANDIDATE</span></div><div class="line"><span class="comment">//输入：n个元素的数组A[1...n]</span></div><div class="line"><span class="comment">//输出：多数元素的候选元素</span></div><div class="line"><span class="comment">//candidate(m)</span></div><div class="line"></div><div class="line">j ← m  </div><div class="line"><span class="built_in">c</span> ← <span class="type">A</span>[m]  </div><div class="line"><span class="built_in">count</span> ← <span class="number">1</span>  </div><div class="line"><span class="keyword">while</span> j &lt; n and <span class="built_in">count</span> &gt; <span class="number">0</span>:  </div><div class="line">    j ← j + <span class="number">1</span>  </div><div class="line">    <span class="keyword">if</span> <span class="type">A</span>[j] = <span class="built_in">c</span> then  </div><div class="line">        <span class="built_in">count</span> = <span class="built_in">count</span> + <span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="built_in">count</span> = <span class="built_in">count</span> - <span class="number">1</span>  </div><div class="line">    end <span class="keyword">if</span>  </div><div class="line">end <span class="keyword">while</span>  </div><div class="line"><span class="keyword">if</span> j == n then <span class="keyword">return</span> <span class="built_in">c</span>  </div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> candidate(j+<span class="number">1</span>)</div></pre></td></tr></table></figure>

<p>在寻找到候选多数元素后，只需要对该元素进行计数，判断是否为多数元素，该算法伪代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：MAJORITY</span></div><div class="line"><span class="comment">//输入：n个元素的数组A[1...n]</span></div><div class="line"><span class="comment">//输出：若存在多数元素，则输出；否则输出none</span></div><div class="line"> </div><div class="line"><span class="built_in">c</span> ← candidate(<span class="number">1</span>)  </div><div class="line"><span class="built_in">count</span> ← <span class="number">0</span>  </div><div class="line"><span class="keyword">for</span> j ← <span class="number">1</span> to n:  </div><div class="line">    <span class="keyword">if</span> <span class="type">A</span>[j] == <span class="built_in">c</span> then  </div><div class="line">        <span class="built_in">count</span> = <span class="built_in">count</span> + <span class="number">1</span>  </div><div class="line">    end <span class="keyword">if</span>  </div><div class="line">end <span class="keyword">for</span>  </div><div class="line"><span class="keyword">if</span> <span class="built_in">count</span> &gt; [n/<span class="number">2</span>] then <span class="keyword">return</span> <span class="built_in">c</span>  </div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">none</span></div></pre></td></tr></table></figure>

<p>下面是三种代码的实现，首先是C++版本：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> Type int  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> NONE INT_MIN   </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line">Type candidate(Type *a, <span class="keyword">int</span> n, <span class="keyword">int</span> m) {  </div><div class="line">    <span class="keyword">int</span> j = m;  </div><div class="line">    Type c = a[m];  </div><div class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">while</span> (j &lt; n && count &gt; <span class="number">0</span>) {  </div><div class="line">        j ++;  </div><div class="line">        <span class="keyword">if</span> (a[j] == c) {  </div><div class="line">            count ++;  </div><div class="line">        }<span class="keyword">else</span> {  </div><div class="line">            count --;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">if</span> (j == n) {  </div><div class="line">        <span class="keyword">return</span> c;  </div><div class="line">    }<span class="keyword">else</span> {  </div><div class="line">        <span class="keyword">return</span> candidate(a, n, j+<span class="number">1</span>);  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="comment">//输入数组必须有n+1个元素，第0个元素不使用，元素为1..n  </span></div><div class="line"><span class="comment">//若存在多数元素，则返回多数元素的值，若不存在则返回NONE   </span></div><div class="line">Type Majority(Type *a, <span class="keyword">int</span> n) {  </div><div class="line">    Type c  = candidate(a, n, <span class="number">1</span>);  </div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) {  </div><div class="line">        <span class="keyword">if</span> (a[j] == c) {  </div><div class="line">            count ++;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">if</span> (count &gt; n/<span class="number">2</span>) {  </div><div class="line">        <span class="keyword">return</span> c;  </div><div class="line">    } <span class="keyword">else</span> {  </div><div class="line">        <span class="keyword">return</span> NONE;  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {  </div><div class="line">    Type a[<span class="number">14</span>] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span> ,<span class="number">3</span> ,<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>};   </div><div class="line">      </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入数组为：\n"</span>;   </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i ++) {  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">    }  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; endl;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"多数元素为：\n"</span> &lt;&lt; Majority(a, <span class="number">13</span>) &lt;&lt; endl;  </div><div class="line">      </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后是Java代码：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MajorityList</span> </span>{  </div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasMajority = <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> majority_value = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 构造函数，使list从第1个元素开始保存，而不是第0个 </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="title">MajorityList</span>() {  </div><div class="line">        list.add(<span class="number">0</span>);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 寻找候选者 </div><div class="line">     *<span class="javadoctag"> @param</span> m  </div><div class="line">     *<span class="javadoctag"> @return</span> 返回可能的多数元素 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">candidate</span>(<span class="keyword">int</span> m) {  </div><div class="line">        <span class="keyword">int</span> j = m;  </div><div class="line">        <span class="keyword">int</span> c = list.get(m);  </div><div class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;  </div><div class="line">        <span class="keyword">while</span> (j &lt; list.size()-<span class="number">1</span> && count &gt; <span class="number">0</span>) {  </div><div class="line">            j ++;  </div><div class="line">            <span class="keyword">if</span> (list.get(j) == c) {  </div><div class="line">                count ++;  </div><div class="line">            }<span class="keyword">else</span> {  </div><div class="line">                count --;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (j == list.size()-<span class="number">1</span>) {  </div><div class="line">            <span class="keyword">return</span> c;  </div><div class="line">        }<span class="keyword">else</span> {  </div><div class="line">            <span class="keyword">return</span> candidate(j+<span class="number">1</span>);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 判断候选者是否为多数元素 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">majority</span>() {  </div><div class="line">        <span class="keyword">int</span> c  = candidate(<span class="number">1</span>);  </div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= list.size()-<span class="number">1</span>; j ++) {  </div><div class="line">            <span class="keyword">if</span> (list.get(j) == c) {  </div><div class="line">                count ++;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (count &gt; (list.size()-<span class="number">1</span>)/<span class="number">2</span>) {  </div><div class="line">            hasMajority = <span class="keyword">true</span>;  </div><div class="line">            majority_value = c;  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            hasMajority = <span class="keyword">false</span>;  </div><div class="line">            majority_value = <span class="number">0</span>;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="keyword">int</span> x) {  </div><div class="line">        list.add(x);  </div><div class="line">        hasMajority = <span class="keyword">false</span>;  </div><div class="line">        majority_value = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMajorityElement</span>() {  </div><div class="line">        majority();  </div><div class="line">        <span class="keyword">return</span> hasMajority;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMajorityElement</span>() {  </div><div class="line">        <span class="keyword">return</span> majority_value;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     *<span class="javadoctag"> @param</span> args </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">int</span> [] a = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span> ,<span class="number">3</span> ,<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>};  </div><div class="line">        MajorityList ml = <span class="keyword">new</span> MajorityList();  </div><div class="line">          </div><div class="line">        System.out.println(<span class="string">"输入数组为："</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) {  </div><div class="line">            System.out.print(a[i]);  </div><div class="line">            System.out.print(<span class="string">"  "</span>);  </div><div class="line">            ml.add(a[i]);  </div><div class="line">        }  </div><div class="line">        System.out.println();  </div><div class="line">          </div><div class="line">        <span class="keyword">boolean</span> result = ml.hasMajorityElement();  </div><div class="line">        System.out.print(<span class="string">"是否存在多数元素？ "</span>);  </div><div class="line">        System.out.println(result);  </div><div class="line">        <span class="keyword">if</span> (result) {  </div><div class="line">            System.out.print(<span class="string">"多数元素为："</span>);  </div><div class="line">            System.out.println(ml.getMajorityElement());  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>最后是Python实现：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python    </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MajorityList</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </div><div class="line">        self._list = list()  </div><div class="line">        self.hasMajority = <span class="keyword">False</span>  </div><div class="line">        self.majority_value = <span class="number">0</span>  </div><div class="line">        self._list.append(<span class="number">0</span>)  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">candidate</span><span class="params">(self, m)</span>:</span>  </div><div class="line">        j = m  </div><div class="line">        c = self._list[m]  </div><div class="line">        count = <span class="number">1</span>  </div><div class="line">        <span class="keyword">while</span> j &lt; len(self._list)-<span class="number">1</span> <span class="keyword">and</span> count &gt; <span class="number">0</span>:  </div><div class="line">            j = j + <span class="number">1</span>  </div><div class="line">            <span class="keyword">if</span> self._list[j] == c:  </div><div class="line">                count += <span class="number">1</span>  </div><div class="line">            <span class="keyword">else</span>:  </div><div class="line">                count -= <span class="number">1</span>  </div><div class="line">        <span class="keyword">if</span> j == len(self._list)-<span class="number">1</span>:  </div><div class="line">            <span class="keyword">return</span> c  </div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            <span class="keyword">return</span> self.candidate(j+<span class="number">1</span>)  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majority</span><span class="params">(self)</span>:</span>  </div><div class="line">        c = self.candidate(<span class="number">1</span>)  </div><div class="line">        count = <span class="number">0</span>  </div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(self._list)):  </div><div class="line">            <span class="keyword">if</span> self._list[j] == c:  </div><div class="line">                count += <span class="number">1</span>  </div><div class="line">        <span class="keyword">if</span> count &gt; (len(self._list)-<span class="number">1</span>)/<span class="number">2</span>:  </div><div class="line">            self.hasMajority = <span class="keyword">True</span>  </div><div class="line">            self.majority_value = c  </div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            self.hasMajority = <span class="keyword">False</span>  </div><div class="line">            self.majority_value = <span class="number">0</span>  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span>  </div><div class="line">        self._list.append(x)  </div><div class="line">        self.hasMajority = <span class="keyword">False</span>  </div><div class="line">        self.majority_value = <span class="number">0</span>  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMajorityElement</span><span class="params">(self)</span>:</span>  </div><div class="line">        self.majority()  </div><div class="line">        <span class="keyword">return</span> self.hasMajority  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMajorityElement</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> self.majority_value  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span> ,<span class="number">3</span> ,<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]  </div><div class="line">    ml = MajorityList()  </div><div class="line">  </div><div class="line">    <span class="keyword">print</span> <span class="string">'输入数组为：'</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">        <span class="keyword">print</span> i,  </div><div class="line">        ml.add(i)  </div><div class="line">    <span class="keyword">print</span>  </div><div class="line">  </div><div class="line">    result = ml.hasMajorityElement()  </div><div class="line">    <span class="keyword">print</span> <span class="string">'是否存在多数元素？'</span>, result  </div><div class="line">    <span class="keyword">if</span> result:  </div><div class="line">        <span class="keyword">print</span> <span class="string">'多数元素为：'</span>, ml.getMajorityElement()</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>多数元素是指在一个含有n个元素的序列中出现次数多于[n/2]（向下取整）的元素。</p>
<p>蛮力寻找多数元素是对每个元素进行计数，如果某个元素的计数超过[n/2]，则断言它是多数元素，否则不存在多数元素。这种方法的时间复杂度过高，可以寻找更高性能的算法解决这类问题。</]]>
    </summary>
    
      <category term="寻找多数元素" scheme="http://elvin.im/tags/%E5%AF%BB%E6%89%BE%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[并查集实现]]></title>
    <link href="http://elvin.im/2012/03/08/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/08/并查集实现/</id>
    <published>2012-03-08T14:07:53.000Z</published>
    <updated>2014-10-25T14:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>并查集是一种树形的数据结构，用于处理一些不相交集合的合并及查询问题。常常在使用中以森林来表示。判断亲戚关系是并查集的一个应用：若某个家族过于庞大，要判断两个人是否是亲戚，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系；规定x和y是亲戚，y和z是亲戚，那么x和z也是亲戚；如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。</p>
<p>并查集可以表示成如下图所示的数据结构：</p>
<p><img src="http://elvin-blog.qiniudn.com/union-set.jpg" alt=""></p>
<p>实现并查集的核心算法是查找（FIND）和合并（UNION）。查找算法是递归的查找某节点的父节点直到找到根节点为止，而合并算法是将两棵树合并为一棵树。在这个过程中有一个明显的缺点，合并的时候在极端情况下可能会造成树的高度过高，而导致查找时效率过低。对于此，可以对查找和合并进行优化，采用按秩（rank）合并，和带路径压缩的查找。</p>
<p>下面是带路径压缩的查找算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：FIND</span></div><div class="line"><span class="comment">//输入：节点x</span></div><div class="line"><span class="comment">//输出：root(x)，包含x的树的根</span></div><div class="line"></div><div class="line">y ← x  </div><div class="line"><span class="keyword">while</span> p(y) != <span class="keyword">null</span>  </div><div class="line">    y ← p(y)  </div><div class="line"><span class="keyword">end</span> <span class="keyword">while</span>  </div><div class="line">root ← y  </div><div class="line">y ← x  </div><div class="line"><span class="keyword">while</span> p(y) != <span class="keyword">null</span>  </div><div class="line">    w ← p(y)  </div><div class="line">    p(y) ← root  </div><div class="line">    y ← w  </div><div class="line"><span class="keyword">end</span> <span class="keyword">while</span>  </div><div class="line"><span class="keyword">return</span> root</div></pre></td></tr></table></figure>

<p>下面是按秩（rank）合并的合并算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：UNION</span></div><div class="line"><span class="comment">//输入：两个元素x和y</span></div><div class="line"><span class="comment">//输出：包含x和y的两个树的合并，原来的树被破坏</span></div><div class="line"></div><div class="line">u ← FIND(x)  </div><div class="line">v ← FIND(y)  </div><div class="line"><span class="keyword">if</span> rank(u) &lt;= rank(v) <span class="keyword">then</span>  </div><div class="line">    p(u) ← v  </div><div class="line">    <span class="keyword">if</span> rank(u) == rank(v) <span class="keyword">then</span>  </div><div class="line">        rank(v) ← rank(v) + <span class="number">1</span>  </div><div class="line"><span class="keyword">else</span> p(v) ← u  </div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div></pre></td></tr></table></figure>

<p>下面是C++的实现：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> Type Set  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Set {  </div><div class="line">    <span class="keyword">int</span> parent;  </div><div class="line">    <span class="keyword">int</span> rank;  </div><div class="line">};  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> Find(Type *a, <span class="keyword">int</span> x) {  </div><div class="line">    <span class="keyword">int</span> y = x;  </div><div class="line">    <span class="keyword">while</span>(a[y].parent != <span class="number">0</span>) {  </div><div class="line">       y = a[y].parent;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">int</span> root = y;  </div><div class="line">    y = x;   </div><div class="line">    <span class="keyword">while</span>(a[y].parent != <span class="number">0</span>) {  </div><div class="line">        <span class="keyword">int</span> w = a[y].parent;  </div><div class="line">        a[y].parent = root;  </div><div class="line">        y = w;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> root;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> Union(Type *a, <span class="keyword">int</span> x, <span class="keyword">int</span> y) {  </div><div class="line">    <span class="keyword">int</span> u = Find(a, x);  </div><div class="line">    <span class="keyword">int</span> v = Find(a, y);  </div><div class="line">    <span class="keyword">if</span>(a[u].rank &lt;= a[v].rank) {  </div><div class="line">        a[u].parent = v;  </div><div class="line">        <span class="keyword">if</span>(a[u].rank == a[v].rank) {  </div><div class="line">            a[v].rank ++;  </div><div class="line">        }  </div><div class="line">    } <span class="keyword">else</span> {  </div><div class="line">        a[v].parent = u;  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> Initialize(Type *a, <span class="keyword">int</span> n) {     </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) {  </div><div class="line">        a[i].parent = <span class="number">0</span>;  </div><div class="line">        a[i].rank = <span class="number">0</span>;  </div><div class="line">    }  </div><div class="line">}    </div><div class="line">  </div><div class="line"><span class="keyword">void</span> Show(Type *a, <span class="keyword">int</span> n) {  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) {  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"  -&gt;  "</span> &lt;&lt; a[i].parent &lt;&lt; <span class="string">"   rank:  "</span> &lt;&lt; a[i].rank &lt;&lt; endl;  </div><div class="line">    }  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------------------\n"</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main() {  </div><div class="line">    Type S[<span class="number">10</span>];  </div><div class="line">    Initialize(S, <span class="number">9</span>);  </div><div class="line">      </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">1</span>, <span class="number">2</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">3</span>, <span class="number">4</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">5</span>, <span class="number">6</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">7</span>, <span class="number">8</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">2</span>, <span class="number">4</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">8</span>, <span class="number">9</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">6</span>, <span class="number">8</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Find(S, <span class="number">5</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Union(S, <span class="number">4</span>, <span class="number">8</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">    Find(S, <span class="number">1</span>);  </div><div class="line">    Show(S, <span class="number">9</span>);  </div><div class="line">      </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后是Java实现：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;  </div><div class="line"><span class="keyword">import</span> java.util.HashMap;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisjointSet</span> </span>{  </div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; parent = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; rank = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </div><div class="line">    <span class="comment">//private ArrayList&lt;String&gt; content = new ArrayList&lt;String&gt;();  </span></div><div class="line">    <span class="keyword">private</span> HashMap&lt;String, Integer&gt; content = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 初始化哈函数 </div><div class="line">     *<span class="javadoctag"> @param</span> contents 所有的元素 </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="title">DisjointSet</span>(ArrayList&lt;String&gt; contents) {  </div><div class="line">          </div><div class="line">        <span class="comment">//将第0个元素置0，使集合从1号元素开始  </span></div><div class="line">        <span class="keyword">this</span>.parent.clear();  </div><div class="line">        <span class="keyword">this</span>.rank.clear();  </div><div class="line">        <span class="keyword">this</span>.parent.add(<span class="number">0</span>);  </div><div class="line">        <span class="keyword">this</span>.rank.add(<span class="number">0</span>);  </div><div class="line">          </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; contents.size(); i ++) {  </div><div class="line">            <span class="keyword">this</span>.parent.add(<span class="number">0</span>);  </div><div class="line">            <span class="keyword">this</span>.rank.add(<span class="number">0</span>);  </div><div class="line">            <span class="keyword">this</span>.content.put(contents.get(i), <span class="keyword">this</span>.parent.size()-<span class="number">1</span>);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) {  </div><div class="line">        <span class="keyword">int</span> u = <span class="keyword">this</span>.find(x);  </div><div class="line">        <span class="keyword">int</span> v = <span class="keyword">this</span>.find(y);  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.rank.get(u) &lt;= <span class="keyword">this</span>.rank.get(v)) {  </div><div class="line">            <span class="keyword">this</span>.parent.set(u, v);  </div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.rank.get(u) == <span class="keyword">this</span>.rank.get(v)) {  </div><div class="line">                <span class="keyword">this</span>.rank.set(v, <span class="keyword">this</span>.rank.get(v)+<span class="number">1</span>);  </div><div class="line">            }  </div><div class="line">        } <span class="keyword">else</span> {  </div><div class="line">            <span class="keyword">this</span>.parent.set(v, u);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span>(<span class="keyword">int</span> x) {  </div><div class="line">        <span class="keyword">int</span> y = x;  </div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.parent.get(y) != <span class="number">0</span>) {  </div><div class="line">            y = <span class="keyword">this</span>.parent.get(y);  </div><div class="line">        }  </div><div class="line">        <span class="keyword">int</span> root = y;  </div><div class="line">        y = x;  </div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.parent.get(y) != <span class="number">0</span>) {  </div><div class="line">            <span class="keyword">int</span> w = <span class="keyword">this</span>.parent.get(y);  </div><div class="line">            <span class="keyword">this</span>.parent.set(y, root);  </div><div class="line">            y = w;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> root;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 判断a和b是否属于一个集合 </div><div class="line">     *<span class="javadoctag"> @param</span> a  </div><div class="line">     *<span class="javadoctag"> @param</span> b </div><div class="line">     *<span class="javadoctag"> @return</span> 若a和b均是集合元素且属于同一个集合，则返回true，否则返回false </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span>(String a, String b) {  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.content.containsKey(a) != <span class="keyword">true</span> || <span class="keyword">this</span>.content.containsKey(b) != <span class="keyword">true</span>) {  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">int</span> u = <span class="keyword">this</span>.find(<span class="keyword">this</span>.content.get(a));  </div><div class="line">        <span class="keyword">int</span> v = <span class="keyword">this</span>.find(<span class="keyword">this</span>.content.get(b));  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> u == v;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 将a和b合并成一个集合 </div><div class="line">     *<span class="javadoctag"> @param</span> a </div><div class="line">     *<span class="javadoctag"> @param</span> b </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span>(String a, String b) {  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.content.containsKey(a) != <span class="keyword">true</span> || <span class="keyword">this</span>.content.containsKey(b) != <span class="keyword">true</span>) {  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="keyword">this</span>.union(<span class="keyword">this</span>.content.get(a), <span class="keyword">this</span>.content.get(b));  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     * 添加新的集合元素 </div><div class="line">     *<span class="javadoctag"> @param</span> a </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(String a) {  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.content.containsKey(a)) {  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">this</span>.parent.add(<span class="number">0</span>);  </div><div class="line">        <span class="keyword">this</span>.rank.add(<span class="number">0</span>);  </div><div class="line">        <span class="keyword">this</span>.content.put(a, <span class="keyword">this</span>.parent.size()-<span class="number">1</span>);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     *<span class="javadoctag"> @param</span> args </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        System.out.println(<span class="string">"假设Sheldon、Amy和Raj属于一个集合，Howard和Bernadette属于一个集合，Leonard和Penny属于一个集合"</span>);  </div><div class="line">        String [] names = {<span class="string">"Sheldon"</span>, <span class="string">"Amy"</span>, <span class="string">"Raj"</span>, <span class="string">"Howard"</span>, <span class="string">"Bernadette"</span>, <span class="string">"Leonard"</span>, <span class="string">"Penny"</span>};  </div><div class="line">        ArrayList&lt;String&gt; set = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) {  </div><div class="line">            set.add(names[i]);  </div><div class="line">        }  </div><div class="line">        DisjointSet ds = <span class="keyword">new</span> DisjointSet(set);  </div><div class="line">        ds.join(<span class="string">"Sheldon"</span>, <span class="string">"Amy"</span>);  </div><div class="line">        ds.join(<span class="string">"Amy"</span>, <span class="string">"Raj"</span>);  </div><div class="line">        ds.join(<span class="string">"Howard"</span>, <span class="string">"Bernadette"</span>);  </div><div class="line">        ds.join(<span class="string">"Leonard"</span>, <span class="string">"Penny"</span>);  </div><div class="line">          </div><div class="line">        System.out.print(<span class="string">"Sheldon和Raj属于一个集合吗？ "</span>);  </div><div class="line">        System.out.println(ds.isSameSet(<span class="string">"Sheldon"</span>, <span class="string">"Raj"</span>));  </div><div class="line">          </div><div class="line">        System.out.print(<span class="string">"Howard和Penny属于一个集合吗？ "</span>);  </div><div class="line">        System.out.println(ds.isSameSet(<span class="string">"Howard"</span>, <span class="string">"Penny"</span>));  </div><div class="line">    }  </div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>最后是Python版本：</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python  </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSet</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, contents)</span>:</span>  </div><div class="line">        self.parent = [<span class="number">0</span>]  </div><div class="line">        self.rank = [<span class="number">0</span>]  </div><div class="line">        self.content = dict()  </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> contents:  </div><div class="line">            self.parent.append(<span class="number">0</span>)  </div><div class="line">            self.rank.append(<span class="number">0</span>)  </div><div class="line">            self.content[i] = len(self.parent)-<span class="number">1</span>  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span>  </div><div class="line">        u = self.find(x)  </div><div class="line">        v = self.find(y)  </div><div class="line">        <span class="keyword">if</span> self.rank[u] &lt;= self.rank[v]:  </div><div class="line">            self.parent[u] = v  </div><div class="line">            <span class="keyword">if</span> self.rank[u] == self.rank[v]:  </div><div class="line">                self.rank[v] = self.rank[v]+<span class="number">1</span>  </div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            self.parent[v] = u  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span>  </div><div class="line">        y = x  </div><div class="line">        <span class="keyword">while</span> self.parent[y] != <span class="number">0</span>:  </div><div class="line">            y = self.parent[y]  </div><div class="line">        root = y  </div><div class="line">        y = x  </div><div class="line">        <span class="keyword">while</span> self.parent[y] != <span class="number">0</span>:  </div><div class="line">            w = self.parent[y]  </div><div class="line">            self.parent[y] = root  </div><div class="line">            y = w  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> root  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameSet</span><span class="params">(self, a, b)</span>:</span>  </div><div class="line">        <span class="keyword">if</span> self.content.has_key(a) != <span class="keyword">True</span> <span class="keyword">or</span> self.content.has_key(b) != <span class="keyword">True</span>:  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span>  </div><div class="line">  </div><div class="line">        u = self.find(self.content[a])  </div><div class="line">        v = self.find(self.content[b])  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> u == v  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self, a, b)</span>:</span>  </div><div class="line">        <span class="keyword">if</span> self.content.has_key(a) != <span class="keyword">True</span> <span class="keyword">or</span> self.content.has_key(b) != <span class="keyword">True</span>:  </div><div class="line">            <span class="keyword">return</span>  </div><div class="line">  </div><div class="line">        self.union(self.content[a], self.content[b])  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, a)</span>:</span>  </div><div class="line">        <span class="keyword">if</span> self.content.has_key(a):  </div><div class="line">            <span class="keyword">return</span>  </div><div class="line">  </div><div class="line">        self.parent.append(<span class="number">0</span>)  </div><div class="line">        self.rank.append(<span class="number">0</span>)  </div><div class="line">        self.content[i] = len(self.parent)-<span class="number">1</span>  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    <span class="keyword">print</span> <span class="string">'假设Sheldon、Amy和Raj属于一个集合，Howard和Bernadette属于一个集合，Leonard和Penny属于一个集合'</span>  </div><div class="line">    names = [<span class="string">"Sheldon"</span>, <span class="string">"Amy"</span>, <span class="string">"Raj"</span>, <span class="string">"Howard"</span>, <span class="string">"Bernadette"</span>, <span class="string">"Leonard"</span>, <span class="string">"Penny"</span>]  </div><div class="line">    ds = DisjointSet(names)  </div><div class="line">    ds.join(<span class="string">"Sheldon"</span>, <span class="string">"Amy"</span>)  </div><div class="line">    ds.join(<span class="string">"Amy"</span>, <span class="string">"Raj"</span>)  </div><div class="line">    ds.join(<span class="string">"Howard"</span>, <span class="string">"Bernadette"</span>)  </div><div class="line">    ds.join(<span class="string">"Leonard"</span>, <span class="string">"Penny"</span>)  </div><div class="line">  </div><div class="line">    <span class="keyword">print</span> <span class="string">'Sheldon和Raj属于一个集合吗？'</span>, ds.isSameSet(<span class="string">"Sheldon"</span>, <span class="string">"Raj"</span>)  </div><div class="line">    <span class="keyword">print</span> <span class="string">'Howard和Penny属于一个集合吗？'</span>, ds.isSameSet(<span class="string">"Howard"</span>, <span class="string">"Penny"</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>并查集是一种树形的数据结构，用于处理一些不相交集合的合并及查询问题。常常在使用中以森林来表示。判断亲戚关系是并查集的一个应用：若某个家族过于庞大，要判断两个人是否是亲戚，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系；规定x和y是亲戚，y和z是亲戚，那么x和z也]]>
    </summary>
    
      <category term="并查集" scheme="http://elvin.im/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速排序算法]]></title>
    <link href="http://elvin.im/2012/03/07/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://elvin.im/2012/03/07/快速排序算法实现/</id>
    <published>2012-03-07T13:53:22.000Z</published>
    <updated>2014-11-16T16:41:51.000Z</updated>
    <content type="html"><![CDATA[<p>快速排序算法是20世纪十大最伟大的算法之一。它是由C.R.A.Hoare于1962年提出的一种划分交换排序算法，其采用的是分治的思想，分治是将原问题分解成若干与原问题相似的子问题，通过递归的解决这些子问题来最终得出原问题的解。</p>
<p>快速排序是通过一个划分（SPLIT）算法来将待排序序列划分成两部分，其中左边的元素都小于中间的元素，右边的元素都小于中间的元素。然后通过对子数组进行递归划分就可以完成对整个序列的排序。所以划分（SPLIT）算法是快速排序的核心，它的伪代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：SPLIT</span></div><div class="line"><span class="comment">//输入：数组A[low...high]</span></div><div class="line"><span class="comment">//输出：1）重新排列的A；2）划分元素A[low]的新位置w；</span></div><div class="line"></div><div class="line">i ← low  </div><div class="line">x ← A[low]  </div><div class="line"><span class="keyword">for</span> j ← low+<span class="number">1</span> <span class="keyword">to</span> high:  </div><div class="line">    <span class="keyword">if</span> A[j] &lt;= x <span class="keyword">then</span>:  </div><div class="line">        i ← i+<span class="number">1</span>  </div><div class="line">        <span class="keyword">if</span> i != j <span class="keyword">then</span> 互换A[i]和A[j]  </div><div class="line">        <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line">    <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">for</span>  </div><div class="line">互换A[low]和A[i]  </div><div class="line">w ← i  </div><div class="line"><span class="keyword">return</span> A和w</div></pre></td></tr></table></figure>

<p>快速排序很容易用递归的方式实现，递归方式的伪代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：QUICKSORT</span></div><div class="line"><span class="comment">//输入：n个元素的数组A[1...n]</span></div><div class="line"><span class="comment">//输出：按非降序排列的数组A中的元素</span></div><div class="line"><span class="comment">//quicksort(A, 1, n)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> low &lt; high <span class="keyword">then</span>  </div><div class="line">    SPLIT(A[low...high], w)  </div><div class="line">    quicksort(A, low, w-<span class="number">1</span>)  </div><div class="line">    quicksort(A, w+<span class="number">1</span>, high)  </div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div></pre></td></tr></table></figure>

<p>快速排序也可以用迭代的方式实现，迭代方式伪代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//算法：QUICKSORT</span></div><div class="line"><span class="comment">//输入：n个元素的数组A[1...n]</span></div><div class="line"><span class="comment">//输出：按非降序排列的数组A中的元素</span></div><div class="line"><span class="comment">//quicksort(A, 1, n)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> low &gt;= high <span class="keyword">then</span>   </div><div class="line">    <span class="keyword">return</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line">  </div><div class="line">low 进栈  </div><div class="line">high 进栈  </div><div class="line"><span class="keyword">while</span> 栈不为空:  </div><div class="line">    high = 栈顶（出栈）  </div><div class="line">    low = 栈顶（出栈）  </div><div class="line">    w = SPLIT(A, low, high)  </div><div class="line">    <span class="keyword">if</span> low &lt; w-<span class="number">1</span> <span class="keyword">then</span>:  </div><div class="line">        low 进栈  </div><div class="line">        w-<span class="number">1</span> 进栈  </div><div class="line">    <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line">    <span class="keyword">if</span> high &gt; w+<span class="number">1</span> <span class="keyword">then</span>:  </div><div class="line">        w+<span class="number">1</span> 进栈  </div><div class="line">        high 进栈  </div><div class="line">    <span class="keyword">end</span> <span class="keyword">if</span>  </div><div class="line"><span class="keyword">end</span> <span class="keyword">while</span></div></pre></td></tr></table></figure>

<p>在这里只实现快速排序的迭代方式实现，C++代码实现的快排如下：</p>
<figure class="highlight [CPP]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> Type int  </span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> Split(Type * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high) {  </div><div class="line">    <span class="keyword">int</span> i = low;  </div><div class="line">    <span class="keyword">int</span> x = a[low];  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = low+<span class="number">1</span>; j &lt;= high; j++) {  </div><div class="line">        <span class="keyword">if</span> (a[j] &lt;= x) {  </div><div class="line">            i ++;  </div><div class="line">            <span class="keyword">if</span> (i != j) {  </div><div class="line">                Type temp = a[i];  </div><div class="line">                a[i] = a[j];  </div><div class="line">                a[j] = temp;  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    Type temp = a[low];  </div><div class="line">    a[low] = a[i];  </div><div class="line">    a[i] = temp;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> i;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> QuickSort(Type * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high) {  </div><div class="line">    <span class="keyword">if</span> (low &gt;= high) {  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="stl_container"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;</span> range;  </div><div class="line">    range.push(low);  </div><div class="line">    range.push(high);  </div><div class="line">    <span class="keyword">while</span>(!range.empty()) {  </div><div class="line">        high = range.top();  </div><div class="line">        range.pop();  </div><div class="line">        low = range.top();  </div><div class="line">        range.pop();  </div><div class="line">          </div><div class="line">        <span class="keyword">int</span> w = Split(a, low, high);  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span> (low &lt; w-<span class="number">1</span>) {  </div><div class="line">            range.push(low);  </div><div class="line">            range.push(w-<span class="number">1</span>);  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (high &gt; w+<span class="number">1</span>) {  </div><div class="line">            range.push(w+<span class="number">1</span>);  </div><div class="line">            range.push(high);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {  </div><div class="line">    Type a[<span class="number">20</span>] = {<span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span> ,<span class="number">3</span>};  </div><div class="line">      </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序前：\n"</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i ++) {  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">    }   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; endl;  </div><div class="line">      </div><div class="line">    QuickSort(a, <span class="number">0</span>, <span class="number">19</span>);  </div><div class="line">      </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"迭代版快速排序后：\n"</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i ++) {  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;  </div><div class="line">    }   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; endl;  </div><div class="line">      </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Java版本：</p>
<figure class="highlight [Java]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sort;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.util.Stack;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>{  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [] array = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sorted = <span class="keyword">false</span>;  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="title">QuickSort</span>(<span class="keyword">int</span> [] a) {  </div><div class="line">        <span class="keyword">this</span>.array = <span class="keyword">new</span> <span class="keyword">int</span> [a.length];  </div><div class="line">        System.arraycopy(a, <span class="number">0</span>, <span class="keyword">this</span>.array, <span class="number">0</span>, a.length);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">split</span>(<span class="keyword">int</span> low, <span class="keyword">int</span> high) {  </div><div class="line">        <span class="keyword">int</span> i = low;    </div><div class="line">        <span class="keyword">int</span> x = array[low];    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = low+<span class="number">1</span>; j &lt;= high; j++) {    </div><div class="line">            <span class="keyword">if</span> (array[j] &lt;= x) {    </div><div class="line">                i ++;    </div><div class="line">                <span class="keyword">if</span> (i != j) {    </div><div class="line">                    <span class="keyword">int</span> temp = array[i];    </div><div class="line">                    array[i] = array[j];    </div><div class="line">                    array[j] = temp;    </div><div class="line">                }    </div><div class="line">            }    </div><div class="line">        }    </div><div class="line">        <span class="keyword">int</span> temp = array[low];    </div><div class="line">        array[low] = array[i];    </div><div class="line">        array[i] = temp;    </div><div class="line">            </div><div class="line">        <span class="keyword">return</span> i;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span>() {  </div><div class="line">        <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) {  </div><div class="line">            sorted = <span class="keyword">true</span>;  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = array.length-<span class="number">1</span>;  </div><div class="line">        Stack&lt;Integer&gt; range = <span class="keyword">new</span> Stack&lt;Integer&gt;();  </div><div class="line">        range.push(low);  </div><div class="line">        range.push(high);  </div><div class="line">        <span class="keyword">while</span> (!range.empty()) {  </div><div class="line">            high = range.pop();  </div><div class="line">            low = range.pop();  </div><div class="line">              </div><div class="line">            <span class="keyword">int</span> w = split(low, high);  </div><div class="line">              </div><div class="line">            <span class="keyword">if</span> (low &lt; w-<span class="number">1</span>) {  </div><div class="line">                range.push(low);  </div><div class="line">                range.push(w-<span class="number">1</span>);  </div><div class="line">            }  </div><div class="line">            <span class="keyword">if</span> (high &gt; w+<span class="number">1</span>) {    </div><div class="line">                range.push(w+<span class="number">1</span>);    </div><div class="line">                range.push(high);    </div><div class="line">            }    </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> [] <span class="title">getSortedIntArray</span>() {  </div><div class="line">        <span class="keyword">if</span> (!sorted) {  </div><div class="line">            quickSort();  </div><div class="line">        }  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="javadoc">/** </span></div><div class="line">     *<span class="javadoctag"> @param</span> args </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">int</span> [] a = {<span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span> ,<span class="number">3</span>};   </div><div class="line">          </div><div class="line">        System.out.println(<span class="string">"排序前："</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>; i ++) {  </div><div class="line">            System.out.print(a[i] + <span class="string">"  "</span>);  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        QuickSort qs = <span class="keyword">new</span> QuickSort(a);  </div><div class="line">        a = qs.getSortedIntArray();  </div><div class="line">          </div><div class="line">        System.out.println(<span class="string">"迭代版快速排序后："</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>; i ++) {  </div><div class="line">            System.out.print(a[i] + <span class="string">"  "</span>);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Python版本:</p>
<figure class="highlight [Python]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python  </span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(array, low, high)</span>:</span>  </div><div class="line">    i = low  </div><div class="line">    x = array[low]  </div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(low+<span class="number">1</span>, high+<span class="number">1</span>):  </div><div class="line">        <span class="keyword">if</span> array[j] &lt;= x:  </div><div class="line">            i = i+<span class="number">1</span>  </div><div class="line">            <span class="keyword">if</span> i != j:  </div><div class="line">                temp = array[i]  </div><div class="line">                array[i] = array[j]  </div><div class="line">                array[j] = temp  </div><div class="line">    temp = array[low]  </div><div class="line">    array[low] = array[i]  </div><div class="line">    array[i] = temp  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> i  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(array, low, high)</span>:</span>  </div><div class="line">    <span class="keyword">if</span> low &gt;= high:  </div><div class="line">        <span class="keyword">return</span>  </div><div class="line">  </div><div class="line">    stack_range = list()  </div><div class="line">    stack_range.append(low)  </div><div class="line">    stack_range.append(high)  </div><div class="line">    <span class="keyword">while</span> len(stack_range) != <span class="number">0</span>:  </div><div class="line">        high = stack_range.pop()  </div><div class="line">        low = stack_range.pop()  </div><div class="line">  </div><div class="line">        w = split(array, low, high)  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> low &lt; w-<span class="number">1</span>:  </div><div class="line">            stack_range.append(low)  </div><div class="line">            stack_range.append(w-<span class="number">1</span>)  </div><div class="line">        <span class="keyword">if</span> high &gt; w+<span class="number">1</span>:  </div><div class="line">            stack_range.append(w+<span class="number">1</span>)  </div><div class="line">            stack_range.append(high)  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span> ,<span class="number">3</span>]  </div><div class="line">  </div><div class="line">    <span class="keyword">print</span> <span class="string">'排序前：'</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">        <span class="keyword">print</span> i,  </div><div class="line">    <span class="keyword">print</span>  </div><div class="line">  </div><div class="line">    quickSort(a, <span class="number">0</span>, len(a)-<span class="number">1</span>)  </div><div class="line">  </div><div class="line">    <span class="keyword">print</span> <span class="string">'迭代排序后：'</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:  </div><div class="line">        <span class="keyword">print</span> i,</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>快速排序算法是20世纪十大最伟大的算法之一。它是由C.R.A.Hoare于1962年提出的一种划分交换排序算法，其采用的是分治的思想，分治是将原问题分解成若干与原问题相似的子问题，通过递归的解决这些子问题来最终得出原问题的解。</p>
<p>快速排序是通过一个划分（SPLI]]>
    </summary>
    
      <category term="快速排序" scheme="http://elvin.im/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法实现" scheme="http://elvin.im/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
</feed>
